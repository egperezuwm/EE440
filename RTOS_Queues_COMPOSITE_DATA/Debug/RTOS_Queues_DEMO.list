
RTOS_Queues_DEMO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e58  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08007008  08007008  00017008  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080070d4  080070d4  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  080070d4  080070d4  000170d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080070dc  080070dc  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080070dc  080070dc  000170dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080070e0  080070e0  000170e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  080070e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020060  2**0
                  CONTENTS
 10 .bss          000057dc  20000060  20000060  00020060  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000583c  2000583c  00020060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001ffe3  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003ec1  00000000  00000000  000400b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001a50  00000000  00000000  00043f78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000148c  00000000  00000000  000459c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002794a  00000000  00000000  00046e54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001ceee  00000000  00000000  0006e79e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ee63b  00000000  00000000  0008b68c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00007398  00000000  00000000  00179cc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006c  00000000  00000000  00181060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000060 	.word	0x20000060
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08006ff0 	.word	0x08006ff0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000064 	.word	0x20000064
 80001ec:	08006ff0 	.word	0x08006ff0

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b970 	b.w	80004e8 <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9e08      	ldr	r6, [sp, #32]
 8000226:	460d      	mov	r5, r1
 8000228:	4604      	mov	r4, r0
 800022a:	460f      	mov	r7, r1
 800022c:	2b00      	cmp	r3, #0
 800022e:	d14a      	bne.n	80002c6 <__udivmoddi4+0xa6>
 8000230:	428a      	cmp	r2, r1
 8000232:	4694      	mov	ip, r2
 8000234:	d965      	bls.n	8000302 <__udivmoddi4+0xe2>
 8000236:	fab2 f382 	clz	r3, r2
 800023a:	b143      	cbz	r3, 800024e <__udivmoddi4+0x2e>
 800023c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000240:	f1c3 0220 	rsb	r2, r3, #32
 8000244:	409f      	lsls	r7, r3
 8000246:	fa20 f202 	lsr.w	r2, r0, r2
 800024a:	4317      	orrs	r7, r2
 800024c:	409c      	lsls	r4, r3
 800024e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000252:	fa1f f58c 	uxth.w	r5, ip
 8000256:	fbb7 f1fe 	udiv	r1, r7, lr
 800025a:	0c22      	lsrs	r2, r4, #16
 800025c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000260:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000264:	fb01 f005 	mul.w	r0, r1, r5
 8000268:	4290      	cmp	r0, r2
 800026a:	d90a      	bls.n	8000282 <__udivmoddi4+0x62>
 800026c:	eb1c 0202 	adds.w	r2, ip, r2
 8000270:	f101 37ff 	add.w	r7, r1, #4294967295
 8000274:	f080 811c 	bcs.w	80004b0 <__udivmoddi4+0x290>
 8000278:	4290      	cmp	r0, r2
 800027a:	f240 8119 	bls.w	80004b0 <__udivmoddi4+0x290>
 800027e:	3902      	subs	r1, #2
 8000280:	4462      	add	r2, ip
 8000282:	1a12      	subs	r2, r2, r0
 8000284:	b2a4      	uxth	r4, r4
 8000286:	fbb2 f0fe 	udiv	r0, r2, lr
 800028a:	fb0e 2210 	mls	r2, lr, r0, r2
 800028e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000292:	fb00 f505 	mul.w	r5, r0, r5
 8000296:	42a5      	cmp	r5, r4
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x90>
 800029a:	eb1c 0404 	adds.w	r4, ip, r4
 800029e:	f100 32ff 	add.w	r2, r0, #4294967295
 80002a2:	f080 8107 	bcs.w	80004b4 <__udivmoddi4+0x294>
 80002a6:	42a5      	cmp	r5, r4
 80002a8:	f240 8104 	bls.w	80004b4 <__udivmoddi4+0x294>
 80002ac:	4464      	add	r4, ip
 80002ae:	3802      	subs	r0, #2
 80002b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002b4:	1b64      	subs	r4, r4, r5
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11e      	cbz	r6, 80002c2 <__udivmoddi4+0xa2>
 80002ba:	40dc      	lsrs	r4, r3
 80002bc:	2300      	movs	r3, #0
 80002be:	e9c6 4300 	strd	r4, r3, [r6]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d908      	bls.n	80002dc <__udivmoddi4+0xbc>
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	f000 80ed 	beq.w	80004aa <__udivmoddi4+0x28a>
 80002d0:	2100      	movs	r1, #0
 80002d2:	e9c6 0500 	strd	r0, r5, [r6]
 80002d6:	4608      	mov	r0, r1
 80002d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002dc:	fab3 f183 	clz	r1, r3
 80002e0:	2900      	cmp	r1, #0
 80002e2:	d149      	bne.n	8000378 <__udivmoddi4+0x158>
 80002e4:	42ab      	cmp	r3, r5
 80002e6:	d302      	bcc.n	80002ee <__udivmoddi4+0xce>
 80002e8:	4282      	cmp	r2, r0
 80002ea:	f200 80f8 	bhi.w	80004de <__udivmoddi4+0x2be>
 80002ee:	1a84      	subs	r4, r0, r2
 80002f0:	eb65 0203 	sbc.w	r2, r5, r3
 80002f4:	2001      	movs	r0, #1
 80002f6:	4617      	mov	r7, r2
 80002f8:	2e00      	cmp	r6, #0
 80002fa:	d0e2      	beq.n	80002c2 <__udivmoddi4+0xa2>
 80002fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000300:	e7df      	b.n	80002c2 <__udivmoddi4+0xa2>
 8000302:	b902      	cbnz	r2, 8000306 <__udivmoddi4+0xe6>
 8000304:	deff      	udf	#255	; 0xff
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	2b00      	cmp	r3, #0
 800030c:	f040 8090 	bne.w	8000430 <__udivmoddi4+0x210>
 8000310:	1a8a      	subs	r2, r1, r2
 8000312:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000316:	fa1f fe8c 	uxth.w	lr, ip
 800031a:	2101      	movs	r1, #1
 800031c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000320:	fb07 2015 	mls	r0, r7, r5, r2
 8000324:	0c22      	lsrs	r2, r4, #16
 8000326:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800032a:	fb0e f005 	mul.w	r0, lr, r5
 800032e:	4290      	cmp	r0, r2
 8000330:	d908      	bls.n	8000344 <__udivmoddi4+0x124>
 8000332:	eb1c 0202 	adds.w	r2, ip, r2
 8000336:	f105 38ff 	add.w	r8, r5, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x122>
 800033c:	4290      	cmp	r0, r2
 800033e:	f200 80cb 	bhi.w	80004d8 <__udivmoddi4+0x2b8>
 8000342:	4645      	mov	r5, r8
 8000344:	1a12      	subs	r2, r2, r0
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb2 f0f7 	udiv	r0, r2, r7
 800034c:	fb07 2210 	mls	r2, r7, r0, r2
 8000350:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000354:	fb0e fe00 	mul.w	lr, lr, r0
 8000358:	45a6      	cmp	lr, r4
 800035a:	d908      	bls.n	800036e <__udivmoddi4+0x14e>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 32ff 	add.w	r2, r0, #4294967295
 8000364:	d202      	bcs.n	800036c <__udivmoddi4+0x14c>
 8000366:	45a6      	cmp	lr, r4
 8000368:	f200 80bb 	bhi.w	80004e2 <__udivmoddi4+0x2c2>
 800036c:	4610      	mov	r0, r2
 800036e:	eba4 040e 	sub.w	r4, r4, lr
 8000372:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000376:	e79f      	b.n	80002b8 <__udivmoddi4+0x98>
 8000378:	f1c1 0720 	rsb	r7, r1, #32
 800037c:	408b      	lsls	r3, r1
 800037e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000382:	ea4c 0c03 	orr.w	ip, ip, r3
 8000386:	fa05 f401 	lsl.w	r4, r5, r1
 800038a:	fa20 f307 	lsr.w	r3, r0, r7
 800038e:	40fd      	lsrs	r5, r7
 8000390:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000394:	4323      	orrs	r3, r4
 8000396:	fbb5 f8f9 	udiv	r8, r5, r9
 800039a:	fa1f fe8c 	uxth.w	lr, ip
 800039e:	fb09 5518 	mls	r5, r9, r8, r5
 80003a2:	0c1c      	lsrs	r4, r3, #16
 80003a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003a8:	fb08 f50e 	mul.w	r5, r8, lr
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	fa02 f201 	lsl.w	r2, r2, r1
 80003b2:	fa00 f001 	lsl.w	r0, r0, r1
 80003b6:	d90b      	bls.n	80003d0 <__udivmoddi4+0x1b0>
 80003b8:	eb1c 0404 	adds.w	r4, ip, r4
 80003bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c0:	f080 8088 	bcs.w	80004d4 <__udivmoddi4+0x2b4>
 80003c4:	42a5      	cmp	r5, r4
 80003c6:	f240 8085 	bls.w	80004d4 <__udivmoddi4+0x2b4>
 80003ca:	f1a8 0802 	sub.w	r8, r8, #2
 80003ce:	4464      	add	r4, ip
 80003d0:	1b64      	subs	r4, r4, r5
 80003d2:	b29d      	uxth	r5, r3
 80003d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003d8:	fb09 4413 	mls	r4, r9, r3, r4
 80003dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003e4:	45a6      	cmp	lr, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x1da>
 80003e8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ec:	f103 35ff 	add.w	r5, r3, #4294967295
 80003f0:	d26c      	bcs.n	80004cc <__udivmoddi4+0x2ac>
 80003f2:	45a6      	cmp	lr, r4
 80003f4:	d96a      	bls.n	80004cc <__udivmoddi4+0x2ac>
 80003f6:	3b02      	subs	r3, #2
 80003f8:	4464      	add	r4, ip
 80003fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000402:	eba4 040e 	sub.w	r4, r4, lr
 8000406:	42ac      	cmp	r4, r5
 8000408:	46c8      	mov	r8, r9
 800040a:	46ae      	mov	lr, r5
 800040c:	d356      	bcc.n	80004bc <__udivmoddi4+0x29c>
 800040e:	d053      	beq.n	80004b8 <__udivmoddi4+0x298>
 8000410:	b156      	cbz	r6, 8000428 <__udivmoddi4+0x208>
 8000412:	ebb0 0208 	subs.w	r2, r0, r8
 8000416:	eb64 040e 	sbc.w	r4, r4, lr
 800041a:	fa04 f707 	lsl.w	r7, r4, r7
 800041e:	40ca      	lsrs	r2, r1
 8000420:	40cc      	lsrs	r4, r1
 8000422:	4317      	orrs	r7, r2
 8000424:	e9c6 7400 	strd	r7, r4, [r6]
 8000428:	4618      	mov	r0, r3
 800042a:	2100      	movs	r1, #0
 800042c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000430:	f1c3 0120 	rsb	r1, r3, #32
 8000434:	fa02 fc03 	lsl.w	ip, r2, r3
 8000438:	fa20 f201 	lsr.w	r2, r0, r1
 800043c:	fa25 f101 	lsr.w	r1, r5, r1
 8000440:	409d      	lsls	r5, r3
 8000442:	432a      	orrs	r2, r5
 8000444:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000450:	fb07 1510 	mls	r5, r7, r0, r1
 8000454:	0c11      	lsrs	r1, r2, #16
 8000456:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800045a:	fb00 f50e 	mul.w	r5, r0, lr
 800045e:	428d      	cmp	r5, r1
 8000460:	fa04 f403 	lsl.w	r4, r4, r3
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x258>
 8000466:	eb1c 0101 	adds.w	r1, ip, r1
 800046a:	f100 38ff 	add.w	r8, r0, #4294967295
 800046e:	d22f      	bcs.n	80004d0 <__udivmoddi4+0x2b0>
 8000470:	428d      	cmp	r5, r1
 8000472:	d92d      	bls.n	80004d0 <__udivmoddi4+0x2b0>
 8000474:	3802      	subs	r0, #2
 8000476:	4461      	add	r1, ip
 8000478:	1b49      	subs	r1, r1, r5
 800047a:	b292      	uxth	r2, r2
 800047c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000480:	fb07 1115 	mls	r1, r7, r5, r1
 8000484:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000488:	fb05 f10e 	mul.w	r1, r5, lr
 800048c:	4291      	cmp	r1, r2
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x282>
 8000490:	eb1c 0202 	adds.w	r2, ip, r2
 8000494:	f105 38ff 	add.w	r8, r5, #4294967295
 8000498:	d216      	bcs.n	80004c8 <__udivmoddi4+0x2a8>
 800049a:	4291      	cmp	r1, r2
 800049c:	d914      	bls.n	80004c8 <__udivmoddi4+0x2a8>
 800049e:	3d02      	subs	r5, #2
 80004a0:	4462      	add	r2, ip
 80004a2:	1a52      	subs	r2, r2, r1
 80004a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004a8:	e738      	b.n	800031c <__udivmoddi4+0xfc>
 80004aa:	4631      	mov	r1, r6
 80004ac:	4630      	mov	r0, r6
 80004ae:	e708      	b.n	80002c2 <__udivmoddi4+0xa2>
 80004b0:	4639      	mov	r1, r7
 80004b2:	e6e6      	b.n	8000282 <__udivmoddi4+0x62>
 80004b4:	4610      	mov	r0, r2
 80004b6:	e6fb      	b.n	80002b0 <__udivmoddi4+0x90>
 80004b8:	4548      	cmp	r0, r9
 80004ba:	d2a9      	bcs.n	8000410 <__udivmoddi4+0x1f0>
 80004bc:	ebb9 0802 	subs.w	r8, r9, r2
 80004c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004c4:	3b01      	subs	r3, #1
 80004c6:	e7a3      	b.n	8000410 <__udivmoddi4+0x1f0>
 80004c8:	4645      	mov	r5, r8
 80004ca:	e7ea      	b.n	80004a2 <__udivmoddi4+0x282>
 80004cc:	462b      	mov	r3, r5
 80004ce:	e794      	b.n	80003fa <__udivmoddi4+0x1da>
 80004d0:	4640      	mov	r0, r8
 80004d2:	e7d1      	b.n	8000478 <__udivmoddi4+0x258>
 80004d4:	46d0      	mov	r8, sl
 80004d6:	e77b      	b.n	80003d0 <__udivmoddi4+0x1b0>
 80004d8:	3d02      	subs	r5, #2
 80004da:	4462      	add	r2, ip
 80004dc:	e732      	b.n	8000344 <__udivmoddi4+0x124>
 80004de:	4608      	mov	r0, r1
 80004e0:	e70a      	b.n	80002f8 <__udivmoddi4+0xd8>
 80004e2:	4464      	add	r4, ip
 80004e4:	3802      	subs	r0, #2
 80004e6:	e742      	b.n	800036e <__udivmoddi4+0x14e>

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 80004ec:	b480      	push	{r7}
 80004ee:	b083      	sub	sp, #12
 80004f0:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80004f2:	4b25      	ldr	r3, [pc, #148]	; (8000588 <_DoInit+0x9c>)
 80004f4:	603b      	str	r3, [r7, #0]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80004f6:	683b      	ldr	r3, [r7, #0]
 80004f8:	2203      	movs	r2, #3
 80004fa:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80004fc:	683b      	ldr	r3, [r7, #0]
 80004fe:	2203      	movs	r2, #3
 8000500:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8000502:	683b      	ldr	r3, [r7, #0]
 8000504:	4a21      	ldr	r2, [pc, #132]	; (800058c <_DoInit+0xa0>)
 8000506:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8000508:	683b      	ldr	r3, [r7, #0]
 800050a:	4a21      	ldr	r2, [pc, #132]	; (8000590 <_DoInit+0xa4>)
 800050c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800050e:	683b      	ldr	r3, [r7, #0]
 8000510:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000514:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8000516:	683b      	ldr	r3, [r7, #0]
 8000518:	2200      	movs	r2, #0
 800051a:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800051c:	683b      	ldr	r3, [r7, #0]
 800051e:	2200      	movs	r2, #0
 8000520:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8000522:	683b      	ldr	r3, [r7, #0]
 8000524:	2200      	movs	r2, #0
 8000526:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8000528:	683b      	ldr	r3, [r7, #0]
 800052a:	4a18      	ldr	r2, [pc, #96]	; (800058c <_DoInit+0xa0>)
 800052c:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800052e:	683b      	ldr	r3, [r7, #0]
 8000530:	4a18      	ldr	r2, [pc, #96]	; (8000594 <_DoInit+0xa8>)
 8000532:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8000534:	683b      	ldr	r3, [r7, #0]
 8000536:	2210      	movs	r2, #16
 8000538:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800053a:	683b      	ldr	r3, [r7, #0]
 800053c:	2200      	movs	r2, #0
 800053e:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8000540:	683b      	ldr	r3, [r7, #0]
 8000542:	2200      	movs	r2, #0
 8000544:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8000546:	683b      	ldr	r3, [r7, #0]
 8000548:	2200      	movs	r2, #0
 800054a:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 800054c:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8000550:	2300      	movs	r3, #0
 8000552:	607b      	str	r3, [r7, #4]
 8000554:	e00c      	b.n	8000570 <_DoInit+0x84>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	f1c3 030f 	rsb	r3, r3, #15
 800055c:	4a0e      	ldr	r2, [pc, #56]	; (8000598 <_DoInit+0xac>)
 800055e:	5cd1      	ldrb	r1, [r2, r3]
 8000560:	683a      	ldr	r2, [r7, #0]
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	4413      	add	r3, r2
 8000566:	460a      	mov	r2, r1
 8000568:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	3301      	adds	r3, #1
 800056e:	607b      	str	r3, [r7, #4]
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	2b0f      	cmp	r3, #15
 8000574:	d9ef      	bls.n	8000556 <_DoInit+0x6a>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8000576:	f3bf 8f5f 	dmb	sy
}
 800057a:	bf00      	nop
 800057c:	370c      	adds	r7, #12
 800057e:	46bd      	mov	sp, r7
 8000580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop
 8000588:	2000007c 	.word	0x2000007c
 800058c:	08007008 	.word	0x08007008
 8000590:	20000124 	.word	0x20000124
 8000594:	20000524 	.word	0x20000524
 8000598:	08007074 	.word	0x08007074

0800059c <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 800059c:	b580      	push	{r7, lr}
 800059e:	b08a      	sub	sp, #40	; 0x28
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	60f8      	str	r0, [r7, #12]
 80005a4:	60b9      	str	r1, [r7, #8]
 80005a6:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 80005a8:	2300      	movs	r3, #0
 80005aa:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 80005ac:	68fb      	ldr	r3, [r7, #12]
 80005ae:	68db      	ldr	r3, [r3, #12]
 80005b0:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	691b      	ldr	r3, [r3, #16]
 80005b6:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 80005b8:	69ba      	ldr	r2, [r7, #24]
 80005ba:	69fb      	ldr	r3, [r7, #28]
 80005bc:	429a      	cmp	r2, r3
 80005be:	d905      	bls.n	80005cc <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 80005c0:	69ba      	ldr	r2, [r7, #24]
 80005c2:	69fb      	ldr	r3, [r7, #28]
 80005c4:	1ad3      	subs	r3, r2, r3
 80005c6:	3b01      	subs	r3, #1
 80005c8:	627b      	str	r3, [r7, #36]	; 0x24
 80005ca:	e007      	b.n	80005dc <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	689a      	ldr	r2, [r3, #8]
 80005d0:	69b9      	ldr	r1, [r7, #24]
 80005d2:	69fb      	ldr	r3, [r7, #28]
 80005d4:	1acb      	subs	r3, r1, r3
 80005d6:	4413      	add	r3, r2
 80005d8:	3b01      	subs	r3, #1
 80005da:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	689a      	ldr	r2, [r3, #8]
 80005e0:	69fb      	ldr	r3, [r7, #28]
 80005e2:	1ad3      	subs	r3, r2, r3
 80005e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80005e6:	4293      	cmp	r3, r2
 80005e8:	bf28      	it	cs
 80005ea:	4613      	movcs	r3, r2
 80005ec:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 80005ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	4293      	cmp	r3, r2
 80005f4:	bf28      	it	cs
 80005f6:	4613      	movcs	r3, r2
 80005f8:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	685a      	ldr	r2, [r3, #4]
 80005fe:	69fb      	ldr	r3, [r7, #28]
 8000600:	4413      	add	r3, r2
 8000602:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8000604:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000606:	68b9      	ldr	r1, [r7, #8]
 8000608:	6978      	ldr	r0, [r7, #20]
 800060a:	f006 fc8b 	bl	8006f24 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 800060e:	6a3a      	ldr	r2, [r7, #32]
 8000610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000612:	4413      	add	r3, r2
 8000614:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8000616:	68ba      	ldr	r2, [r7, #8]
 8000618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800061a:	4413      	add	r3, r2
 800061c:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 800061e:	687a      	ldr	r2, [r7, #4]
 8000620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000622:	1ad3      	subs	r3, r2, r3
 8000624:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8000626:	69fa      	ldr	r2, [r7, #28]
 8000628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800062a:	4413      	add	r3, r2
 800062c:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	689b      	ldr	r3, [r3, #8]
 8000632:	69fa      	ldr	r2, [r7, #28]
 8000634:	429a      	cmp	r2, r3
 8000636:	d101      	bne.n	800063c <_WriteBlocking+0xa0>
      WrOff = 0u;
 8000638:	2300      	movs	r3, #0
 800063a:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800063c:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	69fa      	ldr	r2, [r7, #28]
 8000644:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	2b00      	cmp	r3, #0
 800064a:	d1b2      	bne.n	80005b2 <_WriteBlocking+0x16>
  return NumBytesWritten;
 800064c:	6a3b      	ldr	r3, [r7, #32]
}
 800064e:	4618      	mov	r0, r3
 8000650:	3728      	adds	r7, #40	; 0x28
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}

08000656 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8000656:	b580      	push	{r7, lr}
 8000658:	b088      	sub	sp, #32
 800065a:	af00      	add	r7, sp, #0
 800065c:	60f8      	str	r0, [r7, #12]
 800065e:	60b9      	str	r1, [r7, #8]
 8000660:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8000662:	68fb      	ldr	r3, [r7, #12]
 8000664:	68db      	ldr	r3, [r3, #12]
 8000666:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8000668:	68fb      	ldr	r3, [r7, #12]
 800066a:	689a      	ldr	r2, [r3, #8]
 800066c:	69fb      	ldr	r3, [r7, #28]
 800066e:	1ad3      	subs	r3, r2, r3
 8000670:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8000672:	69ba      	ldr	r2, [r7, #24]
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	429a      	cmp	r2, r3
 8000678:	d911      	bls.n	800069e <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800067a:	68fb      	ldr	r3, [r7, #12]
 800067c:	685a      	ldr	r2, [r3, #4]
 800067e:	69fb      	ldr	r3, [r7, #28]
 8000680:	4413      	add	r3, r2
 8000682:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8000684:	687a      	ldr	r2, [r7, #4]
 8000686:	68b9      	ldr	r1, [r7, #8]
 8000688:	6938      	ldr	r0, [r7, #16]
 800068a:	f006 fc4b 	bl	8006f24 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800068e:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8000692:	69fa      	ldr	r2, [r7, #28]
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	441a      	add	r2, r3
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 800069c:	e01f      	b.n	80006de <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 800069e:	69bb      	ldr	r3, [r7, #24]
 80006a0:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	685a      	ldr	r2, [r3, #4]
 80006a6:	69fb      	ldr	r3, [r7, #28]
 80006a8:	4413      	add	r3, r2
 80006aa:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 80006ac:	697a      	ldr	r2, [r7, #20]
 80006ae:	68b9      	ldr	r1, [r7, #8]
 80006b0:	6938      	ldr	r0, [r7, #16]
 80006b2:	f006 fc37 	bl	8006f24 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 80006b6:	687a      	ldr	r2, [r7, #4]
 80006b8:	69bb      	ldr	r3, [r7, #24]
 80006ba:	1ad3      	subs	r3, r2, r3
 80006bc:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	685b      	ldr	r3, [r3, #4]
 80006c2:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 80006c4:	68ba      	ldr	r2, [r7, #8]
 80006c6:	69bb      	ldr	r3, [r7, #24]
 80006c8:	4413      	add	r3, r2
 80006ca:	697a      	ldr	r2, [r7, #20]
 80006cc:	4619      	mov	r1, r3
 80006ce:	6938      	ldr	r0, [r7, #16]
 80006d0:	f006 fc28 	bl	8006f24 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80006d4:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	697a      	ldr	r2, [r7, #20]
 80006dc:	60da      	str	r2, [r3, #12]
}
 80006de:	bf00      	nop
 80006e0:	3720      	adds	r7, #32
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}

080006e6 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 80006e6:	b480      	push	{r7}
 80006e8:	b087      	sub	sp, #28
 80006ea:	af00      	add	r7, sp, #0
 80006ec:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	691b      	ldr	r3, [r3, #16]
 80006f2:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	68db      	ldr	r3, [r3, #12]
 80006f8:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 80006fa:	693a      	ldr	r2, [r7, #16]
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	429a      	cmp	r2, r3
 8000700:	d808      	bhi.n	8000714 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	689a      	ldr	r2, [r3, #8]
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	1ad2      	subs	r2, r2, r3
 800070a:	693b      	ldr	r3, [r7, #16]
 800070c:	4413      	add	r3, r2
 800070e:	3b01      	subs	r3, #1
 8000710:	617b      	str	r3, [r7, #20]
 8000712:	e004      	b.n	800071e <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8000714:	693a      	ldr	r2, [r7, #16]
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	1ad3      	subs	r3, r2, r3
 800071a:	3b01      	subs	r3, #1
 800071c:	617b      	str	r3, [r7, #20]
  }
  return r;
 800071e:	697b      	ldr	r3, [r7, #20]
}
 8000720:	4618      	mov	r0, r3
 8000722:	371c      	adds	r7, #28
 8000724:	46bd      	mov	sp, r7
 8000726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072a:	4770      	bx	lr

0800072c <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800072c:	b580      	push	{r7, lr}
 800072e:	b088      	sub	sp, #32
 8000730:	af00      	add	r7, sp, #0
 8000732:	60f8      	str	r0, [r7, #12]
 8000734:	60b9      	str	r1, [r7, #8]
 8000736:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 8000738:	68bb      	ldr	r3, [r7, #8]
 800073a:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	1c5a      	adds	r2, r3, #1
 8000740:	4613      	mov	r3, r2
 8000742:	005b      	lsls	r3, r3, #1
 8000744:	4413      	add	r3, r2
 8000746:	00db      	lsls	r3, r3, #3
 8000748:	4a1f      	ldr	r2, [pc, #124]	; (80007c8 <SEGGER_RTT_WriteNoLock+0x9c>)
 800074a:	4413      	add	r3, r2
 800074c:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 800074e:	697b      	ldr	r3, [r7, #20]
 8000750:	695b      	ldr	r3, [r3, #20]
 8000752:	2b02      	cmp	r3, #2
 8000754:	d029      	beq.n	80007aa <SEGGER_RTT_WriteNoLock+0x7e>
 8000756:	2b02      	cmp	r3, #2
 8000758:	d82e      	bhi.n	80007b8 <SEGGER_RTT_WriteNoLock+0x8c>
 800075a:	2b00      	cmp	r3, #0
 800075c:	d002      	beq.n	8000764 <SEGGER_RTT_WriteNoLock+0x38>
 800075e:	2b01      	cmp	r3, #1
 8000760:	d013      	beq.n	800078a <SEGGER_RTT_WriteNoLock+0x5e>
 8000762:	e029      	b.n	80007b8 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8000764:	6978      	ldr	r0, [r7, #20]
 8000766:	f7ff ffbe 	bl	80006e6 <_GetAvailWriteSpace>
 800076a:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 800076c:	693a      	ldr	r2, [r7, #16]
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	429a      	cmp	r2, r3
 8000772:	d202      	bcs.n	800077a <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 8000774:	2300      	movs	r3, #0
 8000776:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8000778:	e021      	b.n	80007be <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 800077e:	687a      	ldr	r2, [r7, #4]
 8000780:	69b9      	ldr	r1, [r7, #24]
 8000782:	6978      	ldr	r0, [r7, #20]
 8000784:	f7ff ff67 	bl	8000656 <_WriteNoCheck>
    break;
 8000788:	e019      	b.n	80007be <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800078a:	6978      	ldr	r0, [r7, #20]
 800078c:	f7ff ffab 	bl	80006e6 <_GetAvailWriteSpace>
 8000790:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8000792:	687a      	ldr	r2, [r7, #4]
 8000794:	693b      	ldr	r3, [r7, #16]
 8000796:	4293      	cmp	r3, r2
 8000798:	bf28      	it	cs
 800079a:	4613      	movcs	r3, r2
 800079c:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 800079e:	69fa      	ldr	r2, [r7, #28]
 80007a0:	69b9      	ldr	r1, [r7, #24]
 80007a2:	6978      	ldr	r0, [r7, #20]
 80007a4:	f7ff ff57 	bl	8000656 <_WriteNoCheck>
    break;
 80007a8:	e009      	b.n	80007be <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 80007aa:	687a      	ldr	r2, [r7, #4]
 80007ac:	69b9      	ldr	r1, [r7, #24]
 80007ae:	6978      	ldr	r0, [r7, #20]
 80007b0:	f7ff fef4 	bl	800059c <_WriteBlocking>
 80007b4:	61f8      	str	r0, [r7, #28]
    break;
 80007b6:	e002      	b.n	80007be <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 80007b8:	2300      	movs	r3, #0
 80007ba:	61fb      	str	r3, [r7, #28]
    break;
 80007bc:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 80007be:	69fb      	ldr	r3, [r7, #28]
}
 80007c0:	4618      	mov	r0, r3
 80007c2:	3720      	adds	r7, #32
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	2000007c 	.word	0x2000007c

080007cc <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b088      	sub	sp, #32
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	60f8      	str	r0, [r7, #12]
 80007d4:	60b9      	str	r1, [r7, #8]
 80007d6:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 80007d8:	4b0e      	ldr	r3, [pc, #56]	; (8000814 <SEGGER_RTT_Write+0x48>)
 80007da:	61fb      	str	r3, [r7, #28]
 80007dc:	69fb      	ldr	r3, [r7, #28]
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	b2db      	uxtb	r3, r3
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d101      	bne.n	80007ea <SEGGER_RTT_Write+0x1e>
 80007e6:	f7ff fe81 	bl	80004ec <_DoInit>
  SEGGER_RTT_LOCK();
 80007ea:	f3ef 8311 	mrs	r3, BASEPRI
 80007ee:	f04f 0120 	mov.w	r1, #32
 80007f2:	f381 8811 	msr	BASEPRI, r1
 80007f6:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 80007f8:	687a      	ldr	r2, [r7, #4]
 80007fa:	68b9      	ldr	r1, [r7, #8]
 80007fc:	68f8      	ldr	r0, [r7, #12]
 80007fe:	f7ff ff95 	bl	800072c <SEGGER_RTT_WriteNoLock>
 8000802:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8000804:	69bb      	ldr	r3, [r7, #24]
 8000806:	f383 8811 	msr	BASEPRI, r3
  return Status;
 800080a:	697b      	ldr	r3, [r7, #20]
}
 800080c:	4618      	mov	r0, r3
 800080e:	3720      	adds	r7, #32
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	2000007c 	.word	0x2000007c

08000818 <SEGGER_RTT_ConfigUpBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigUpBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8000818:	b580      	push	{r7, lr}
 800081a:	b08a      	sub	sp, #40	; 0x28
 800081c:	af00      	add	r7, sp, #0
 800081e:	60f8      	str	r0, [r7, #12]
 8000820:	60b9      	str	r1, [r7, #8]
 8000822:	607a      	str	r2, [r7, #4]
 8000824:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_UP* pUp;

  INIT();
 8000826:	4b20      	ldr	r3, [pc, #128]	; (80008a8 <SEGGER_RTT_ConfigUpBuffer+0x90>)
 8000828:	623b      	str	r3, [r7, #32]
 800082a:	6a3b      	ldr	r3, [r7, #32]
 800082c:	781b      	ldrb	r3, [r3, #0]
 800082e:	b2db      	uxtb	r3, r3
 8000830:	2b00      	cmp	r3, #0
 8000832:	d101      	bne.n	8000838 <SEGGER_RTT_ConfigUpBuffer+0x20>
 8000834:	f7ff fe5a 	bl	80004ec <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8000838:	4b1b      	ldr	r3, [pc, #108]	; (80008a8 <SEGGER_RTT_ConfigUpBuffer+0x90>)
 800083a:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_UP_BUFFERS) {
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	2b02      	cmp	r3, #2
 8000840:	d82a      	bhi.n	8000898 <SEGGER_RTT_ConfigUpBuffer+0x80>
    SEGGER_RTT_LOCK();
 8000842:	f3ef 8311 	mrs	r3, BASEPRI
 8000846:	f04f 0120 	mov.w	r1, #32
 800084a:	f381 8811 	msr	BASEPRI, r1
 800084e:	61bb      	str	r3, [r7, #24]
    pUp = &pRTTCB->aUp[BufferIndex];
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	1c5a      	adds	r2, r3, #1
 8000854:	4613      	mov	r3, r2
 8000856:	005b      	lsls	r3, r3, #1
 8000858:	4413      	add	r3, r2
 800085a:	00db      	lsls	r3, r3, #3
 800085c:	69fa      	ldr	r2, [r7, #28]
 800085e:	4413      	add	r3, r2
 8000860:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8000862:	68fb      	ldr	r3, [r7, #12]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d00e      	beq.n	8000886 <SEGGER_RTT_ConfigUpBuffer+0x6e>
      pUp->sName        = sName;
 8000868:	697b      	ldr	r3, [r7, #20]
 800086a:	68ba      	ldr	r2, [r7, #8]
 800086c:	601a      	str	r2, [r3, #0]
      pUp->pBuffer      = (char*)pBuffer;
 800086e:	697b      	ldr	r3, [r7, #20]
 8000870:	687a      	ldr	r2, [r7, #4]
 8000872:	605a      	str	r2, [r3, #4]
      pUp->SizeOfBuffer = BufferSize;
 8000874:	697b      	ldr	r3, [r7, #20]
 8000876:	683a      	ldr	r2, [r7, #0]
 8000878:	609a      	str	r2, [r3, #8]
      pUp->RdOff        = 0u;
 800087a:	697b      	ldr	r3, [r7, #20]
 800087c:	2200      	movs	r2, #0
 800087e:	611a      	str	r2, [r3, #16]
      pUp->WrOff        = 0u;
 8000880:	697b      	ldr	r3, [r7, #20]
 8000882:	2200      	movs	r2, #0
 8000884:	60da      	str	r2, [r3, #12]
    }
    pUp->Flags          = Flags;
 8000886:	697b      	ldr	r3, [r7, #20]
 8000888:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800088a:	615a      	str	r2, [r3, #20]
    SEGGER_RTT_UNLOCK();
 800088c:	69bb      	ldr	r3, [r7, #24]
 800088e:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8000892:	2300      	movs	r3, #0
 8000894:	627b      	str	r3, [r7, #36]	; 0x24
 8000896:	e002      	b.n	800089e <SEGGER_RTT_ConfigUpBuffer+0x86>
  } else {
    r = -1;
 8000898:	f04f 33ff 	mov.w	r3, #4294967295
 800089c:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 800089e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80008a0:	4618      	mov	r0, r3
 80008a2:	3728      	adds	r7, #40	; 0x28
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	2000007c 	.word	0x2000007c

080008ac <_StoreChar>:
*/
/*********************************************************************
*
*       _StoreChar
*/
static void _StoreChar(SEGGER_RTT_PRINTF_DESC * p, char c) {
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b084      	sub	sp, #16
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
 80008b4:	460b      	mov	r3, r1
 80008b6:	70fb      	strb	r3, [r7, #3]
  unsigned Cnt;

  Cnt = p->Cnt;
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	689b      	ldr	r3, [r3, #8]
 80008bc:	60fb      	str	r3, [r7, #12]
  if ((Cnt + 1u) <= p->BufferSize) {
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	1c5a      	adds	r2, r3, #1
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	685b      	ldr	r3, [r3, #4]
 80008c6:	429a      	cmp	r2, r3
 80008c8:	d80e      	bhi.n	80008e8 <_StoreChar+0x3c>
    *(p->pBuffer + Cnt) = c;
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	681a      	ldr	r2, [r3, #0]
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	4413      	add	r3, r2
 80008d2:	78fa      	ldrb	r2, [r7, #3]
 80008d4:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	1c5a      	adds	r2, r3, #1
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	609a      	str	r2, [r3, #8]
    p->ReturnValue++;
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	68db      	ldr	r3, [r3, #12]
 80008e2:	1c5a      	adds	r2, r3, #1
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	60da      	str	r2, [r3, #12]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == p->BufferSize) {
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	689a      	ldr	r2, [r3, #8]
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	685b      	ldr	r3, [r3, #4]
 80008f0:	429a      	cmp	r2, r3
 80008f2:	d115      	bne.n	8000920 <_StoreChar+0x74>
    if (SEGGER_RTT_Write(p->RTTBufferIndex, p->pBuffer, p->Cnt) != p->Cnt) {
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	6918      	ldr	r0, [r3, #16]
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	6819      	ldr	r1, [r3, #0]
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	689b      	ldr	r3, [r3, #8]
 8000900:	461a      	mov	r2, r3
 8000902:	f7ff ff63 	bl	80007cc <SEGGER_RTT_Write>
 8000906:	4602      	mov	r2, r0
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	689b      	ldr	r3, [r3, #8]
 800090c:	429a      	cmp	r2, r3
 800090e:	d004      	beq.n	800091a <_StoreChar+0x6e>
      p->ReturnValue = -1;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	f04f 32ff 	mov.w	r2, #4294967295
 8000916:	60da      	str	r2, [r3, #12]
    } else {
      p->Cnt = 0u;
    }
  }
}
 8000918:	e002      	b.n	8000920 <_StoreChar+0x74>
      p->Cnt = 0u;
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	2200      	movs	r2, #0
 800091e:	609a      	str	r2, [r3, #8]
}
 8000920:	bf00      	nop
 8000922:	3710      	adds	r7, #16
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}

08000928 <_PrintUnsigned>:

/*********************************************************************
*
*       _PrintUnsigned
*/
static void _PrintUnsigned(SEGGER_RTT_PRINTF_DESC * pBufferDesc, unsigned v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
 8000928:	b580      	push	{r7, lr}
 800092a:	b08a      	sub	sp, #40	; 0x28
 800092c:	af00      	add	r7, sp, #0
 800092e:	60f8      	str	r0, [r7, #12]
 8000930:	60b9      	str	r1, [r7, #8]
 8000932:	607a      	str	r2, [r7, #4]
 8000934:	603b      	str	r3, [r7, #0]
  unsigned Digit;
  unsigned Number;
  unsigned Width;
  char c;

  Number = v;
 8000936:	68bb      	ldr	r3, [r7, #8]
 8000938:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 800093a:	2301      	movs	r3, #1
 800093c:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 800093e:	2301      	movs	r3, #1
 8000940:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8000942:	e007      	b.n	8000954 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8000944:	6a3a      	ldr	r2, [r7, #32]
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	fbb2 f3f3 	udiv	r3, r2, r3
 800094c:	623b      	str	r3, [r7, #32]
    Width++;
 800094e:	69fb      	ldr	r3, [r7, #28]
 8000950:	3301      	adds	r3, #1
 8000952:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8000954:	6a3a      	ldr	r2, [r7, #32]
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	429a      	cmp	r2, r3
 800095a:	d2f3      	bcs.n	8000944 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 800095c:	683a      	ldr	r2, [r7, #0]
 800095e:	69fb      	ldr	r3, [r7, #28]
 8000960:	429a      	cmp	r2, r3
 8000962:	d901      	bls.n	8000968 <_PrintUnsigned+0x40>
    Width = NumDigits;
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8000968:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800096a:	f003 0301 	and.w	r3, r3, #1
 800096e:	2b00      	cmp	r3, #0
 8000970:	d125      	bne.n	80009be <_PrintUnsigned+0x96>
    if (FieldWidth != 0u) {
 8000972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000974:	2b00      	cmp	r3, #0
 8000976:	d022      	beq.n	80009be <_PrintUnsigned+0x96>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8000978:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800097a:	f003 0302 	and.w	r3, r3, #2
 800097e:	2b00      	cmp	r3, #0
 8000980:	d005      	beq.n	800098e <_PrintUnsigned+0x66>
 8000982:	683b      	ldr	r3, [r7, #0]
 8000984:	2b00      	cmp	r3, #0
 8000986:	d102      	bne.n	800098e <_PrintUnsigned+0x66>
        c = '0';
 8000988:	2330      	movs	r3, #48	; 0x30
 800098a:	76fb      	strb	r3, [r7, #27]
 800098c:	e001      	b.n	8000992 <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 800098e:	2320      	movs	r3, #32
 8000990:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8000992:	e00b      	b.n	80009ac <_PrintUnsigned+0x84>
        FieldWidth--;
 8000994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000996:	3b01      	subs	r3, #1
 8000998:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 800099a:	7efb      	ldrb	r3, [r7, #27]
 800099c:	4619      	mov	r1, r3
 800099e:	68f8      	ldr	r0, [r7, #12]
 80009a0:	f7ff ff84 	bl	80008ac <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	68db      	ldr	r3, [r3, #12]
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	db07      	blt.n	80009bc <_PrintUnsigned+0x94>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80009ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d005      	beq.n	80009be <_PrintUnsigned+0x96>
 80009b2:	69fa      	ldr	r2, [r7, #28]
 80009b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009b6:	429a      	cmp	r2, r3
 80009b8:	d3ec      	bcc.n	8000994 <_PrintUnsigned+0x6c>
 80009ba:	e000      	b.n	80009be <_PrintUnsigned+0x96>
          break;
 80009bc:	bf00      	nop
        }
      }
    }
  }
  if (pBufferDesc->ReturnValue >= 0) {
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	68db      	ldr	r3, [r3, #12]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	db55      	blt.n	8000a72 <_PrintUnsigned+0x14a>
    // Compute Digit.
    // Loop until Digit has the value of the highest digit required.
    // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
    //
    while (1) {
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80009c6:	683b      	ldr	r3, [r7, #0]
 80009c8:	2b01      	cmp	r3, #1
 80009ca:	d903      	bls.n	80009d4 <_PrintUnsigned+0xac>
        NumDigits--;
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	3b01      	subs	r3, #1
 80009d0:	603b      	str	r3, [r7, #0]
 80009d2:	e009      	b.n	80009e8 <_PrintUnsigned+0xc0>
      } else {
        Div = v / Digit;
 80009d4:	68ba      	ldr	r2, [r7, #8]
 80009d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80009dc:	617b      	str	r3, [r7, #20]
        if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 80009de:	697a      	ldr	r2, [r7, #20]
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	429a      	cmp	r2, r3
 80009e4:	d200      	bcs.n	80009e8 <_PrintUnsigned+0xc0>
          break;
 80009e6:	e005      	b.n	80009f4 <_PrintUnsigned+0xcc>
        }
      }
      Digit *= Base;
 80009e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009ea:	687a      	ldr	r2, [r7, #4]
 80009ec:	fb02 f303 	mul.w	r3, r2, r3
 80009f0:	627b      	str	r3, [r7, #36]	; 0x24
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80009f2:	e7e8      	b.n	80009c6 <_PrintUnsigned+0x9e>
    }
    //
    // Output digits
    //
    do {
      Div = v / Digit;
 80009f4:	68ba      	ldr	r2, [r7, #8]
 80009f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80009fc:	617b      	str	r3, [r7, #20]
      v -= Div * Digit;
 80009fe:	697b      	ldr	r3, [r7, #20]
 8000a00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a02:	fb02 f303 	mul.w	r3, r2, r3
 8000a06:	68ba      	ldr	r2, [r7, #8]
 8000a08:	1ad3      	subs	r3, r2, r3
 8000a0a:	60bb      	str	r3, [r7, #8]
      _StoreChar(pBufferDesc, _aV2C[Div]);
 8000a0c:	4a1b      	ldr	r2, [pc, #108]	; (8000a7c <_PrintUnsigned+0x154>)
 8000a0e:	697b      	ldr	r3, [r7, #20]
 8000a10:	4413      	add	r3, r2
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	4619      	mov	r1, r3
 8000a16:	68f8      	ldr	r0, [r7, #12]
 8000a18:	f7ff ff48 	bl	80008ac <_StoreChar>
      if (pBufferDesc->ReturnValue < 0) {
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	68db      	ldr	r3, [r3, #12]
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	db08      	blt.n	8000a36 <_PrintUnsigned+0x10e>
        break;
      }
      Digit /= Base;
 8000a24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a2c:	627b      	str	r3, [r7, #36]	; 0x24
    } while (Digit);
 8000a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d1df      	bne.n	80009f4 <_PrintUnsigned+0xcc>
 8000a34:	e000      	b.n	8000a38 <_PrintUnsigned+0x110>
        break;
 8000a36:	bf00      	nop
    //
    // Print trailing spaces if necessary
    //
    if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8000a38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a3a:	f003 0301 	and.w	r3, r3, #1
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d017      	beq.n	8000a72 <_PrintUnsigned+0x14a>
      if (FieldWidth != 0u) {
 8000a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d014      	beq.n	8000a72 <_PrintUnsigned+0x14a>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8000a48:	e00a      	b.n	8000a60 <_PrintUnsigned+0x138>
          FieldWidth--;
 8000a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a4c:	3b01      	subs	r3, #1
 8000a4e:	633b      	str	r3, [r7, #48]	; 0x30
          _StoreChar(pBufferDesc, ' ');
 8000a50:	2120      	movs	r1, #32
 8000a52:	68f8      	ldr	r0, [r7, #12]
 8000a54:	f7ff ff2a 	bl	80008ac <_StoreChar>
          if (pBufferDesc->ReturnValue < 0) {
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	68db      	ldr	r3, [r3, #12]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	db07      	blt.n	8000a70 <_PrintUnsigned+0x148>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8000a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d005      	beq.n	8000a72 <_PrintUnsigned+0x14a>
 8000a66:	69fa      	ldr	r2, [r7, #28]
 8000a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a6a:	429a      	cmp	r2, r3
 8000a6c:	d3ed      	bcc.n	8000a4a <_PrintUnsigned+0x122>
          }
        }
      }
    }
  }
}
 8000a6e:	e000      	b.n	8000a72 <_PrintUnsigned+0x14a>
            break;
 8000a70:	bf00      	nop
}
 8000a72:	bf00      	nop
 8000a74:	3728      	adds	r7, #40	; 0x28
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	08007088 	.word	0x08007088

08000a80 <_PrintInt>:

/*********************************************************************
*
*       _PrintInt
*/
static void _PrintInt(SEGGER_RTT_PRINTF_DESC * pBufferDesc, int v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b088      	sub	sp, #32
 8000a84:	af02      	add	r7, sp, #8
 8000a86:	60f8      	str	r0, [r7, #12]
 8000a88:	60b9      	str	r1, [r7, #8]
 8000a8a:	607a      	str	r2, [r7, #4]
 8000a8c:	603b      	str	r3, [r7, #0]
  unsigned Width;
  int Number;

  Number = (v < 0) ? -v : v;
 8000a8e:	68bb      	ldr	r3, [r7, #8]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	bfb8      	it	lt
 8000a94:	425b      	neglt	r3, r3
 8000a96:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8000a98:	2301      	movs	r3, #1
 8000a9a:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8000a9c:	e007      	b.n	8000aae <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	693a      	ldr	r2, [r7, #16]
 8000aa2:	fb92 f3f3 	sdiv	r3, r2, r3
 8000aa6:	613b      	str	r3, [r7, #16]
    Width++;
 8000aa8:	697b      	ldr	r3, [r7, #20]
 8000aaa:	3301      	adds	r3, #1
 8000aac:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	693a      	ldr	r2, [r7, #16]
 8000ab2:	429a      	cmp	r2, r3
 8000ab4:	daf3      	bge.n	8000a9e <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8000ab6:	683a      	ldr	r2, [r7, #0]
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	429a      	cmp	r2, r3
 8000abc:	d901      	bls.n	8000ac2 <_PrintInt+0x42>
    Width = NumDigits;
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8000ac2:	6a3b      	ldr	r3, [r7, #32]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d00a      	beq.n	8000ade <_PrintInt+0x5e>
 8000ac8:	68bb      	ldr	r3, [r7, #8]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	db04      	blt.n	8000ad8 <_PrintInt+0x58>
 8000ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ad0:	f003 0304 	and.w	r3, r3, #4
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d002      	beq.n	8000ade <_PrintInt+0x5e>
    FieldWidth--;
 8000ad8:	6a3b      	ldr	r3, [r7, #32]
 8000ada:	3b01      	subs	r3, #1
 8000adc:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8000ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ae0:	f003 0302 	and.w	r3, r3, #2
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d002      	beq.n	8000aee <_PrintInt+0x6e>
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d01c      	beq.n	8000b28 <_PrintInt+0xa8>
 8000aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000af0:	f003 0301 	and.w	r3, r3, #1
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d117      	bne.n	8000b28 <_PrintInt+0xa8>
    if (FieldWidth != 0u) {
 8000af8:	6a3b      	ldr	r3, [r7, #32]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d014      	beq.n	8000b28 <_PrintInt+0xa8>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8000afe:	e00a      	b.n	8000b16 <_PrintInt+0x96>
        FieldWidth--;
 8000b00:	6a3b      	ldr	r3, [r7, #32]
 8000b02:	3b01      	subs	r3, #1
 8000b04:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8000b06:	2120      	movs	r1, #32
 8000b08:	68f8      	ldr	r0, [r7, #12]
 8000b0a:	f7ff fecf 	bl	80008ac <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	68db      	ldr	r3, [r3, #12]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	db07      	blt.n	8000b26 <_PrintInt+0xa6>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8000b16:	6a3b      	ldr	r3, [r7, #32]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d005      	beq.n	8000b28 <_PrintInt+0xa8>
 8000b1c:	697a      	ldr	r2, [r7, #20]
 8000b1e:	6a3b      	ldr	r3, [r7, #32]
 8000b20:	429a      	cmp	r2, r3
 8000b22:	d3ed      	bcc.n	8000b00 <_PrintInt+0x80>
 8000b24:	e000      	b.n	8000b28 <_PrintInt+0xa8>
          break;
 8000b26:	bf00      	nop
    }
  }
  //
  // Print sign if necessary
  //
  if (pBufferDesc->ReturnValue >= 0) {
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	68db      	ldr	r3, [r3, #12]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	db4a      	blt.n	8000bc6 <_PrintInt+0x146>
    if (v < 0) {
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	da07      	bge.n	8000b46 <_PrintInt+0xc6>
      v = -v;
 8000b36:	68bb      	ldr	r3, [r7, #8]
 8000b38:	425b      	negs	r3, r3
 8000b3a:	60bb      	str	r3, [r7, #8]
      _StoreChar(pBufferDesc, '-');
 8000b3c:	212d      	movs	r1, #45	; 0x2d
 8000b3e:	68f8      	ldr	r0, [r7, #12]
 8000b40:	f7ff feb4 	bl	80008ac <_StoreChar>
 8000b44:	e008      	b.n	8000b58 <_PrintInt+0xd8>
    } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8000b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b48:	f003 0304 	and.w	r3, r3, #4
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d003      	beq.n	8000b58 <_PrintInt+0xd8>
      _StoreChar(pBufferDesc, '+');
 8000b50:	212b      	movs	r1, #43	; 0x2b
 8000b52:	68f8      	ldr	r0, [r7, #12]
 8000b54:	f7ff feaa 	bl	80008ac <_StoreChar>
    } else {

    }
    if (pBufferDesc->ReturnValue >= 0) {
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	68db      	ldr	r3, [r3, #12]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	db32      	blt.n	8000bc6 <_PrintInt+0x146>
      //
      // Print leading zeros if necessary
      //
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8000b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b62:	f003 0302 	and.w	r3, r3, #2
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d01f      	beq.n	8000baa <_PrintInt+0x12a>
 8000b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b6c:	f003 0301 	and.w	r3, r3, #1
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d11a      	bne.n	8000baa <_PrintInt+0x12a>
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d117      	bne.n	8000baa <_PrintInt+0x12a>
        if (FieldWidth != 0u) {
 8000b7a:	6a3b      	ldr	r3, [r7, #32]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d014      	beq.n	8000baa <_PrintInt+0x12a>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8000b80:	e00a      	b.n	8000b98 <_PrintInt+0x118>
            FieldWidth--;
 8000b82:	6a3b      	ldr	r3, [r7, #32]
 8000b84:	3b01      	subs	r3, #1
 8000b86:	623b      	str	r3, [r7, #32]
            _StoreChar(pBufferDesc, '0');
 8000b88:	2130      	movs	r1, #48	; 0x30
 8000b8a:	68f8      	ldr	r0, [r7, #12]
 8000b8c:	f7ff fe8e 	bl	80008ac <_StoreChar>
            if (pBufferDesc->ReturnValue < 0) {
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	68db      	ldr	r3, [r3, #12]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	db07      	blt.n	8000ba8 <_PrintInt+0x128>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8000b98:	6a3b      	ldr	r3, [r7, #32]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d005      	beq.n	8000baa <_PrintInt+0x12a>
 8000b9e:	697a      	ldr	r2, [r7, #20]
 8000ba0:	6a3b      	ldr	r3, [r7, #32]
 8000ba2:	429a      	cmp	r2, r3
 8000ba4:	d3ed      	bcc.n	8000b82 <_PrintInt+0x102>
 8000ba6:	e000      	b.n	8000baa <_PrintInt+0x12a>
              break;
 8000ba8:	bf00      	nop
            }
          }
        }
      }
      if (pBufferDesc->ReturnValue >= 0) {
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	68db      	ldr	r3, [r3, #12]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	db09      	blt.n	8000bc6 <_PrintInt+0x146>
        //
        // Print number without sign
        //
        _PrintUnsigned(pBufferDesc, (unsigned)v, Base, NumDigits, FieldWidth, FormatFlags);
 8000bb2:	68b9      	ldr	r1, [r7, #8]
 8000bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bb6:	9301      	str	r3, [sp, #4]
 8000bb8:	6a3b      	ldr	r3, [r7, #32]
 8000bba:	9300      	str	r3, [sp, #0]
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	687a      	ldr	r2, [r7, #4]
 8000bc0:	68f8      	ldr	r0, [r7, #12]
 8000bc2:	f7ff feb1 	bl	8000928 <_PrintUnsigned>
      }
    }
  }
}
 8000bc6:	bf00      	nop
 8000bc8:	3718      	adds	r7, #24
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
	...

08000bd0 <SEGGER_RTT_vprintf>:
*
*  Return values
*    >= 0:  Number of bytes which have been stored in the "Up"-buffer.
*     < 0:  Error
*/
int SEGGER_RTT_vprintf(unsigned BufferIndex, const char * sFormat, va_list * pParamList) {
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b0a2      	sub	sp, #136	; 0x88
 8000bd4:	af02      	add	r7, sp, #8
 8000bd6:	60f8      	str	r0, [r7, #12]
 8000bd8:	60b9      	str	r1, [r7, #8]
 8000bda:	607a      	str	r2, [r7, #4]
  unsigned NumDigits;
  unsigned FormatFlags;
  unsigned FieldWidth;
  char acBuffer[SEGGER_RTT_PRINTF_BUFFER_SIZE];

  BufferDesc.pBuffer        = acBuffer;
 8000bdc:	f107 0310 	add.w	r3, r7, #16
 8000be0:	653b      	str	r3, [r7, #80]	; 0x50
  BufferDesc.BufferSize     = SEGGER_RTT_PRINTF_BUFFER_SIZE;
 8000be2:	2340      	movs	r3, #64	; 0x40
 8000be4:	657b      	str	r3, [r7, #84]	; 0x54
  BufferDesc.Cnt            = 0u;
 8000be6:	2300      	movs	r3, #0
 8000be8:	65bb      	str	r3, [r7, #88]	; 0x58
  BufferDesc.RTTBufferIndex = BufferIndex;
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	663b      	str	r3, [r7, #96]	; 0x60
  BufferDesc.ReturnValue    = 0;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	65fb      	str	r3, [r7, #92]	; 0x5c

  do {
    c = *sFormat;
 8000bf2:	68bb      	ldr	r3, [r7, #8]
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    sFormat++;
 8000bfa:	68bb      	ldr	r3, [r7, #8]
 8000bfc:	3301      	adds	r3, #1
 8000bfe:	60bb      	str	r3, [r7, #8]
    if (c == 0u) {
 8000c00:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	f000 819f 	beq.w	8000f48 <SEGGER_RTT_vprintf+0x378>
      break;
    }
    if (c == '%') {
 8000c0a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8000c0e:	2b25      	cmp	r3, #37	; 0x25
 8000c10:	f040 818d 	bne.w	8000f2e <SEGGER_RTT_vprintf+0x35e>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8000c14:	2300      	movs	r3, #0
 8000c16:	673b      	str	r3, [r7, #112]	; 0x70
      v = 1;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	67bb      	str	r3, [r7, #120]	; 0x78
      do {
        c = *sFormat;
 8000c1c:	68bb      	ldr	r3, [r7, #8]
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
        switch (c) {
 8000c24:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8000c28:	3b23      	subs	r3, #35	; 0x23
 8000c2a:	2b0d      	cmp	r3, #13
 8000c2c:	d83e      	bhi.n	8000cac <SEGGER_RTT_vprintf+0xdc>
 8000c2e:	a201      	add	r2, pc, #4	; (adr r2, 8000c34 <SEGGER_RTT_vprintf+0x64>)
 8000c30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c34:	08000c9d 	.word	0x08000c9d
 8000c38:	08000cad 	.word	0x08000cad
 8000c3c:	08000cad 	.word	0x08000cad
 8000c40:	08000cad 	.word	0x08000cad
 8000c44:	08000cad 	.word	0x08000cad
 8000c48:	08000cad 	.word	0x08000cad
 8000c4c:	08000cad 	.word	0x08000cad
 8000c50:	08000cad 	.word	0x08000cad
 8000c54:	08000c8d 	.word	0x08000c8d
 8000c58:	08000cad 	.word	0x08000cad
 8000c5c:	08000c6d 	.word	0x08000c6d
 8000c60:	08000cad 	.word	0x08000cad
 8000c64:	08000cad 	.word	0x08000cad
 8000c68:	08000c7d 	.word	0x08000c7d
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8000c6c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000c6e:	f043 0301 	orr.w	r3, r3, #1
 8000c72:	673b      	str	r3, [r7, #112]	; 0x70
 8000c74:	68bb      	ldr	r3, [r7, #8]
 8000c76:	3301      	adds	r3, #1
 8000c78:	60bb      	str	r3, [r7, #8]
 8000c7a:	e01a      	b.n	8000cb2 <SEGGER_RTT_vprintf+0xe2>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8000c7c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000c7e:	f043 0302 	orr.w	r3, r3, #2
 8000c82:	673b      	str	r3, [r7, #112]	; 0x70
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	3301      	adds	r3, #1
 8000c88:	60bb      	str	r3, [r7, #8]
 8000c8a:	e012      	b.n	8000cb2 <SEGGER_RTT_vprintf+0xe2>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8000c8c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000c8e:	f043 0304 	orr.w	r3, r3, #4
 8000c92:	673b      	str	r3, [r7, #112]	; 0x70
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	3301      	adds	r3, #1
 8000c98:	60bb      	str	r3, [r7, #8]
 8000c9a:	e00a      	b.n	8000cb2 <SEGGER_RTT_vprintf+0xe2>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8000c9c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000c9e:	f043 0308 	orr.w	r3, r3, #8
 8000ca2:	673b      	str	r3, [r7, #112]	; 0x70
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	3301      	adds	r3, #1
 8000ca8:	60bb      	str	r3, [r7, #8]
 8000caa:	e002      	b.n	8000cb2 <SEGGER_RTT_vprintf+0xe2>
        default:  v = 0; break;
 8000cac:	2300      	movs	r3, #0
 8000cae:	67bb      	str	r3, [r7, #120]	; 0x78
 8000cb0:	bf00      	nop
        }
      } while (v);
 8000cb2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d1b1      	bne.n	8000c1c <SEGGER_RTT_vprintf+0x4c>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	66fb      	str	r3, [r7, #108]	; 0x6c
      do {
        c = *sFormat;
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
        if ((c < '0') || (c > '9')) {
 8000cc4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8000cc8:	2b2f      	cmp	r3, #47	; 0x2f
 8000cca:	d912      	bls.n	8000cf2 <SEGGER_RTT_vprintf+0x122>
 8000ccc:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8000cd0:	2b39      	cmp	r3, #57	; 0x39
 8000cd2:	d80e      	bhi.n	8000cf2 <SEGGER_RTT_vprintf+0x122>
          break;
        }
        sFormat++;
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	3301      	adds	r3, #1
 8000cd8:	60bb      	str	r3, [r7, #8]
        FieldWidth = (FieldWidth * 10u) + ((unsigned)c - '0');
 8000cda:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000cdc:	4613      	mov	r3, r2
 8000cde:	009b      	lsls	r3, r3, #2
 8000ce0:	4413      	add	r3, r2
 8000ce2:	005b      	lsls	r3, r3, #1
 8000ce4:	461a      	mov	r2, r3
 8000ce6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8000cea:	4413      	add	r3, r2
 8000cec:	3b30      	subs	r3, #48	; 0x30
 8000cee:	66fb      	str	r3, [r7, #108]	; 0x6c
        c = *sFormat;
 8000cf0:	e7e4      	b.n	8000cbc <SEGGER_RTT_vprintf+0xec>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	677b      	str	r3, [r7, #116]	; 0x74
      c = *sFormat;
 8000cf6:	68bb      	ldr	r3, [r7, #8]
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
      if (c == '.') {
 8000cfe:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8000d02:	2b2e      	cmp	r3, #46	; 0x2e
 8000d04:	d11d      	bne.n	8000d42 <SEGGER_RTT_vprintf+0x172>
        sFormat++;
 8000d06:	68bb      	ldr	r3, [r7, #8]
 8000d08:	3301      	adds	r3, #1
 8000d0a:	60bb      	str	r3, [r7, #8]
        do {
          c = *sFormat;
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
          if ((c < '0') || (c > '9')) {
 8000d14:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8000d18:	2b2f      	cmp	r3, #47	; 0x2f
 8000d1a:	d912      	bls.n	8000d42 <SEGGER_RTT_vprintf+0x172>
 8000d1c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8000d20:	2b39      	cmp	r3, #57	; 0x39
 8000d22:	d80e      	bhi.n	8000d42 <SEGGER_RTT_vprintf+0x172>
            break;
          }
          sFormat++;
 8000d24:	68bb      	ldr	r3, [r7, #8]
 8000d26:	3301      	adds	r3, #1
 8000d28:	60bb      	str	r3, [r7, #8]
          NumDigits = NumDigits * 10u + ((unsigned)c - '0');
 8000d2a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8000d2c:	4613      	mov	r3, r2
 8000d2e:	009b      	lsls	r3, r3, #2
 8000d30:	4413      	add	r3, r2
 8000d32:	005b      	lsls	r3, r3, #1
 8000d34:	461a      	mov	r2, r3
 8000d36:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8000d3a:	4413      	add	r3, r2
 8000d3c:	3b30      	subs	r3, #48	; 0x30
 8000d3e:	677b      	str	r3, [r7, #116]	; 0x74
          c = *sFormat;
 8000d40:	e7e4      	b.n	8000d0c <SEGGER_RTT_vprintf+0x13c>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8000d42:	68bb      	ldr	r3, [r7, #8]
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
      do {
        if ((c == 'l') || (c == 'h')) {
 8000d4a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8000d4e:	2b6c      	cmp	r3, #108	; 0x6c
 8000d50:	d003      	beq.n	8000d5a <SEGGER_RTT_vprintf+0x18a>
 8000d52:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8000d56:	2b68      	cmp	r3, #104	; 0x68
 8000d58:	d107      	bne.n	8000d6a <SEGGER_RTT_vprintf+0x19a>
          sFormat++;
 8000d5a:	68bb      	ldr	r3, [r7, #8]
 8000d5c:	3301      	adds	r3, #1
 8000d5e:	60bb      	str	r3, [r7, #8]
          c = *sFormat;
 8000d60:	68bb      	ldr	r3, [r7, #8]
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
        if ((c == 'l') || (c == 'h')) {
 8000d68:	e7ef      	b.n	8000d4a <SEGGER_RTT_vprintf+0x17a>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8000d6a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8000d6e:	2b25      	cmp	r3, #37	; 0x25
 8000d70:	f000 80d1 	beq.w	8000f16 <SEGGER_RTT_vprintf+0x346>
 8000d74:	2b25      	cmp	r3, #37	; 0x25
 8000d76:	f2c0 80d5 	blt.w	8000f24 <SEGGER_RTT_vprintf+0x354>
 8000d7a:	2b78      	cmp	r3, #120	; 0x78
 8000d7c:	f300 80d2 	bgt.w	8000f24 <SEGGER_RTT_vprintf+0x354>
 8000d80:	2b58      	cmp	r3, #88	; 0x58
 8000d82:	f2c0 80cf 	blt.w	8000f24 <SEGGER_RTT_vprintf+0x354>
 8000d86:	3b58      	subs	r3, #88	; 0x58
 8000d88:	2b20      	cmp	r3, #32
 8000d8a:	f200 80cb 	bhi.w	8000f24 <SEGGER_RTT_vprintf+0x354>
 8000d8e:	a201      	add	r2, pc, #4	; (adr r2, 8000d94 <SEGGER_RTT_vprintf+0x1c4>)
 8000d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d94:	08000e8b 	.word	0x08000e8b
 8000d98:	08000f25 	.word	0x08000f25
 8000d9c:	08000f25 	.word	0x08000f25
 8000da0:	08000f25 	.word	0x08000f25
 8000da4:	08000f25 	.word	0x08000f25
 8000da8:	08000f25 	.word	0x08000f25
 8000dac:	08000f25 	.word	0x08000f25
 8000db0:	08000f25 	.word	0x08000f25
 8000db4:	08000f25 	.word	0x08000f25
 8000db8:	08000f25 	.word	0x08000f25
 8000dbc:	08000f25 	.word	0x08000f25
 8000dc0:	08000e19 	.word	0x08000e19
 8000dc4:	08000e3f 	.word	0x08000e3f
 8000dc8:	08000f25 	.word	0x08000f25
 8000dcc:	08000f25 	.word	0x08000f25
 8000dd0:	08000f25 	.word	0x08000f25
 8000dd4:	08000f25 	.word	0x08000f25
 8000dd8:	08000f25 	.word	0x08000f25
 8000ddc:	08000f25 	.word	0x08000f25
 8000de0:	08000f25 	.word	0x08000f25
 8000de4:	08000f25 	.word	0x08000f25
 8000de8:	08000f25 	.word	0x08000f25
 8000dec:	08000f25 	.word	0x08000f25
 8000df0:	08000f25 	.word	0x08000f25
 8000df4:	08000ef1 	.word	0x08000ef1
 8000df8:	08000f25 	.word	0x08000f25
 8000dfc:	08000f25 	.word	0x08000f25
 8000e00:	08000eb1 	.word	0x08000eb1
 8000e04:	08000f25 	.word	0x08000f25
 8000e08:	08000e65 	.word	0x08000e65
 8000e0c:	08000f25 	.word	0x08000f25
 8000e10:	08000f25 	.word	0x08000f25
 8000e14:	08000e8b 	.word	0x08000e8b
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	1d19      	adds	r1, r3, #4
 8000e1e:	687a      	ldr	r2, [r7, #4]
 8000e20:	6011      	str	r1, [r2, #0]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	67bb      	str	r3, [r7, #120]	; 0x78
        c0 = (char)v;
 8000e26:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000e28:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        _StoreChar(&BufferDesc, c0);
 8000e2c:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8000e30:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000e34:	4611      	mov	r1, r2
 8000e36:	4618      	mov	r0, r3
 8000e38:	f7ff fd38 	bl	80008ac <_StoreChar>
        break;
 8000e3c:	e073      	b.n	8000f26 <SEGGER_RTT_vprintf+0x356>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	1d19      	adds	r1, r3, #4
 8000e44:	687a      	ldr	r2, [r7, #4]
 8000e46:	6011      	str	r1, [r2, #0]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	67bb      	str	r3, [r7, #120]	; 0x78
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8000e4c:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8000e50:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000e52:	9301      	str	r3, [sp, #4]
 8000e54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000e56:	9300      	str	r3, [sp, #0]
 8000e58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000e5a:	220a      	movs	r2, #10
 8000e5c:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8000e5e:	f7ff fe0f 	bl	8000a80 <_PrintInt>
        break;
 8000e62:	e060      	b.n	8000f26 <SEGGER_RTT_vprintf+0x356>
      case 'u':
        v = va_arg(*pParamList, int);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	1d19      	adds	r1, r3, #4
 8000e6a:	687a      	ldr	r2, [r7, #4]
 8000e6c:	6011      	str	r1, [r2, #0]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	67bb      	str	r3, [r7, #120]	; 0x78
        _PrintUnsigned(&BufferDesc, (unsigned)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8000e72:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8000e74:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8000e78:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000e7a:	9301      	str	r3, [sp, #4]
 8000e7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000e7e:	9300      	str	r3, [sp, #0]
 8000e80:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000e82:	220a      	movs	r2, #10
 8000e84:	f7ff fd50 	bl	8000928 <_PrintUnsigned>
        break;
 8000e88:	e04d      	b.n	8000f26 <SEGGER_RTT_vprintf+0x356>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	1d19      	adds	r1, r3, #4
 8000e90:	687a      	ldr	r2, [r7, #4]
 8000e92:	6011      	str	r1, [r2, #0]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	67bb      	str	r3, [r7, #120]	; 0x78
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8000e98:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8000e9a:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8000e9e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000ea0:	9301      	str	r3, [sp, #4]
 8000ea2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000ea4:	9300      	str	r3, [sp, #0]
 8000ea6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000ea8:	2210      	movs	r2, #16
 8000eaa:	f7ff fd3d 	bl	8000928 <_PrintUnsigned>
        break;
 8000eae:	e03a      	b.n	8000f26 <SEGGER_RTT_vprintf+0x356>
      case 's':
        {
          const char * s = va_arg(*pParamList, const char *);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	1d19      	adds	r1, r3, #4
 8000eb6:	687a      	ldr	r2, [r7, #4]
 8000eb8:	6011      	str	r1, [r2, #0]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	66bb      	str	r3, [r7, #104]	; 0x68
          do {
            c = *s;
 8000ebe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            s++;
 8000ec6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000ec8:	3301      	adds	r3, #1
 8000eca:	66bb      	str	r3, [r7, #104]	; 0x68
            if (c == '\0') {
 8000ecc:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d00b      	beq.n	8000eec <SEGGER_RTT_vprintf+0x31c>
              break;
            }
           _StoreChar(&BufferDesc, c);
 8000ed4:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 8000ed8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000edc:	4611      	mov	r1, r2
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f7ff fce4 	bl	80008ac <_StoreChar>
          } while (BufferDesc.ReturnValue >= 0);
 8000ee4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	dae9      	bge.n	8000ebe <SEGGER_RTT_vprintf+0x2ee>
        }
        break;
 8000eea:	e01c      	b.n	8000f26 <SEGGER_RTT_vprintf+0x356>
              break;
 8000eec:	bf00      	nop
        break;
 8000eee:	e01a      	b.n	8000f26 <SEGGER_RTT_vprintf+0x356>
      case 'p':
        v = va_arg(*pParamList, int);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	1d19      	adds	r1, r3, #4
 8000ef6:	687a      	ldr	r2, [r7, #4]
 8000ef8:	6011      	str	r1, [r2, #0]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	67bb      	str	r3, [r7, #120]	; 0x78
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, 8u, 8u, 0u);
 8000efe:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8000f00:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8000f04:	2300      	movs	r3, #0
 8000f06:	9301      	str	r3, [sp, #4]
 8000f08:	2308      	movs	r3, #8
 8000f0a:	9300      	str	r3, [sp, #0]
 8000f0c:	2308      	movs	r3, #8
 8000f0e:	2210      	movs	r2, #16
 8000f10:	f7ff fd0a 	bl	8000928 <_PrintUnsigned>
        break;
 8000f14:	e007      	b.n	8000f26 <SEGGER_RTT_vprintf+0x356>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8000f16:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000f1a:	2125      	movs	r1, #37	; 0x25
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f7ff fcc5 	bl	80008ac <_StoreChar>
        break;
 8000f22:	e000      	b.n	8000f26 <SEGGER_RTT_vprintf+0x356>
      default:
        break;
 8000f24:	bf00      	nop
      }
      sFormat++;
 8000f26:	68bb      	ldr	r3, [r7, #8]
 8000f28:	3301      	adds	r3, #1
 8000f2a:	60bb      	str	r3, [r7, #8]
 8000f2c:	e007      	b.n	8000f3e <SEGGER_RTT_vprintf+0x36e>
    } else {
      _StoreChar(&BufferDesc, c);
 8000f2e:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 8000f32:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000f36:	4611      	mov	r1, r2
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f7ff fcb7 	bl	80008ac <_StoreChar>
    }
  } while (BufferDesc.ReturnValue >= 0);
 8000f3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	f6bf ae56 	bge.w	8000bf2 <SEGGER_RTT_vprintf+0x22>
 8000f46:	e000      	b.n	8000f4a <SEGGER_RTT_vprintf+0x37a>
      break;
 8000f48:	bf00      	nop

  if (BufferDesc.ReturnValue > 0) {
 8000f4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	dd0d      	ble.n	8000f6c <SEGGER_RTT_vprintf+0x39c>
    //
    // Write remaining data, if any
    //
    if (BufferDesc.Cnt != 0u) {
 8000f50:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d006      	beq.n	8000f64 <SEGGER_RTT_vprintf+0x394>
      SEGGER_RTT_Write(BufferIndex, acBuffer, BufferDesc.Cnt);
 8000f56:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000f58:	f107 0310 	add.w	r3, r7, #16
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	68f8      	ldr	r0, [r7, #12]
 8000f60:	f7ff fc34 	bl	80007cc <SEGGER_RTT_Write>
    }
    BufferDesc.ReturnValue += (int)BufferDesc.Cnt;
 8000f64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000f66:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000f68:	4413      	add	r3, r2
 8000f6a:	65fb      	str	r3, [r7, #92]	; 0x5c
  }
  return BufferDesc.ReturnValue;
 8000f6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3780      	adds	r7, #128	; 0x80
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop

08000f78 <SEGGER_RTT_printf>:
*          u: Print the argument as an unsigned integer
*          x: Print the argument as an hexadecimal integer
*          s: Print the string pointed to by the argument
*          p: Print the argument as an 8-digit hexadecimal integer. (Argument shall be a pointer to void.)
*/
int SEGGER_RTT_printf(unsigned BufferIndex, const char * sFormat, ...) {
 8000f78:	b40e      	push	{r1, r2, r3}
 8000f7a:	b580      	push	{r7, lr}
 8000f7c:	b085      	sub	sp, #20
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	6078      	str	r0, [r7, #4]
  int r;
  va_list ParamList;

  va_start(ParamList, sFormat);
 8000f82:	f107 0320 	add.w	r3, r7, #32
 8000f86:	60bb      	str	r3, [r7, #8]
  r = SEGGER_RTT_vprintf(BufferIndex, sFormat, &ParamList);
 8000f88:	f107 0308 	add.w	r3, r7, #8
 8000f8c:	461a      	mov	r2, r3
 8000f8e:	69f9      	ldr	r1, [r7, #28]
 8000f90:	6878      	ldr	r0, [r7, #4]
 8000f92:	f7ff fe1d 	bl	8000bd0 <SEGGER_RTT_vprintf>
 8000f96:	60f8      	str	r0, [r7, #12]
  va_end(ParamList);
  return r;
 8000f98:	68fb      	ldr	r3, [r7, #12]
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3714      	adds	r7, #20
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000fa4:	b003      	add	sp, #12
 8000fa6:	4770      	bx	lr

08000fa8 <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0

}
 8000fac:	bf00      	nop
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr

08000fb6 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 8000fb6:	b480      	push	{r7}
 8000fb8:	af00      	add	r7, sp, #0
return 0;
 8000fba:	2300      	movs	r3, #0
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
	...

08000fc8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b084      	sub	sp, #16
 8000fcc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fce:	f000 fc7b 	bl	80018c8 <HAL_Init>

  /* USER CODE BEGIN Init */
QueueHandle_t myQueue;
myQueue = xQueueCreate(8, sizeof(uint8_t));
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	2101      	movs	r1, #1
 8000fd6:	2008      	movs	r0, #8
 8000fd8:	f003 fc08 	bl	80047ec <xQueueGenericCreate>
 8000fdc:	6078      	str	r0, [r7, #4]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fde:	f000 f829 	bl	8001034 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fe2:	f000 f937 	bl	8001254 <MX_GPIO_Init>
  MX_ETH_Init();
 8000fe6:	f000 f88f 	bl	8001108 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000fea:	f000 f8db 	bl	80011a4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000fee:	f000 f903 	bl	80011f8 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  SEGGER_RTT_ConfigUpBuffer(0, NULL, NULL, 0, SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	9300      	str	r3, [sp, #0]
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	2000      	movs	r0, #0
 8000ffe:	f7ff fc0b 	bl	8000818 <SEGGER_RTT_ConfigUpBuffer>
  SEGGER_RTT_printf(0,"Starting... \r\n");
 8001002:	4908      	ldr	r1, [pc, #32]	; (8001024 <main+0x5c>)
 8001004:	2000      	movs	r0, #0
 8001006:	f7ff ffb7 	bl	8000f78 <SEGGER_RTT_printf>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800100a:	f003 f92f 	bl	800426c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800100e:	4a06      	ldr	r2, [pc, #24]	; (8001028 <main+0x60>)
 8001010:	2100      	movs	r1, #0
 8001012:	4806      	ldr	r0, [pc, #24]	; (800102c <main+0x64>)
 8001014:	f003 f974 	bl	8004300 <osThreadNew>
 8001018:	4603      	mov	r3, r0
 800101a:	4a05      	ldr	r2, [pc, #20]	; (8001030 <main+0x68>)
 800101c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800101e:	f003 f949 	bl	80042b4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001022:	e7fe      	b.n	8001022 <main+0x5a>
 8001024:	08007020 	.word	0x08007020
 8001028:	08007098 	.word	0x08007098
 800102c:	080013b1 	.word	0x080013b1
 8001030:	20000cac 	.word	0x20000cac

08001034 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b094      	sub	sp, #80	; 0x50
 8001038:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800103a:	f107 0320 	add.w	r3, r7, #32
 800103e:	2230      	movs	r2, #48	; 0x30
 8001040:	2100      	movs	r1, #0
 8001042:	4618      	mov	r0, r3
 8001044:	f005 feea 	bl	8006e1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001048:	f107 030c 	add.w	r3, r7, #12
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	605a      	str	r2, [r3, #4]
 8001052:	609a      	str	r2, [r3, #8]
 8001054:	60da      	str	r2, [r3, #12]
 8001056:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001058:	2300      	movs	r3, #0
 800105a:	60bb      	str	r3, [r7, #8]
 800105c:	4b28      	ldr	r3, [pc, #160]	; (8001100 <SystemClock_Config+0xcc>)
 800105e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001060:	4a27      	ldr	r2, [pc, #156]	; (8001100 <SystemClock_Config+0xcc>)
 8001062:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001066:	6413      	str	r3, [r2, #64]	; 0x40
 8001068:	4b25      	ldr	r3, [pc, #148]	; (8001100 <SystemClock_Config+0xcc>)
 800106a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001070:	60bb      	str	r3, [r7, #8]
 8001072:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001074:	2300      	movs	r3, #0
 8001076:	607b      	str	r3, [r7, #4]
 8001078:	4b22      	ldr	r3, [pc, #136]	; (8001104 <SystemClock_Config+0xd0>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a21      	ldr	r2, [pc, #132]	; (8001104 <SystemClock_Config+0xd0>)
 800107e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001082:	6013      	str	r3, [r2, #0]
 8001084:	4b1f      	ldr	r3, [pc, #124]	; (8001104 <SystemClock_Config+0xd0>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800108c:	607b      	str	r3, [r7, #4]
 800108e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001090:	2301      	movs	r3, #1
 8001092:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001094:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001098:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800109a:	2302      	movs	r3, #2
 800109c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800109e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80010a4:	2304      	movs	r3, #4
 80010a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80010a8:	23a8      	movs	r3, #168	; 0xa8
 80010aa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010ac:	2302      	movs	r3, #2
 80010ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80010b0:	2307      	movs	r3, #7
 80010b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010b4:	f107 0320 	add.w	r3, r7, #32
 80010b8:	4618      	mov	r0, r3
 80010ba:	f001 fb57 	bl	800276c <HAL_RCC_OscConfig>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80010c4:	f000 f98e 	bl	80013e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010c8:	230f      	movs	r3, #15
 80010ca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010cc:	2302      	movs	r3, #2
 80010ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010d0:	2300      	movs	r3, #0
 80010d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80010d4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80010d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80010da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010de:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80010e0:	f107 030c 	add.w	r3, r7, #12
 80010e4:	2105      	movs	r1, #5
 80010e6:	4618      	mov	r0, r3
 80010e8:	f001 fdb8 	bl	8002c5c <HAL_RCC_ClockConfig>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80010f2:	f000 f977 	bl	80013e4 <Error_Handler>
  }
}
 80010f6:	bf00      	nop
 80010f8:	3750      	adds	r7, #80	; 0x50
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	40023800 	.word	0x40023800
 8001104:	40007000 	.word	0x40007000

08001108 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800110c:	4b1f      	ldr	r3, [pc, #124]	; (800118c <MX_ETH_Init+0x84>)
 800110e:	4a20      	ldr	r2, [pc, #128]	; (8001190 <MX_ETH_Init+0x88>)
 8001110:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8001112:	4b20      	ldr	r3, [pc, #128]	; (8001194 <MX_ETH_Init+0x8c>)
 8001114:	2200      	movs	r2, #0
 8001116:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001118:	4b1e      	ldr	r3, [pc, #120]	; (8001194 <MX_ETH_Init+0x8c>)
 800111a:	2280      	movs	r2, #128	; 0x80
 800111c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800111e:	4b1d      	ldr	r3, [pc, #116]	; (8001194 <MX_ETH_Init+0x8c>)
 8001120:	22e1      	movs	r2, #225	; 0xe1
 8001122:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001124:	4b1b      	ldr	r3, [pc, #108]	; (8001194 <MX_ETH_Init+0x8c>)
 8001126:	2200      	movs	r2, #0
 8001128:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800112a:	4b1a      	ldr	r3, [pc, #104]	; (8001194 <MX_ETH_Init+0x8c>)
 800112c:	2200      	movs	r2, #0
 800112e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001130:	4b18      	ldr	r3, [pc, #96]	; (8001194 <MX_ETH_Init+0x8c>)
 8001132:	2200      	movs	r2, #0
 8001134:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8001136:	4b15      	ldr	r3, [pc, #84]	; (800118c <MX_ETH_Init+0x84>)
 8001138:	4a16      	ldr	r2, [pc, #88]	; (8001194 <MX_ETH_Init+0x8c>)
 800113a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800113c:	4b13      	ldr	r3, [pc, #76]	; (800118c <MX_ETH_Init+0x84>)
 800113e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001142:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001144:	4b11      	ldr	r3, [pc, #68]	; (800118c <MX_ETH_Init+0x84>)
 8001146:	4a14      	ldr	r2, [pc, #80]	; (8001198 <MX_ETH_Init+0x90>)
 8001148:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800114a:	4b10      	ldr	r3, [pc, #64]	; (800118c <MX_ETH_Init+0x84>)
 800114c:	4a13      	ldr	r2, [pc, #76]	; (800119c <MX_ETH_Init+0x94>)
 800114e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001150:	4b0e      	ldr	r3, [pc, #56]	; (800118c <MX_ETH_Init+0x84>)
 8001152:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001156:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001158:	480c      	ldr	r0, [pc, #48]	; (800118c <MX_ETH_Init+0x84>)
 800115a:	f000 fcfd 	bl	8001b58 <HAL_ETH_Init>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8001164:	f000 f93e 	bl	80013e4 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001168:	2238      	movs	r2, #56	; 0x38
 800116a:	2100      	movs	r1, #0
 800116c:	480c      	ldr	r0, [pc, #48]	; (80011a0 <MX_ETH_Init+0x98>)
 800116e:	f005 fe55 	bl	8006e1c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001172:	4b0b      	ldr	r3, [pc, #44]	; (80011a0 <MX_ETH_Init+0x98>)
 8001174:	2221      	movs	r2, #33	; 0x21
 8001176:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001178:	4b09      	ldr	r3, [pc, #36]	; (80011a0 <MX_ETH_Init+0x98>)
 800117a:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800117e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001180:	4b07      	ldr	r3, [pc, #28]	; (80011a0 <MX_ETH_Init+0x98>)
 8001182:	2200      	movs	r2, #0
 8001184:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001186:	bf00      	nop
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	200006ac 	.word	0x200006ac
 8001190:	40028000 	.word	0x40028000
 8001194:	20000cb0 	.word	0x20000cb0
 8001198:	2000060c 	.word	0x2000060c
 800119c:	2000056c 	.word	0x2000056c
 80011a0:	20000534 	.word	0x20000534

080011a4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80011a8:	4b11      	ldr	r3, [pc, #68]	; (80011f0 <MX_USART3_UART_Init+0x4c>)
 80011aa:	4a12      	ldr	r2, [pc, #72]	; (80011f4 <MX_USART3_UART_Init+0x50>)
 80011ac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80011ae:	4b10      	ldr	r3, [pc, #64]	; (80011f0 <MX_USART3_UART_Init+0x4c>)
 80011b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011b4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80011b6:	4b0e      	ldr	r3, [pc, #56]	; (80011f0 <MX_USART3_UART_Init+0x4c>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80011bc:	4b0c      	ldr	r3, [pc, #48]	; (80011f0 <MX_USART3_UART_Init+0x4c>)
 80011be:	2200      	movs	r2, #0
 80011c0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80011c2:	4b0b      	ldr	r3, [pc, #44]	; (80011f0 <MX_USART3_UART_Init+0x4c>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80011c8:	4b09      	ldr	r3, [pc, #36]	; (80011f0 <MX_USART3_UART_Init+0x4c>)
 80011ca:	220c      	movs	r2, #12
 80011cc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011ce:	4b08      	ldr	r3, [pc, #32]	; (80011f0 <MX_USART3_UART_Init+0x4c>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80011d4:	4b06      	ldr	r3, [pc, #24]	; (80011f0 <MX_USART3_UART_Init+0x4c>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80011da:	4805      	ldr	r0, [pc, #20]	; (80011f0 <MX_USART3_UART_Init+0x4c>)
 80011dc:	f002 fa3e 	bl	800365c <HAL_UART_Init>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80011e6:	f000 f8fd 	bl	80013e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80011ea:	bf00      	nop
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	2000075c 	.word	0x2000075c
 80011f4:	40004800 	.word	0x40004800

080011f8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80011fc:	4b14      	ldr	r3, [pc, #80]	; (8001250 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011fe:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001202:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8001204:	4b12      	ldr	r3, [pc, #72]	; (8001250 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001206:	2204      	movs	r2, #4
 8001208:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800120a:	4b11      	ldr	r3, [pc, #68]	; (8001250 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800120c:	2202      	movs	r2, #2
 800120e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001210:	4b0f      	ldr	r3, [pc, #60]	; (8001250 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001212:	2200      	movs	r2, #0
 8001214:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001216:	4b0e      	ldr	r3, [pc, #56]	; (8001250 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001218:	2202      	movs	r2, #2
 800121a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800121c:	4b0c      	ldr	r3, [pc, #48]	; (8001250 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800121e:	2201      	movs	r2, #1
 8001220:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001222:	4b0b      	ldr	r3, [pc, #44]	; (8001250 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001224:	2200      	movs	r2, #0
 8001226:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001228:	4b09      	ldr	r3, [pc, #36]	; (8001250 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800122a:	2200      	movs	r2, #0
 800122c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800122e:	4b08      	ldr	r3, [pc, #32]	; (8001250 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001230:	2201      	movs	r2, #1
 8001232:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001234:	4b06      	ldr	r3, [pc, #24]	; (8001250 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001236:	2200      	movs	r2, #0
 8001238:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800123a:	4805      	ldr	r0, [pc, #20]	; (8001250 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800123c:	f001 f979 	bl	8002532 <HAL_PCD_Init>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001246:	f000 f8cd 	bl	80013e4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800124a:	bf00      	nop
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	200007a0 	.word	0x200007a0

08001254 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b08c      	sub	sp, #48	; 0x30
 8001258:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800125a:	f107 031c 	add.w	r3, r7, #28
 800125e:	2200      	movs	r2, #0
 8001260:	601a      	str	r2, [r3, #0]
 8001262:	605a      	str	r2, [r3, #4]
 8001264:	609a      	str	r2, [r3, #8]
 8001266:	60da      	str	r2, [r3, #12]
 8001268:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800126a:	2300      	movs	r3, #0
 800126c:	61bb      	str	r3, [r7, #24]
 800126e:	4b4c      	ldr	r3, [pc, #304]	; (80013a0 <MX_GPIO_Init+0x14c>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001272:	4a4b      	ldr	r2, [pc, #300]	; (80013a0 <MX_GPIO_Init+0x14c>)
 8001274:	f043 0304 	orr.w	r3, r3, #4
 8001278:	6313      	str	r3, [r2, #48]	; 0x30
 800127a:	4b49      	ldr	r3, [pc, #292]	; (80013a0 <MX_GPIO_Init+0x14c>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127e:	f003 0304 	and.w	r3, r3, #4
 8001282:	61bb      	str	r3, [r7, #24]
 8001284:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001286:	2300      	movs	r3, #0
 8001288:	617b      	str	r3, [r7, #20]
 800128a:	4b45      	ldr	r3, [pc, #276]	; (80013a0 <MX_GPIO_Init+0x14c>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128e:	4a44      	ldr	r2, [pc, #272]	; (80013a0 <MX_GPIO_Init+0x14c>)
 8001290:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001294:	6313      	str	r3, [r2, #48]	; 0x30
 8001296:	4b42      	ldr	r3, [pc, #264]	; (80013a0 <MX_GPIO_Init+0x14c>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800129e:	617b      	str	r3, [r7, #20]
 80012a0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a2:	2300      	movs	r3, #0
 80012a4:	613b      	str	r3, [r7, #16]
 80012a6:	4b3e      	ldr	r3, [pc, #248]	; (80013a0 <MX_GPIO_Init+0x14c>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012aa:	4a3d      	ldr	r2, [pc, #244]	; (80013a0 <MX_GPIO_Init+0x14c>)
 80012ac:	f043 0301 	orr.w	r3, r3, #1
 80012b0:	6313      	str	r3, [r2, #48]	; 0x30
 80012b2:	4b3b      	ldr	r3, [pc, #236]	; (80013a0 <MX_GPIO_Init+0x14c>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b6:	f003 0301 	and.w	r3, r3, #1
 80012ba:	613b      	str	r3, [r7, #16]
 80012bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	60fb      	str	r3, [r7, #12]
 80012c2:	4b37      	ldr	r3, [pc, #220]	; (80013a0 <MX_GPIO_Init+0x14c>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	4a36      	ldr	r2, [pc, #216]	; (80013a0 <MX_GPIO_Init+0x14c>)
 80012c8:	f043 0302 	orr.w	r3, r3, #2
 80012cc:	6313      	str	r3, [r2, #48]	; 0x30
 80012ce:	4b34      	ldr	r3, [pc, #208]	; (80013a0 <MX_GPIO_Init+0x14c>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	f003 0302 	and.w	r3, r3, #2
 80012d6:	60fb      	str	r3, [r7, #12]
 80012d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012da:	2300      	movs	r3, #0
 80012dc:	60bb      	str	r3, [r7, #8]
 80012de:	4b30      	ldr	r3, [pc, #192]	; (80013a0 <MX_GPIO_Init+0x14c>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e2:	4a2f      	ldr	r2, [pc, #188]	; (80013a0 <MX_GPIO_Init+0x14c>)
 80012e4:	f043 0308 	orr.w	r3, r3, #8
 80012e8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ea:	4b2d      	ldr	r3, [pc, #180]	; (80013a0 <MX_GPIO_Init+0x14c>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	f003 0308 	and.w	r3, r3, #8
 80012f2:	60bb      	str	r3, [r7, #8]
 80012f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80012f6:	2300      	movs	r3, #0
 80012f8:	607b      	str	r3, [r7, #4]
 80012fa:	4b29      	ldr	r3, [pc, #164]	; (80013a0 <MX_GPIO_Init+0x14c>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fe:	4a28      	ldr	r2, [pc, #160]	; (80013a0 <MX_GPIO_Init+0x14c>)
 8001300:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001304:	6313      	str	r3, [r2, #48]	; 0x30
 8001306:	4b26      	ldr	r3, [pc, #152]	; (80013a0 <MX_GPIO_Init+0x14c>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800130e:	607b      	str	r3, [r7, #4]
 8001310:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001312:	2200      	movs	r2, #0
 8001314:	f244 0181 	movw	r1, #16513	; 0x4081
 8001318:	4822      	ldr	r0, [pc, #136]	; (80013a4 <MX_GPIO_Init+0x150>)
 800131a:	f001 f8f1 	bl	8002500 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800131e:	2200      	movs	r2, #0
 8001320:	2140      	movs	r1, #64	; 0x40
 8001322:	4821      	ldr	r0, [pc, #132]	; (80013a8 <MX_GPIO_Init+0x154>)
 8001324:	f001 f8ec 	bl	8002500 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001328:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800132c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800132e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001332:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001334:	2300      	movs	r3, #0
 8001336:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001338:	f107 031c 	add.w	r3, r7, #28
 800133c:	4619      	mov	r1, r3
 800133e:	481b      	ldr	r0, [pc, #108]	; (80013ac <MX_GPIO_Init+0x158>)
 8001340:	f000 ff32 	bl	80021a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001344:	f244 0381 	movw	r3, #16513	; 0x4081
 8001348:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800134a:	2301      	movs	r3, #1
 800134c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134e:	2300      	movs	r3, #0
 8001350:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001352:	2300      	movs	r3, #0
 8001354:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001356:	f107 031c 	add.w	r3, r7, #28
 800135a:	4619      	mov	r1, r3
 800135c:	4811      	ldr	r0, [pc, #68]	; (80013a4 <MX_GPIO_Init+0x150>)
 800135e:	f000 ff23 	bl	80021a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001362:	2340      	movs	r3, #64	; 0x40
 8001364:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001366:	2301      	movs	r3, #1
 8001368:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136a:	2300      	movs	r3, #0
 800136c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800136e:	2300      	movs	r3, #0
 8001370:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001372:	f107 031c 	add.w	r3, r7, #28
 8001376:	4619      	mov	r1, r3
 8001378:	480b      	ldr	r0, [pc, #44]	; (80013a8 <MX_GPIO_Init+0x154>)
 800137a:	f000 ff15 	bl	80021a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800137e:	2380      	movs	r3, #128	; 0x80
 8001380:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001382:	2300      	movs	r3, #0
 8001384:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001386:	2300      	movs	r3, #0
 8001388:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800138a:	f107 031c 	add.w	r3, r7, #28
 800138e:	4619      	mov	r1, r3
 8001390:	4805      	ldr	r0, [pc, #20]	; (80013a8 <MX_GPIO_Init+0x154>)
 8001392:	f000 ff09 	bl	80021a8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001396:	bf00      	nop
 8001398:	3730      	adds	r7, #48	; 0x30
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	40023800 	.word	0x40023800
 80013a4:	40020400 	.word	0x40020400
 80013a8:	40021800 	.word	0x40021800
 80013ac:	40020800 	.word	0x40020800

080013b0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80013b8:	2001      	movs	r0, #1
 80013ba:	f003 f833 	bl	8004424 <osDelay>
 80013be:	e7fb      	b.n	80013b8 <StartDefaultTask+0x8>

080013c0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a04      	ldr	r2, [pc, #16]	; (80013e0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d101      	bne.n	80013d6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80013d2:	f000 fa9b 	bl	800190c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80013d6:	bf00      	nop
 80013d8:	3708      	adds	r7, #8
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	40001000 	.word	0x40001000

080013e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013e8:	b672      	cpsid	i
}
 80013ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013ec:	e7fe      	b.n	80013ec <Error_Handler+0x8>
	...

080013f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013f6:	2300      	movs	r3, #0
 80013f8:	607b      	str	r3, [r7, #4]
 80013fa:	4b12      	ldr	r3, [pc, #72]	; (8001444 <HAL_MspInit+0x54>)
 80013fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013fe:	4a11      	ldr	r2, [pc, #68]	; (8001444 <HAL_MspInit+0x54>)
 8001400:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001404:	6453      	str	r3, [r2, #68]	; 0x44
 8001406:	4b0f      	ldr	r3, [pc, #60]	; (8001444 <HAL_MspInit+0x54>)
 8001408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800140a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800140e:	607b      	str	r3, [r7, #4]
 8001410:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001412:	2300      	movs	r3, #0
 8001414:	603b      	str	r3, [r7, #0]
 8001416:	4b0b      	ldr	r3, [pc, #44]	; (8001444 <HAL_MspInit+0x54>)
 8001418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141a:	4a0a      	ldr	r2, [pc, #40]	; (8001444 <HAL_MspInit+0x54>)
 800141c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001420:	6413      	str	r3, [r2, #64]	; 0x40
 8001422:	4b08      	ldr	r3, [pc, #32]	; (8001444 <HAL_MspInit+0x54>)
 8001424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001426:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800142a:	603b      	str	r3, [r7, #0]
 800142c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800142e:	2200      	movs	r2, #0
 8001430:	210f      	movs	r1, #15
 8001432:	f06f 0001 	mvn.w	r0, #1
 8001436:	f000 fb65 	bl	8001b04 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800143a:	bf00      	nop
 800143c:	3708      	adds	r7, #8
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	40023800 	.word	0x40023800

08001448 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b08e      	sub	sp, #56	; 0x38
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001450:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001454:	2200      	movs	r2, #0
 8001456:	601a      	str	r2, [r3, #0]
 8001458:	605a      	str	r2, [r3, #4]
 800145a:	609a      	str	r2, [r3, #8]
 800145c:	60da      	str	r2, [r3, #12]
 800145e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a55      	ldr	r2, [pc, #340]	; (80015bc <HAL_ETH_MspInit+0x174>)
 8001466:	4293      	cmp	r3, r2
 8001468:	f040 80a4 	bne.w	80015b4 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 800146c:	2300      	movs	r3, #0
 800146e:	623b      	str	r3, [r7, #32]
 8001470:	4b53      	ldr	r3, [pc, #332]	; (80015c0 <HAL_ETH_MspInit+0x178>)
 8001472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001474:	4a52      	ldr	r2, [pc, #328]	; (80015c0 <HAL_ETH_MspInit+0x178>)
 8001476:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800147a:	6313      	str	r3, [r2, #48]	; 0x30
 800147c:	4b50      	ldr	r3, [pc, #320]	; (80015c0 <HAL_ETH_MspInit+0x178>)
 800147e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001480:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001484:	623b      	str	r3, [r7, #32]
 8001486:	6a3b      	ldr	r3, [r7, #32]
 8001488:	2300      	movs	r3, #0
 800148a:	61fb      	str	r3, [r7, #28]
 800148c:	4b4c      	ldr	r3, [pc, #304]	; (80015c0 <HAL_ETH_MspInit+0x178>)
 800148e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001490:	4a4b      	ldr	r2, [pc, #300]	; (80015c0 <HAL_ETH_MspInit+0x178>)
 8001492:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001496:	6313      	str	r3, [r2, #48]	; 0x30
 8001498:	4b49      	ldr	r3, [pc, #292]	; (80015c0 <HAL_ETH_MspInit+0x178>)
 800149a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80014a0:	61fb      	str	r3, [r7, #28]
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	2300      	movs	r3, #0
 80014a6:	61bb      	str	r3, [r7, #24]
 80014a8:	4b45      	ldr	r3, [pc, #276]	; (80015c0 <HAL_ETH_MspInit+0x178>)
 80014aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ac:	4a44      	ldr	r2, [pc, #272]	; (80015c0 <HAL_ETH_MspInit+0x178>)
 80014ae:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80014b2:	6313      	str	r3, [r2, #48]	; 0x30
 80014b4:	4b42      	ldr	r3, [pc, #264]	; (80015c0 <HAL_ETH_MspInit+0x178>)
 80014b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80014bc:	61bb      	str	r3, [r7, #24]
 80014be:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014c0:	2300      	movs	r3, #0
 80014c2:	617b      	str	r3, [r7, #20]
 80014c4:	4b3e      	ldr	r3, [pc, #248]	; (80015c0 <HAL_ETH_MspInit+0x178>)
 80014c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c8:	4a3d      	ldr	r2, [pc, #244]	; (80015c0 <HAL_ETH_MspInit+0x178>)
 80014ca:	f043 0304 	orr.w	r3, r3, #4
 80014ce:	6313      	str	r3, [r2, #48]	; 0x30
 80014d0:	4b3b      	ldr	r3, [pc, #236]	; (80015c0 <HAL_ETH_MspInit+0x178>)
 80014d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d4:	f003 0304 	and.w	r3, r3, #4
 80014d8:	617b      	str	r3, [r7, #20]
 80014da:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014dc:	2300      	movs	r3, #0
 80014de:	613b      	str	r3, [r7, #16]
 80014e0:	4b37      	ldr	r3, [pc, #220]	; (80015c0 <HAL_ETH_MspInit+0x178>)
 80014e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e4:	4a36      	ldr	r2, [pc, #216]	; (80015c0 <HAL_ETH_MspInit+0x178>)
 80014e6:	f043 0301 	orr.w	r3, r3, #1
 80014ea:	6313      	str	r3, [r2, #48]	; 0x30
 80014ec:	4b34      	ldr	r3, [pc, #208]	; (80015c0 <HAL_ETH_MspInit+0x178>)
 80014ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f0:	f003 0301 	and.w	r3, r3, #1
 80014f4:	613b      	str	r3, [r7, #16]
 80014f6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014f8:	2300      	movs	r3, #0
 80014fa:	60fb      	str	r3, [r7, #12]
 80014fc:	4b30      	ldr	r3, [pc, #192]	; (80015c0 <HAL_ETH_MspInit+0x178>)
 80014fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001500:	4a2f      	ldr	r2, [pc, #188]	; (80015c0 <HAL_ETH_MspInit+0x178>)
 8001502:	f043 0302 	orr.w	r3, r3, #2
 8001506:	6313      	str	r3, [r2, #48]	; 0x30
 8001508:	4b2d      	ldr	r3, [pc, #180]	; (80015c0 <HAL_ETH_MspInit+0x178>)
 800150a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150c:	f003 0302 	and.w	r3, r3, #2
 8001510:	60fb      	str	r3, [r7, #12]
 8001512:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001514:	2300      	movs	r3, #0
 8001516:	60bb      	str	r3, [r7, #8]
 8001518:	4b29      	ldr	r3, [pc, #164]	; (80015c0 <HAL_ETH_MspInit+0x178>)
 800151a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151c:	4a28      	ldr	r2, [pc, #160]	; (80015c0 <HAL_ETH_MspInit+0x178>)
 800151e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001522:	6313      	str	r3, [r2, #48]	; 0x30
 8001524:	4b26      	ldr	r3, [pc, #152]	; (80015c0 <HAL_ETH_MspInit+0x178>)
 8001526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001528:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800152c:	60bb      	str	r3, [r7, #8]
 800152e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001530:	2332      	movs	r3, #50	; 0x32
 8001532:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001534:	2302      	movs	r3, #2
 8001536:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001538:	2300      	movs	r3, #0
 800153a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800153c:	2303      	movs	r3, #3
 800153e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001540:	230b      	movs	r3, #11
 8001542:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001544:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001548:	4619      	mov	r1, r3
 800154a:	481e      	ldr	r0, [pc, #120]	; (80015c4 <HAL_ETH_MspInit+0x17c>)
 800154c:	f000 fe2c 	bl	80021a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001550:	2386      	movs	r3, #134	; 0x86
 8001552:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001554:	2302      	movs	r3, #2
 8001556:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001558:	2300      	movs	r3, #0
 800155a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800155c:	2303      	movs	r3, #3
 800155e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001560:	230b      	movs	r3, #11
 8001562:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001564:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001568:	4619      	mov	r1, r3
 800156a:	4817      	ldr	r0, [pc, #92]	; (80015c8 <HAL_ETH_MspInit+0x180>)
 800156c:	f000 fe1c 	bl	80021a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001570:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001574:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001576:	2302      	movs	r3, #2
 8001578:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157a:	2300      	movs	r3, #0
 800157c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800157e:	2303      	movs	r3, #3
 8001580:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001582:	230b      	movs	r3, #11
 8001584:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001586:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800158a:	4619      	mov	r1, r3
 800158c:	480f      	ldr	r0, [pc, #60]	; (80015cc <HAL_ETH_MspInit+0x184>)
 800158e:	f000 fe0b 	bl	80021a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001592:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001596:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001598:	2302      	movs	r3, #2
 800159a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159c:	2300      	movs	r3, #0
 800159e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015a0:	2303      	movs	r3, #3
 80015a2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80015a4:	230b      	movs	r3, #11
 80015a6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80015a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015ac:	4619      	mov	r1, r3
 80015ae:	4808      	ldr	r0, [pc, #32]	; (80015d0 <HAL_ETH_MspInit+0x188>)
 80015b0:	f000 fdfa 	bl	80021a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80015b4:	bf00      	nop
 80015b6:	3738      	adds	r7, #56	; 0x38
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	40028000 	.word	0x40028000
 80015c0:	40023800 	.word	0x40023800
 80015c4:	40020800 	.word	0x40020800
 80015c8:	40020000 	.word	0x40020000
 80015cc:	40020400 	.word	0x40020400
 80015d0:	40021800 	.word	0x40021800

080015d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b08a      	sub	sp, #40	; 0x28
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015dc:	f107 0314 	add.w	r3, r7, #20
 80015e0:	2200      	movs	r2, #0
 80015e2:	601a      	str	r2, [r3, #0]
 80015e4:	605a      	str	r2, [r3, #4]
 80015e6:	609a      	str	r2, [r3, #8]
 80015e8:	60da      	str	r2, [r3, #12]
 80015ea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a19      	ldr	r2, [pc, #100]	; (8001658 <HAL_UART_MspInit+0x84>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d12c      	bne.n	8001650 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80015f6:	2300      	movs	r3, #0
 80015f8:	613b      	str	r3, [r7, #16]
 80015fa:	4b18      	ldr	r3, [pc, #96]	; (800165c <HAL_UART_MspInit+0x88>)
 80015fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fe:	4a17      	ldr	r2, [pc, #92]	; (800165c <HAL_UART_MspInit+0x88>)
 8001600:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001604:	6413      	str	r3, [r2, #64]	; 0x40
 8001606:	4b15      	ldr	r3, [pc, #84]	; (800165c <HAL_UART_MspInit+0x88>)
 8001608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800160e:	613b      	str	r3, [r7, #16]
 8001610:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001612:	2300      	movs	r3, #0
 8001614:	60fb      	str	r3, [r7, #12]
 8001616:	4b11      	ldr	r3, [pc, #68]	; (800165c <HAL_UART_MspInit+0x88>)
 8001618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161a:	4a10      	ldr	r2, [pc, #64]	; (800165c <HAL_UART_MspInit+0x88>)
 800161c:	f043 0308 	orr.w	r3, r3, #8
 8001620:	6313      	str	r3, [r2, #48]	; 0x30
 8001622:	4b0e      	ldr	r3, [pc, #56]	; (800165c <HAL_UART_MspInit+0x88>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001626:	f003 0308 	and.w	r3, r3, #8
 800162a:	60fb      	str	r3, [r7, #12]
 800162c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800162e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001632:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001634:	2302      	movs	r3, #2
 8001636:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001638:	2300      	movs	r3, #0
 800163a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800163c:	2303      	movs	r3, #3
 800163e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001640:	2307      	movs	r3, #7
 8001642:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001644:	f107 0314 	add.w	r3, r7, #20
 8001648:	4619      	mov	r1, r3
 800164a:	4805      	ldr	r0, [pc, #20]	; (8001660 <HAL_UART_MspInit+0x8c>)
 800164c:	f000 fdac 	bl	80021a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001650:	bf00      	nop
 8001652:	3728      	adds	r7, #40	; 0x28
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	40004800 	.word	0x40004800
 800165c:	40023800 	.word	0x40023800
 8001660:	40020c00 	.word	0x40020c00

08001664 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b08a      	sub	sp, #40	; 0x28
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800166c:	f107 0314 	add.w	r3, r7, #20
 8001670:	2200      	movs	r2, #0
 8001672:	601a      	str	r2, [r3, #0]
 8001674:	605a      	str	r2, [r3, #4]
 8001676:	609a      	str	r2, [r3, #8]
 8001678:	60da      	str	r2, [r3, #12]
 800167a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001684:	d13f      	bne.n	8001706 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001686:	2300      	movs	r3, #0
 8001688:	613b      	str	r3, [r7, #16]
 800168a:	4b21      	ldr	r3, [pc, #132]	; (8001710 <HAL_PCD_MspInit+0xac>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168e:	4a20      	ldr	r2, [pc, #128]	; (8001710 <HAL_PCD_MspInit+0xac>)
 8001690:	f043 0301 	orr.w	r3, r3, #1
 8001694:	6313      	str	r3, [r2, #48]	; 0x30
 8001696:	4b1e      	ldr	r3, [pc, #120]	; (8001710 <HAL_PCD_MspInit+0xac>)
 8001698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169a:	f003 0301 	and.w	r3, r3, #1
 800169e:	613b      	str	r3, [r7, #16]
 80016a0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80016a2:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80016a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a8:	2302      	movs	r3, #2
 80016aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ac:	2300      	movs	r3, #0
 80016ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016b0:	2303      	movs	r3, #3
 80016b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80016b4:	230a      	movs	r3, #10
 80016b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016b8:	f107 0314 	add.w	r3, r7, #20
 80016bc:	4619      	mov	r1, r3
 80016be:	4815      	ldr	r0, [pc, #84]	; (8001714 <HAL_PCD_MspInit+0xb0>)
 80016c0:	f000 fd72 	bl	80021a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80016c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016ca:	2300      	movs	r3, #0
 80016cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ce:	2300      	movs	r3, #0
 80016d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80016d2:	f107 0314 	add.w	r3, r7, #20
 80016d6:	4619      	mov	r1, r3
 80016d8:	480e      	ldr	r0, [pc, #56]	; (8001714 <HAL_PCD_MspInit+0xb0>)
 80016da:	f000 fd65 	bl	80021a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80016de:	4b0c      	ldr	r3, [pc, #48]	; (8001710 <HAL_PCD_MspInit+0xac>)
 80016e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016e2:	4a0b      	ldr	r2, [pc, #44]	; (8001710 <HAL_PCD_MspInit+0xac>)
 80016e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016e8:	6353      	str	r3, [r2, #52]	; 0x34
 80016ea:	2300      	movs	r3, #0
 80016ec:	60fb      	str	r3, [r7, #12]
 80016ee:	4b08      	ldr	r3, [pc, #32]	; (8001710 <HAL_PCD_MspInit+0xac>)
 80016f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016f2:	4a07      	ldr	r2, [pc, #28]	; (8001710 <HAL_PCD_MspInit+0xac>)
 80016f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016f8:	6453      	str	r3, [r2, #68]	; 0x44
 80016fa:	4b05      	ldr	r3, [pc, #20]	; (8001710 <HAL_PCD_MspInit+0xac>)
 80016fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001702:	60fb      	str	r3, [r7, #12]
 8001704:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001706:	bf00      	nop
 8001708:	3728      	adds	r7, #40	; 0x28
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	40023800 	.word	0x40023800
 8001714:	40020000 	.word	0x40020000

08001718 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b08e      	sub	sp, #56	; 0x38
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001720:	2300      	movs	r3, #0
 8001722:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001724:	2300      	movs	r3, #0
 8001726:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001728:	2300      	movs	r3, #0
 800172a:	60fb      	str	r3, [r7, #12]
 800172c:	4b33      	ldr	r3, [pc, #204]	; (80017fc <HAL_InitTick+0xe4>)
 800172e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001730:	4a32      	ldr	r2, [pc, #200]	; (80017fc <HAL_InitTick+0xe4>)
 8001732:	f043 0310 	orr.w	r3, r3, #16
 8001736:	6413      	str	r3, [r2, #64]	; 0x40
 8001738:	4b30      	ldr	r3, [pc, #192]	; (80017fc <HAL_InitTick+0xe4>)
 800173a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173c:	f003 0310 	and.w	r3, r3, #16
 8001740:	60fb      	str	r3, [r7, #12]
 8001742:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001744:	f107 0210 	add.w	r2, r7, #16
 8001748:	f107 0314 	add.w	r3, r7, #20
 800174c:	4611      	mov	r1, r2
 800174e:	4618      	mov	r0, r3
 8001750:	f001 fca4 	bl	800309c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001754:	6a3b      	ldr	r3, [r7, #32]
 8001756:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800175a:	2b00      	cmp	r3, #0
 800175c:	d103      	bne.n	8001766 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800175e:	f001 fc75 	bl	800304c <HAL_RCC_GetPCLK1Freq>
 8001762:	6378      	str	r0, [r7, #52]	; 0x34
 8001764:	e004      	b.n	8001770 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001766:	f001 fc71 	bl	800304c <HAL_RCC_GetPCLK1Freq>
 800176a:	4603      	mov	r3, r0
 800176c:	005b      	lsls	r3, r3, #1
 800176e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001770:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001772:	4a23      	ldr	r2, [pc, #140]	; (8001800 <HAL_InitTick+0xe8>)
 8001774:	fba2 2303 	umull	r2, r3, r2, r3
 8001778:	0c9b      	lsrs	r3, r3, #18
 800177a:	3b01      	subs	r3, #1
 800177c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800177e:	4b21      	ldr	r3, [pc, #132]	; (8001804 <HAL_InitTick+0xec>)
 8001780:	4a21      	ldr	r2, [pc, #132]	; (8001808 <HAL_InitTick+0xf0>)
 8001782:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001784:	4b1f      	ldr	r3, [pc, #124]	; (8001804 <HAL_InitTick+0xec>)
 8001786:	f240 32e7 	movw	r2, #999	; 0x3e7
 800178a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800178c:	4a1d      	ldr	r2, [pc, #116]	; (8001804 <HAL_InitTick+0xec>)
 800178e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001790:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001792:	4b1c      	ldr	r3, [pc, #112]	; (8001804 <HAL_InitTick+0xec>)
 8001794:	2200      	movs	r2, #0
 8001796:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001798:	4b1a      	ldr	r3, [pc, #104]	; (8001804 <HAL_InitTick+0xec>)
 800179a:	2200      	movs	r2, #0
 800179c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800179e:	4b19      	ldr	r3, [pc, #100]	; (8001804 <HAL_InitTick+0xec>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80017a4:	4817      	ldr	r0, [pc, #92]	; (8001804 <HAL_InitTick+0xec>)
 80017a6:	f001 fcab 	bl	8003100 <HAL_TIM_Base_Init>
 80017aa:	4603      	mov	r3, r0
 80017ac:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80017b0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d11b      	bne.n	80017f0 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80017b8:	4812      	ldr	r0, [pc, #72]	; (8001804 <HAL_InitTick+0xec>)
 80017ba:	f001 fcfb 	bl	80031b4 <HAL_TIM_Base_Start_IT>
 80017be:	4603      	mov	r3, r0
 80017c0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80017c4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d111      	bne.n	80017f0 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80017cc:	2036      	movs	r0, #54	; 0x36
 80017ce:	f000 f9b5 	bl	8001b3c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2b0f      	cmp	r3, #15
 80017d6:	d808      	bhi.n	80017ea <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80017d8:	2200      	movs	r2, #0
 80017da:	6879      	ldr	r1, [r7, #4]
 80017dc:	2036      	movs	r0, #54	; 0x36
 80017de:	f000 f991 	bl	8001b04 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80017e2:	4a0a      	ldr	r2, [pc, #40]	; (800180c <HAL_InitTick+0xf4>)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6013      	str	r3, [r2, #0]
 80017e8:	e002      	b.n	80017f0 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80017f0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	3738      	adds	r7, #56	; 0x38
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	40023800 	.word	0x40023800
 8001800:	431bde83 	.word	0x431bde83
 8001804:	20000cb8 	.word	0x20000cb8
 8001808:	40001000 	.word	0x40001000
 800180c:	20000004 	.word	0x20000004

08001810 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001814:	e7fe      	b.n	8001814 <NMI_Handler+0x4>

08001816 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001816:	b480      	push	{r7}
 8001818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800181a:	e7fe      	b.n	800181a <HardFault_Handler+0x4>

0800181c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001820:	e7fe      	b.n	8001820 <MemManage_Handler+0x4>

08001822 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001822:	b480      	push	{r7}
 8001824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001826:	e7fe      	b.n	8001826 <BusFault_Handler+0x4>

08001828 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800182c:	e7fe      	b.n	800182c <UsageFault_Handler+0x4>

0800182e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800182e:	b480      	push	{r7}
 8001830:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001832:	bf00      	nop
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr

0800183c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001840:	4802      	ldr	r0, [pc, #8]	; (800184c <TIM6_DAC_IRQHandler+0x10>)
 8001842:	f001 fd27 	bl	8003294 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001846:	bf00      	nop
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	20000cb8 	.word	0x20000cb8

08001850 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001854:	4b06      	ldr	r3, [pc, #24]	; (8001870 <SystemInit+0x20>)
 8001856:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800185a:	4a05      	ldr	r2, [pc, #20]	; (8001870 <SystemInit+0x20>)
 800185c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001860:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001864:	bf00      	nop
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop
 8001870:	e000ed00 	.word	0xe000ed00

08001874 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001874:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018ac <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001878:	480d      	ldr	r0, [pc, #52]	; (80018b0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800187a:	490e      	ldr	r1, [pc, #56]	; (80018b4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800187c:	4a0e      	ldr	r2, [pc, #56]	; (80018b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800187e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001880:	e002      	b.n	8001888 <LoopCopyDataInit>

08001882 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001882:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001884:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001886:	3304      	adds	r3, #4

08001888 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001888:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800188a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800188c:	d3f9      	bcc.n	8001882 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800188e:	4a0b      	ldr	r2, [pc, #44]	; (80018bc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001890:	4c0b      	ldr	r4, [pc, #44]	; (80018c0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001892:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001894:	e001      	b.n	800189a <LoopFillZerobss>

08001896 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001896:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001898:	3204      	adds	r2, #4

0800189a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800189a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800189c:	d3fb      	bcc.n	8001896 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800189e:	f7ff ffd7 	bl	8001850 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018a2:	f005 fb19 	bl	8006ed8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018a6:	f7ff fb8f 	bl	8000fc8 <main>
  bx  lr    
 80018aa:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80018ac:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80018b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018b4:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80018b8:	080070e4 	.word	0x080070e4
  ldr r2, =_sbss
 80018bc:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80018c0:	2000583c 	.word	0x2000583c

080018c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018c4:	e7fe      	b.n	80018c4 <ADC_IRQHandler>
	...

080018c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018cc:	4b0e      	ldr	r3, [pc, #56]	; (8001908 <HAL_Init+0x40>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a0d      	ldr	r2, [pc, #52]	; (8001908 <HAL_Init+0x40>)
 80018d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018d8:	4b0b      	ldr	r3, [pc, #44]	; (8001908 <HAL_Init+0x40>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a0a      	ldr	r2, [pc, #40]	; (8001908 <HAL_Init+0x40>)
 80018de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018e4:	4b08      	ldr	r3, [pc, #32]	; (8001908 <HAL_Init+0x40>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a07      	ldr	r2, [pc, #28]	; (8001908 <HAL_Init+0x40>)
 80018ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018f0:	2003      	movs	r0, #3
 80018f2:	f000 f8fc 	bl	8001aee <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018f6:	200f      	movs	r0, #15
 80018f8:	f7ff ff0e 	bl	8001718 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018fc:	f7ff fd78 	bl	80013f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001900:	2300      	movs	r3, #0
}
 8001902:	4618      	mov	r0, r3
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	40023c00 	.word	0x40023c00

0800190c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001910:	4b06      	ldr	r3, [pc, #24]	; (800192c <HAL_IncTick+0x20>)
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	461a      	mov	r2, r3
 8001916:	4b06      	ldr	r3, [pc, #24]	; (8001930 <HAL_IncTick+0x24>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4413      	add	r3, r2
 800191c:	4a04      	ldr	r2, [pc, #16]	; (8001930 <HAL_IncTick+0x24>)
 800191e:	6013      	str	r3, [r2, #0]
}
 8001920:	bf00      	nop
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	20000008 	.word	0x20000008
 8001930:	20000d00 	.word	0x20000d00

08001934 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  return uwTick;
 8001938:	4b03      	ldr	r3, [pc, #12]	; (8001948 <HAL_GetTick+0x14>)
 800193a:	681b      	ldr	r3, [r3, #0]
}
 800193c:	4618      	mov	r0, r3
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	20000d00 	.word	0x20000d00

0800194c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b084      	sub	sp, #16
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001954:	f7ff ffee 	bl	8001934 <HAL_GetTick>
 8001958:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001964:	d005      	beq.n	8001972 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001966:	4b0a      	ldr	r3, [pc, #40]	; (8001990 <HAL_Delay+0x44>)
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	461a      	mov	r2, r3
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	4413      	add	r3, r2
 8001970:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001972:	bf00      	nop
 8001974:	f7ff ffde 	bl	8001934 <HAL_GetTick>
 8001978:	4602      	mov	r2, r0
 800197a:	68bb      	ldr	r3, [r7, #8]
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	68fa      	ldr	r2, [r7, #12]
 8001980:	429a      	cmp	r2, r3
 8001982:	d8f7      	bhi.n	8001974 <HAL_Delay+0x28>
  {
  }
}
 8001984:	bf00      	nop
 8001986:	bf00      	nop
 8001988:	3710      	adds	r7, #16
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	20000008 	.word	0x20000008

08001994 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001994:	b480      	push	{r7}
 8001996:	b085      	sub	sp, #20
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	f003 0307 	and.w	r3, r3, #7
 80019a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019a4:	4b0c      	ldr	r3, [pc, #48]	; (80019d8 <__NVIC_SetPriorityGrouping+0x44>)
 80019a6:	68db      	ldr	r3, [r3, #12]
 80019a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019aa:	68ba      	ldr	r2, [r7, #8]
 80019ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019b0:	4013      	ands	r3, r2
 80019b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019c6:	4a04      	ldr	r2, [pc, #16]	; (80019d8 <__NVIC_SetPriorityGrouping+0x44>)
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	60d3      	str	r3, [r2, #12]
}
 80019cc:	bf00      	nop
 80019ce:	3714      	adds	r7, #20
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr
 80019d8:	e000ed00 	.word	0xe000ed00

080019dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019e0:	4b04      	ldr	r3, [pc, #16]	; (80019f4 <__NVIC_GetPriorityGrouping+0x18>)
 80019e2:	68db      	ldr	r3, [r3, #12]
 80019e4:	0a1b      	lsrs	r3, r3, #8
 80019e6:	f003 0307 	and.w	r3, r3, #7
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr
 80019f4:	e000ed00 	.word	0xe000ed00

080019f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	4603      	mov	r3, r0
 8001a00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	db0b      	blt.n	8001a22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a0a:	79fb      	ldrb	r3, [r7, #7]
 8001a0c:	f003 021f 	and.w	r2, r3, #31
 8001a10:	4907      	ldr	r1, [pc, #28]	; (8001a30 <__NVIC_EnableIRQ+0x38>)
 8001a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a16:	095b      	lsrs	r3, r3, #5
 8001a18:	2001      	movs	r0, #1
 8001a1a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a22:	bf00      	nop
 8001a24:	370c      	adds	r7, #12
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	e000e100 	.word	0xe000e100

08001a34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	6039      	str	r1, [r7, #0]
 8001a3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	db0a      	blt.n	8001a5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	b2da      	uxtb	r2, r3
 8001a4c:	490c      	ldr	r1, [pc, #48]	; (8001a80 <__NVIC_SetPriority+0x4c>)
 8001a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a52:	0112      	lsls	r2, r2, #4
 8001a54:	b2d2      	uxtb	r2, r2
 8001a56:	440b      	add	r3, r1
 8001a58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a5c:	e00a      	b.n	8001a74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	b2da      	uxtb	r2, r3
 8001a62:	4908      	ldr	r1, [pc, #32]	; (8001a84 <__NVIC_SetPriority+0x50>)
 8001a64:	79fb      	ldrb	r3, [r7, #7]
 8001a66:	f003 030f 	and.w	r3, r3, #15
 8001a6a:	3b04      	subs	r3, #4
 8001a6c:	0112      	lsls	r2, r2, #4
 8001a6e:	b2d2      	uxtb	r2, r2
 8001a70:	440b      	add	r3, r1
 8001a72:	761a      	strb	r2, [r3, #24]
}
 8001a74:	bf00      	nop
 8001a76:	370c      	adds	r7, #12
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr
 8001a80:	e000e100 	.word	0xe000e100
 8001a84:	e000ed00 	.word	0xe000ed00

08001a88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b089      	sub	sp, #36	; 0x24
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	60f8      	str	r0, [r7, #12]
 8001a90:	60b9      	str	r1, [r7, #8]
 8001a92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	f003 0307 	and.w	r3, r3, #7
 8001a9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a9c:	69fb      	ldr	r3, [r7, #28]
 8001a9e:	f1c3 0307 	rsb	r3, r3, #7
 8001aa2:	2b04      	cmp	r3, #4
 8001aa4:	bf28      	it	cs
 8001aa6:	2304      	movcs	r3, #4
 8001aa8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	3304      	adds	r3, #4
 8001aae:	2b06      	cmp	r3, #6
 8001ab0:	d902      	bls.n	8001ab8 <NVIC_EncodePriority+0x30>
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	3b03      	subs	r3, #3
 8001ab6:	e000      	b.n	8001aba <NVIC_EncodePriority+0x32>
 8001ab8:	2300      	movs	r3, #0
 8001aba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001abc:	f04f 32ff 	mov.w	r2, #4294967295
 8001ac0:	69bb      	ldr	r3, [r7, #24]
 8001ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac6:	43da      	mvns	r2, r3
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	401a      	ands	r2, r3
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ad0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	fa01 f303 	lsl.w	r3, r1, r3
 8001ada:	43d9      	mvns	r1, r3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ae0:	4313      	orrs	r3, r2
         );
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3724      	adds	r7, #36	; 0x24
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr

08001aee <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aee:	b580      	push	{r7, lr}
 8001af0:	b082      	sub	sp, #8
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	f7ff ff4c 	bl	8001994 <__NVIC_SetPriorityGrouping>
}
 8001afc:	bf00      	nop
 8001afe:	3708      	adds	r7, #8
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}

08001b04 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b086      	sub	sp, #24
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	60b9      	str	r1, [r7, #8]
 8001b0e:	607a      	str	r2, [r7, #4]
 8001b10:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b12:	2300      	movs	r3, #0
 8001b14:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b16:	f7ff ff61 	bl	80019dc <__NVIC_GetPriorityGrouping>
 8001b1a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b1c:	687a      	ldr	r2, [r7, #4]
 8001b1e:	68b9      	ldr	r1, [r7, #8]
 8001b20:	6978      	ldr	r0, [r7, #20]
 8001b22:	f7ff ffb1 	bl	8001a88 <NVIC_EncodePriority>
 8001b26:	4602      	mov	r2, r0
 8001b28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b2c:	4611      	mov	r1, r2
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f7ff ff80 	bl	8001a34 <__NVIC_SetPriority>
}
 8001b34:	bf00      	nop
 8001b36:	3718      	adds	r7, #24
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}

08001b3c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	4603      	mov	r3, r0
 8001b44:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f7ff ff54 	bl	80019f8 <__NVIC_EnableIRQ>
}
 8001b50:	bf00      	nop
 8001b52:	3708      	adds	r7, #8
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}

08001b58 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b084      	sub	sp, #16
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d101      	bne.n	8001b6a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e06c      	b.n	8001c44 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d106      	bne.n	8001b82 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2223      	movs	r2, #35	; 0x23
 8001b78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	f7ff fc63 	bl	8001448 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b82:	2300      	movs	r3, #0
 8001b84:	60bb      	str	r3, [r7, #8]
 8001b86:	4b31      	ldr	r3, [pc, #196]	; (8001c4c <HAL_ETH_Init+0xf4>)
 8001b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b8a:	4a30      	ldr	r2, [pc, #192]	; (8001c4c <HAL_ETH_Init+0xf4>)
 8001b8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b90:	6453      	str	r3, [r2, #68]	; 0x44
 8001b92:	4b2e      	ldr	r3, [pc, #184]	; (8001c4c <HAL_ETH_Init+0xf4>)
 8001b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b9a:	60bb      	str	r3, [r7, #8]
 8001b9c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001b9e:	4b2c      	ldr	r3, [pc, #176]	; (8001c50 <HAL_ETH_Init+0xf8>)
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	4a2b      	ldr	r2, [pc, #172]	; (8001c50 <HAL_ETH_Init+0xf8>)
 8001ba4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001ba8:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001baa:	4b29      	ldr	r3, [pc, #164]	; (8001c50 <HAL_ETH_Init+0xf8>)
 8001bac:	685a      	ldr	r2, [r3, #4]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	4927      	ldr	r1, [pc, #156]	; (8001c50 <HAL_ETH_Init+0xf8>)
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001bb8:	4b25      	ldr	r3, [pc, #148]	; (8001c50 <HAL_ETH_Init+0xf8>)
 8001bba:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	687a      	ldr	r2, [r7, #4]
 8001bc8:	6812      	ldr	r2, [r2, #0]
 8001bca:	f043 0301 	orr.w	r3, r3, #1
 8001bce:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001bd2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001bd4:	f7ff feae 	bl	8001934 <HAL_GetTick>
 8001bd8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001bda:	e011      	b.n	8001c00 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001bdc:	f7ff feaa 	bl	8001934 <HAL_GetTick>
 8001be0:	4602      	mov	r2, r0
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001bea:	d909      	bls.n	8001c00 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2204      	movs	r2, #4
 8001bf0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	22e0      	movs	r2, #224	; 0xe0
 8001bf8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	e021      	b.n	8001c44 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 0301 	and.w	r3, r3, #1
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d1e4      	bne.n	8001bdc <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f000 f958 	bl	8001ec8 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001c18:	6878      	ldr	r0, [r7, #4]
 8001c1a:	f000 f9ff 	bl	800201c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f000 fa55 	bl	80020ce <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	461a      	mov	r2, r3
 8001c2a:	2100      	movs	r1, #0
 8001c2c:	6878      	ldr	r0, [r7, #4]
 8001c2e:	f000 f9bd 	bl	8001fac <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2200      	movs	r2, #0
 8001c36:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2210      	movs	r2, #16
 8001c3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001c42:	2300      	movs	r3, #0
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	3710      	adds	r7, #16
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	40023800 	.word	0x40023800
 8001c50:	40013800 	.word	0x40013800

08001c54 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b084      	sub	sp, #16
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
 8001c5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001c66:	68fa      	ldr	r2, [r7, #12]
 8001c68:	4b51      	ldr	r3, [pc, #324]	; (8001db0 <ETH_SetMACConfig+0x15c>)
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	7c1b      	ldrb	r3, [r3, #16]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d102      	bne.n	8001c7c <ETH_SetMACConfig+0x28>
 8001c76:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001c7a:	e000      	b.n	8001c7e <ETH_SetMACConfig+0x2a>
 8001c7c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	7c5b      	ldrb	r3, [r3, #17]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d102      	bne.n	8001c8c <ETH_SetMACConfig+0x38>
 8001c86:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c8a:	e000      	b.n	8001c8e <ETH_SetMACConfig+0x3a>
 8001c8c:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001c8e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001c94:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	7fdb      	ldrb	r3, [r3, #31]
 8001c9a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001c9c:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001ca2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001ca4:	683a      	ldr	r2, [r7, #0]
 8001ca6:	7f92      	ldrb	r2, [r2, #30]
 8001ca8:	2a00      	cmp	r2, #0
 8001caa:	d102      	bne.n	8001cb2 <ETH_SetMACConfig+0x5e>
 8001cac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001cb0:	e000      	b.n	8001cb4 <ETH_SetMACConfig+0x60>
 8001cb2:	2200      	movs	r2, #0
                        macconf->Speed |
 8001cb4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	7f1b      	ldrb	r3, [r3, #28]
 8001cba:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001cbc:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001cc2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	791b      	ldrb	r3, [r3, #4]
 8001cc8:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001cca:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001ccc:	683a      	ldr	r2, [r7, #0]
 8001cce:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001cd2:	2a00      	cmp	r2, #0
 8001cd4:	d102      	bne.n	8001cdc <ETH_SetMACConfig+0x88>
 8001cd6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cda:	e000      	b.n	8001cde <ETH_SetMACConfig+0x8a>
 8001cdc:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001cde:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	7bdb      	ldrb	r3, [r3, #15]
 8001ce4:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001ce6:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001cec:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001cf4:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	68fa      	ldr	r2, [r7, #12]
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	68fa      	ldr	r2, [r7, #12]
 8001d04:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d0e:	2001      	movs	r0, #1
 8001d10:	f7ff fe1c 	bl	800194c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	68fa      	ldr	r2, [r7, #12]
 8001d1a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	699b      	ldr	r3, [r3, #24]
 8001d22:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001d24:	68fa      	ldr	r2, [r7, #12]
 8001d26:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d32:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001d34:	683a      	ldr	r2, [r7, #0]
 8001d36:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001d3a:	2a00      	cmp	r2, #0
 8001d3c:	d101      	bne.n	8001d42 <ETH_SetMACConfig+0xee>
 8001d3e:	2280      	movs	r2, #128	; 0x80
 8001d40:	e000      	b.n	8001d44 <ETH_SetMACConfig+0xf0>
 8001d42:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001d44:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001d4a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001d4c:	683a      	ldr	r2, [r7, #0]
 8001d4e:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8001d52:	2a01      	cmp	r2, #1
 8001d54:	d101      	bne.n	8001d5a <ETH_SetMACConfig+0x106>
 8001d56:	2208      	movs	r2, #8
 8001d58:	e000      	b.n	8001d5c <ETH_SetMACConfig+0x108>
 8001d5a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001d5c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001d5e:	683a      	ldr	r2, [r7, #0]
 8001d60:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8001d64:	2a01      	cmp	r2, #1
 8001d66:	d101      	bne.n	8001d6c <ETH_SetMACConfig+0x118>
 8001d68:	2204      	movs	r2, #4
 8001d6a:	e000      	b.n	8001d6e <ETH_SetMACConfig+0x11a>
 8001d6c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001d6e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001d70:	683a      	ldr	r2, [r7, #0]
 8001d72:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8001d76:	2a01      	cmp	r2, #1
 8001d78:	d101      	bne.n	8001d7e <ETH_SetMACConfig+0x12a>
 8001d7a:	2202      	movs	r2, #2
 8001d7c:	e000      	b.n	8001d80 <ETH_SetMACConfig+0x12c>
 8001d7e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001d80:	4313      	orrs	r3, r2
 8001d82:	68fa      	ldr	r2, [r7, #12]
 8001d84:	4313      	orrs	r3, r2
 8001d86:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	68fa      	ldr	r2, [r7, #12]
 8001d8e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	699b      	ldr	r3, [r3, #24]
 8001d96:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d98:	2001      	movs	r0, #1
 8001d9a:	f7ff fdd7 	bl	800194c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	68fa      	ldr	r2, [r7, #12]
 8001da4:	619a      	str	r2, [r3, #24]
}
 8001da6:	bf00      	nop
 8001da8:	3710      	adds	r7, #16
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	ff20810f 	.word	0xff20810f

08001db4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b084      	sub	sp, #16
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dc6:	699b      	ldr	r3, [r3, #24]
 8001dc8:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001dca:	68fa      	ldr	r2, [r7, #12]
 8001dcc:	4b3d      	ldr	r3, [pc, #244]	; (8001ec4 <ETH_SetDMAConfig+0x110>)
 8001dce:	4013      	ands	r3, r2
 8001dd0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	7b1b      	ldrb	r3, [r3, #12]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d102      	bne.n	8001de0 <ETH_SetDMAConfig+0x2c>
 8001dda:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001dde:	e000      	b.n	8001de2 <ETH_SetDMAConfig+0x2e>
 8001de0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	7b5b      	ldrb	r3, [r3, #13]
 8001de6:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001de8:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001dea:	683a      	ldr	r2, [r7, #0]
 8001dec:	7f52      	ldrb	r2, [r2, #29]
 8001dee:	2a00      	cmp	r2, #0
 8001df0:	d102      	bne.n	8001df8 <ETH_SetDMAConfig+0x44>
 8001df2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001df6:	e000      	b.n	8001dfa <ETH_SetDMAConfig+0x46>
 8001df8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001dfa:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	7b9b      	ldrb	r3, [r3, #14]
 8001e00:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001e02:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001e08:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	7f1b      	ldrb	r3, [r3, #28]
 8001e0e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001e10:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	7f9b      	ldrb	r3, [r3, #30]
 8001e16:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001e18:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001e1e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e26:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	68fa      	ldr	r2, [r7, #12]
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e38:	461a      	mov	r2, r3
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e46:	699b      	ldr	r3, [r3, #24]
 8001e48:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e4a:	2001      	movs	r0, #1
 8001e4c:	f7ff fd7e 	bl	800194c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e58:	461a      	mov	r2, r3
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	791b      	ldrb	r3, [r3, #4]
 8001e62:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001e68:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001e6e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001e74:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001e7c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001e7e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e84:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001e86:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001e8c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001e8e:	687a      	ldr	r2, [r7, #4]
 8001e90:	6812      	ldr	r2, [r2, #0]
 8001e92:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001e96:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001e9a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ea8:	2001      	movs	r0, #1
 8001eaa:	f7ff fd4f 	bl	800194c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	6013      	str	r3, [r2, #0]
}
 8001ebc:	bf00      	nop
 8001ebe:	3710      	adds	r7, #16
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	f8de3f23 	.word	0xf8de3f23

08001ec8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b0a6      	sub	sp, #152	; 0x98
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001edc:	2300      	movs	r3, #0
 8001ede:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001eec:	2300      	movs	r3, #0
 8001eee:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001efe:	2300      	movs	r3, #0
 8001f00:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001f04:	2300      	movs	r3, #0
 8001f06:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001f12:	2300      	movs	r3, #0
 8001f14:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001f24:	2300      	movs	r3, #0
 8001f26:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001f2a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001f2e:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001f30:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001f34:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001f36:	2300      	movs	r3, #0
 8001f38:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001f3c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001f40:	4619      	mov	r1, r3
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f7ff fe86 	bl	8001c54 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001f50:	2301      	movs	r3, #1
 8001f52:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001f56:	2301      	movs	r3, #1
 8001f58:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001f64:	2300      	movs	r3, #0
 8001f66:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001f74:	2301      	movs	r3, #1
 8001f76:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001f78:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f7c:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001f7e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001f82:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001f84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f88:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001f90:	2300      	movs	r3, #0
 8001f92:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001f94:	2300      	movs	r3, #0
 8001f96:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001f98:	f107 0308 	add.w	r3, r7, #8
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f7ff ff08 	bl	8001db4 <ETH_SetDMAConfig>
}
 8001fa4:	bf00      	nop
 8001fa6:	3798      	adds	r7, #152	; 0x98
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}

08001fac <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b087      	sub	sp, #28
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	60f8      	str	r0, [r7, #12]
 8001fb4:	60b9      	str	r1, [r7, #8]
 8001fb6:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	3305      	adds	r3, #5
 8001fbc:	781b      	ldrb	r3, [r3, #0]
 8001fbe:	021b      	lsls	r3, r3, #8
 8001fc0:	687a      	ldr	r2, [r7, #4]
 8001fc2:	3204      	adds	r2, #4
 8001fc4:	7812      	ldrb	r2, [r2, #0]
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001fca:	68ba      	ldr	r2, [r7, #8]
 8001fcc:	4b11      	ldr	r3, [pc, #68]	; (8002014 <ETH_MACAddressConfig+0x68>)
 8001fce:	4413      	add	r3, r2
 8001fd0:	461a      	mov	r2, r3
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	3303      	adds	r3, #3
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	061a      	lsls	r2, r3, #24
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	3302      	adds	r3, #2
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	041b      	lsls	r3, r3, #16
 8001fe6:	431a      	orrs	r2, r3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	3301      	adds	r3, #1
 8001fec:	781b      	ldrb	r3, [r3, #0]
 8001fee:	021b      	lsls	r3, r3, #8
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	687a      	ldr	r2, [r7, #4]
 8001ff4:	7812      	ldrb	r2, [r2, #0]
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001ffa:	68ba      	ldr	r2, [r7, #8]
 8001ffc:	4b06      	ldr	r3, [pc, #24]	; (8002018 <ETH_MACAddressConfig+0x6c>)
 8001ffe:	4413      	add	r3, r2
 8002000:	461a      	mov	r2, r3
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	6013      	str	r3, [r2, #0]
}
 8002006:	bf00      	nop
 8002008:	371c      	adds	r7, #28
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
 8002012:	bf00      	nop
 8002014:	40028040 	.word	0x40028040
 8002018:	40028044 	.word	0x40028044

0800201c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800201c:	b480      	push	{r7}
 800201e:	b085      	sub	sp, #20
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002024:	2300      	movs	r3, #0
 8002026:	60fb      	str	r3, [r7, #12]
 8002028:	e03e      	b.n	80020a8 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	68d9      	ldr	r1, [r3, #12]
 800202e:	68fa      	ldr	r2, [r7, #12]
 8002030:	4613      	mov	r3, r2
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	4413      	add	r3, r2
 8002036:	00db      	lsls	r3, r3, #3
 8002038:	440b      	add	r3, r1
 800203a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	2200      	movs	r2, #0
 8002040:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	2200      	movs	r2, #0
 8002046:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	2200      	movs	r2, #0
 800204c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	2200      	movs	r2, #0
 8002052:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002054:	68b9      	ldr	r1, [r7, #8]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	68fa      	ldr	r2, [r7, #12]
 800205a:	3206      	adds	r2, #6
 800205c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2b02      	cmp	r3, #2
 8002070:	d80c      	bhi.n	800208c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	68d9      	ldr	r1, [r3, #12]
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	1c5a      	adds	r2, r3, #1
 800207a:	4613      	mov	r3, r2
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	4413      	add	r3, r2
 8002080:	00db      	lsls	r3, r3, #3
 8002082:	440b      	add	r3, r1
 8002084:	461a      	mov	r2, r3
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	60da      	str	r2, [r3, #12]
 800208a:	e004      	b.n	8002096 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	461a      	mov	r2, r3
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	3301      	adds	r3, #1
 80020a6:	60fb      	str	r3, [r7, #12]
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	2b03      	cmp	r3, #3
 80020ac:	d9bd      	bls.n	800202a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2200      	movs	r2, #0
 80020b2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	68da      	ldr	r2, [r3, #12]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020c0:	611a      	str	r2, [r3, #16]
}
 80020c2:	bf00      	nop
 80020c4:	3714      	adds	r7, #20
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr

080020ce <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80020ce:	b480      	push	{r7}
 80020d0:	b085      	sub	sp, #20
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80020d6:	2300      	movs	r3, #0
 80020d8:	60fb      	str	r3, [r7, #12]
 80020da:	e046      	b.n	800216a <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6919      	ldr	r1, [r3, #16]
 80020e0:	68fa      	ldr	r2, [r7, #12]
 80020e2:	4613      	mov	r3, r2
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	4413      	add	r3, r2
 80020e8:	00db      	lsls	r3, r3, #3
 80020ea:	440b      	add	r3, r1
 80020ec:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	2200      	movs	r2, #0
 80020f2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	2200      	movs	r2, #0
 80020f8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	2200      	movs	r2, #0
 80020fe:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	2200      	movs	r2, #0
 8002104:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	2200      	movs	r2, #0
 800210a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	2200      	movs	r2, #0
 8002110:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002118:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8002120:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800212e:	68b9      	ldr	r1, [r7, #8]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	68fa      	ldr	r2, [r7, #12]
 8002134:	3212      	adds	r2, #18
 8002136:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	2b02      	cmp	r3, #2
 800213e:	d80c      	bhi.n	800215a <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6919      	ldr	r1, [r3, #16]
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	1c5a      	adds	r2, r3, #1
 8002148:	4613      	mov	r3, r2
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	4413      	add	r3, r2
 800214e:	00db      	lsls	r3, r3, #3
 8002150:	440b      	add	r3, r1
 8002152:	461a      	mov	r2, r3
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	60da      	str	r2, [r3, #12]
 8002158:	e004      	b.n	8002164 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	691b      	ldr	r3, [r3, #16]
 800215e:	461a      	mov	r2, r3
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	3301      	adds	r3, #1
 8002168:	60fb      	str	r3, [r7, #12]
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	2b03      	cmp	r3, #3
 800216e:	d9b5      	bls.n	80020dc <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2200      	movs	r2, #0
 8002174:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2200      	movs	r2, #0
 800217a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2200      	movs	r2, #0
 8002180:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2200      	movs	r2, #0
 8002186:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2200      	movs	r2, #0
 800218c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	691a      	ldr	r2, [r3, #16]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800219a:	60da      	str	r2, [r3, #12]
}
 800219c:	bf00      	nop
 800219e:	3714      	adds	r7, #20
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr

080021a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b089      	sub	sp, #36	; 0x24
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021b2:	2300      	movs	r3, #0
 80021b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021b6:	2300      	movs	r3, #0
 80021b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021ba:	2300      	movs	r3, #0
 80021bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021be:	2300      	movs	r3, #0
 80021c0:	61fb      	str	r3, [r7, #28]
 80021c2:	e177      	b.n	80024b4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021c4:	2201      	movs	r2, #1
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	fa02 f303 	lsl.w	r3, r2, r3
 80021cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	697a      	ldr	r2, [r7, #20]
 80021d4:	4013      	ands	r3, r2
 80021d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80021d8:	693a      	ldr	r2, [r7, #16]
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	429a      	cmp	r2, r3
 80021de:	f040 8166 	bne.w	80024ae <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	f003 0303 	and.w	r3, r3, #3
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d005      	beq.n	80021fa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	d130      	bne.n	800225c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002200:	69fb      	ldr	r3, [r7, #28]
 8002202:	005b      	lsls	r3, r3, #1
 8002204:	2203      	movs	r2, #3
 8002206:	fa02 f303 	lsl.w	r3, r2, r3
 800220a:	43db      	mvns	r3, r3
 800220c:	69ba      	ldr	r2, [r7, #24]
 800220e:	4013      	ands	r3, r2
 8002210:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	68da      	ldr	r2, [r3, #12]
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	005b      	lsls	r3, r3, #1
 800221a:	fa02 f303 	lsl.w	r3, r2, r3
 800221e:	69ba      	ldr	r2, [r7, #24]
 8002220:	4313      	orrs	r3, r2
 8002222:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	69ba      	ldr	r2, [r7, #24]
 8002228:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002230:	2201      	movs	r2, #1
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	fa02 f303 	lsl.w	r3, r2, r3
 8002238:	43db      	mvns	r3, r3
 800223a:	69ba      	ldr	r2, [r7, #24]
 800223c:	4013      	ands	r3, r2
 800223e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	091b      	lsrs	r3, r3, #4
 8002246:	f003 0201 	and.w	r2, r3, #1
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	fa02 f303 	lsl.w	r3, r2, r3
 8002250:	69ba      	ldr	r2, [r7, #24]
 8002252:	4313      	orrs	r3, r2
 8002254:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	69ba      	ldr	r2, [r7, #24]
 800225a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f003 0303 	and.w	r3, r3, #3
 8002264:	2b03      	cmp	r3, #3
 8002266:	d017      	beq.n	8002298 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	005b      	lsls	r3, r3, #1
 8002272:	2203      	movs	r2, #3
 8002274:	fa02 f303 	lsl.w	r3, r2, r3
 8002278:	43db      	mvns	r3, r3
 800227a:	69ba      	ldr	r2, [r7, #24]
 800227c:	4013      	ands	r3, r2
 800227e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	689a      	ldr	r2, [r3, #8]
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	005b      	lsls	r3, r3, #1
 8002288:	fa02 f303 	lsl.w	r3, r2, r3
 800228c:	69ba      	ldr	r2, [r7, #24]
 800228e:	4313      	orrs	r3, r2
 8002290:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	69ba      	ldr	r2, [r7, #24]
 8002296:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f003 0303 	and.w	r3, r3, #3
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	d123      	bne.n	80022ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022a4:	69fb      	ldr	r3, [r7, #28]
 80022a6:	08da      	lsrs	r2, r3, #3
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	3208      	adds	r2, #8
 80022ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	f003 0307 	and.w	r3, r3, #7
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	220f      	movs	r2, #15
 80022bc:	fa02 f303 	lsl.w	r3, r2, r3
 80022c0:	43db      	mvns	r3, r3
 80022c2:	69ba      	ldr	r2, [r7, #24]
 80022c4:	4013      	ands	r3, r2
 80022c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	691a      	ldr	r2, [r3, #16]
 80022cc:	69fb      	ldr	r3, [r7, #28]
 80022ce:	f003 0307 	and.w	r3, r3, #7
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	fa02 f303 	lsl.w	r3, r2, r3
 80022d8:	69ba      	ldr	r2, [r7, #24]
 80022da:	4313      	orrs	r3, r2
 80022dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	08da      	lsrs	r2, r3, #3
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	3208      	adds	r2, #8
 80022e6:	69b9      	ldr	r1, [r7, #24]
 80022e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022f2:	69fb      	ldr	r3, [r7, #28]
 80022f4:	005b      	lsls	r3, r3, #1
 80022f6:	2203      	movs	r2, #3
 80022f8:	fa02 f303 	lsl.w	r3, r2, r3
 80022fc:	43db      	mvns	r3, r3
 80022fe:	69ba      	ldr	r2, [r7, #24]
 8002300:	4013      	ands	r3, r2
 8002302:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f003 0203 	and.w	r2, r3, #3
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	005b      	lsls	r3, r3, #1
 8002310:	fa02 f303 	lsl.w	r3, r2, r3
 8002314:	69ba      	ldr	r2, [r7, #24]
 8002316:	4313      	orrs	r3, r2
 8002318:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	69ba      	ldr	r2, [r7, #24]
 800231e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002328:	2b00      	cmp	r3, #0
 800232a:	f000 80c0 	beq.w	80024ae <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800232e:	2300      	movs	r3, #0
 8002330:	60fb      	str	r3, [r7, #12]
 8002332:	4b66      	ldr	r3, [pc, #408]	; (80024cc <HAL_GPIO_Init+0x324>)
 8002334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002336:	4a65      	ldr	r2, [pc, #404]	; (80024cc <HAL_GPIO_Init+0x324>)
 8002338:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800233c:	6453      	str	r3, [r2, #68]	; 0x44
 800233e:	4b63      	ldr	r3, [pc, #396]	; (80024cc <HAL_GPIO_Init+0x324>)
 8002340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002342:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002346:	60fb      	str	r3, [r7, #12]
 8002348:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800234a:	4a61      	ldr	r2, [pc, #388]	; (80024d0 <HAL_GPIO_Init+0x328>)
 800234c:	69fb      	ldr	r3, [r7, #28]
 800234e:	089b      	lsrs	r3, r3, #2
 8002350:	3302      	adds	r3, #2
 8002352:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002356:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002358:	69fb      	ldr	r3, [r7, #28]
 800235a:	f003 0303 	and.w	r3, r3, #3
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	220f      	movs	r2, #15
 8002362:	fa02 f303 	lsl.w	r3, r2, r3
 8002366:	43db      	mvns	r3, r3
 8002368:	69ba      	ldr	r2, [r7, #24]
 800236a:	4013      	ands	r3, r2
 800236c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4a58      	ldr	r2, [pc, #352]	; (80024d4 <HAL_GPIO_Init+0x32c>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d037      	beq.n	80023e6 <HAL_GPIO_Init+0x23e>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	4a57      	ldr	r2, [pc, #348]	; (80024d8 <HAL_GPIO_Init+0x330>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d031      	beq.n	80023e2 <HAL_GPIO_Init+0x23a>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	4a56      	ldr	r2, [pc, #344]	; (80024dc <HAL_GPIO_Init+0x334>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d02b      	beq.n	80023de <HAL_GPIO_Init+0x236>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	4a55      	ldr	r2, [pc, #340]	; (80024e0 <HAL_GPIO_Init+0x338>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d025      	beq.n	80023da <HAL_GPIO_Init+0x232>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4a54      	ldr	r2, [pc, #336]	; (80024e4 <HAL_GPIO_Init+0x33c>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d01f      	beq.n	80023d6 <HAL_GPIO_Init+0x22e>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4a53      	ldr	r2, [pc, #332]	; (80024e8 <HAL_GPIO_Init+0x340>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d019      	beq.n	80023d2 <HAL_GPIO_Init+0x22a>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4a52      	ldr	r2, [pc, #328]	; (80024ec <HAL_GPIO_Init+0x344>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d013      	beq.n	80023ce <HAL_GPIO_Init+0x226>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4a51      	ldr	r2, [pc, #324]	; (80024f0 <HAL_GPIO_Init+0x348>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d00d      	beq.n	80023ca <HAL_GPIO_Init+0x222>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4a50      	ldr	r2, [pc, #320]	; (80024f4 <HAL_GPIO_Init+0x34c>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d007      	beq.n	80023c6 <HAL_GPIO_Init+0x21e>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4a4f      	ldr	r2, [pc, #316]	; (80024f8 <HAL_GPIO_Init+0x350>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d101      	bne.n	80023c2 <HAL_GPIO_Init+0x21a>
 80023be:	2309      	movs	r3, #9
 80023c0:	e012      	b.n	80023e8 <HAL_GPIO_Init+0x240>
 80023c2:	230a      	movs	r3, #10
 80023c4:	e010      	b.n	80023e8 <HAL_GPIO_Init+0x240>
 80023c6:	2308      	movs	r3, #8
 80023c8:	e00e      	b.n	80023e8 <HAL_GPIO_Init+0x240>
 80023ca:	2307      	movs	r3, #7
 80023cc:	e00c      	b.n	80023e8 <HAL_GPIO_Init+0x240>
 80023ce:	2306      	movs	r3, #6
 80023d0:	e00a      	b.n	80023e8 <HAL_GPIO_Init+0x240>
 80023d2:	2305      	movs	r3, #5
 80023d4:	e008      	b.n	80023e8 <HAL_GPIO_Init+0x240>
 80023d6:	2304      	movs	r3, #4
 80023d8:	e006      	b.n	80023e8 <HAL_GPIO_Init+0x240>
 80023da:	2303      	movs	r3, #3
 80023dc:	e004      	b.n	80023e8 <HAL_GPIO_Init+0x240>
 80023de:	2302      	movs	r3, #2
 80023e0:	e002      	b.n	80023e8 <HAL_GPIO_Init+0x240>
 80023e2:	2301      	movs	r3, #1
 80023e4:	e000      	b.n	80023e8 <HAL_GPIO_Init+0x240>
 80023e6:	2300      	movs	r3, #0
 80023e8:	69fa      	ldr	r2, [r7, #28]
 80023ea:	f002 0203 	and.w	r2, r2, #3
 80023ee:	0092      	lsls	r2, r2, #2
 80023f0:	4093      	lsls	r3, r2
 80023f2:	69ba      	ldr	r2, [r7, #24]
 80023f4:	4313      	orrs	r3, r2
 80023f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023f8:	4935      	ldr	r1, [pc, #212]	; (80024d0 <HAL_GPIO_Init+0x328>)
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	089b      	lsrs	r3, r3, #2
 80023fe:	3302      	adds	r3, #2
 8002400:	69ba      	ldr	r2, [r7, #24]
 8002402:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002406:	4b3d      	ldr	r3, [pc, #244]	; (80024fc <HAL_GPIO_Init+0x354>)
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	43db      	mvns	r3, r3
 8002410:	69ba      	ldr	r2, [r7, #24]
 8002412:	4013      	ands	r3, r2
 8002414:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d003      	beq.n	800242a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002422:	69ba      	ldr	r2, [r7, #24]
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	4313      	orrs	r3, r2
 8002428:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800242a:	4a34      	ldr	r2, [pc, #208]	; (80024fc <HAL_GPIO_Init+0x354>)
 800242c:	69bb      	ldr	r3, [r7, #24]
 800242e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002430:	4b32      	ldr	r3, [pc, #200]	; (80024fc <HAL_GPIO_Init+0x354>)
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	43db      	mvns	r3, r3
 800243a:	69ba      	ldr	r2, [r7, #24]
 800243c:	4013      	ands	r3, r2
 800243e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002448:	2b00      	cmp	r3, #0
 800244a:	d003      	beq.n	8002454 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800244c:	69ba      	ldr	r2, [r7, #24]
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	4313      	orrs	r3, r2
 8002452:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002454:	4a29      	ldr	r2, [pc, #164]	; (80024fc <HAL_GPIO_Init+0x354>)
 8002456:	69bb      	ldr	r3, [r7, #24]
 8002458:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800245a:	4b28      	ldr	r3, [pc, #160]	; (80024fc <HAL_GPIO_Init+0x354>)
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	43db      	mvns	r3, r3
 8002464:	69ba      	ldr	r2, [r7, #24]
 8002466:	4013      	ands	r3, r2
 8002468:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d003      	beq.n	800247e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002476:	69ba      	ldr	r2, [r7, #24]
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	4313      	orrs	r3, r2
 800247c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800247e:	4a1f      	ldr	r2, [pc, #124]	; (80024fc <HAL_GPIO_Init+0x354>)
 8002480:	69bb      	ldr	r3, [r7, #24]
 8002482:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002484:	4b1d      	ldr	r3, [pc, #116]	; (80024fc <HAL_GPIO_Init+0x354>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	43db      	mvns	r3, r3
 800248e:	69ba      	ldr	r2, [r7, #24]
 8002490:	4013      	ands	r3, r2
 8002492:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800249c:	2b00      	cmp	r3, #0
 800249e:	d003      	beq.n	80024a8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80024a0:	69ba      	ldr	r2, [r7, #24]
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024a8:	4a14      	ldr	r2, [pc, #80]	; (80024fc <HAL_GPIO_Init+0x354>)
 80024aa:	69bb      	ldr	r3, [r7, #24]
 80024ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	3301      	adds	r3, #1
 80024b2:	61fb      	str	r3, [r7, #28]
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	2b0f      	cmp	r3, #15
 80024b8:	f67f ae84 	bls.w	80021c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80024bc:	bf00      	nop
 80024be:	bf00      	nop
 80024c0:	3724      	adds	r7, #36	; 0x24
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr
 80024ca:	bf00      	nop
 80024cc:	40023800 	.word	0x40023800
 80024d0:	40013800 	.word	0x40013800
 80024d4:	40020000 	.word	0x40020000
 80024d8:	40020400 	.word	0x40020400
 80024dc:	40020800 	.word	0x40020800
 80024e0:	40020c00 	.word	0x40020c00
 80024e4:	40021000 	.word	0x40021000
 80024e8:	40021400 	.word	0x40021400
 80024ec:	40021800 	.word	0x40021800
 80024f0:	40021c00 	.word	0x40021c00
 80024f4:	40022000 	.word	0x40022000
 80024f8:	40022400 	.word	0x40022400
 80024fc:	40013c00 	.word	0x40013c00

08002500 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002500:	b480      	push	{r7}
 8002502:	b083      	sub	sp, #12
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
 8002508:	460b      	mov	r3, r1
 800250a:	807b      	strh	r3, [r7, #2]
 800250c:	4613      	mov	r3, r2
 800250e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002510:	787b      	ldrb	r3, [r7, #1]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d003      	beq.n	800251e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002516:	887a      	ldrh	r2, [r7, #2]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800251c:	e003      	b.n	8002526 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800251e:	887b      	ldrh	r3, [r7, #2]
 8002520:	041a      	lsls	r2, r3, #16
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	619a      	str	r2, [r3, #24]
}
 8002526:	bf00      	nop
 8002528:	370c      	adds	r7, #12
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr

08002532 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002532:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002534:	b08f      	sub	sp, #60	; 0x3c
 8002536:	af0a      	add	r7, sp, #40	; 0x28
 8002538:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d101      	bne.n	8002544 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	e10f      	b.n	8002764 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002550:	b2db      	uxtb	r3, r3
 8002552:	2b00      	cmp	r3, #0
 8002554:	d106      	bne.n	8002564 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2200      	movs	r2, #0
 800255a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f7ff f880 	bl	8001664 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2203      	movs	r2, #3
 8002568:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002570:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002574:	2b00      	cmp	r3, #0
 8002576:	d102      	bne.n	800257e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2200      	movs	r2, #0
 800257c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4618      	mov	r0, r3
 8002584:	f001 fb8d 	bl	8003ca2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	603b      	str	r3, [r7, #0]
 800258e:	687e      	ldr	r6, [r7, #4]
 8002590:	466d      	mov	r5, sp
 8002592:	f106 0410 	add.w	r4, r6, #16
 8002596:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002598:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800259a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800259c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800259e:	e894 0003 	ldmia.w	r4, {r0, r1}
 80025a2:	e885 0003 	stmia.w	r5, {r0, r1}
 80025a6:	1d33      	adds	r3, r6, #4
 80025a8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025aa:	6838      	ldr	r0, [r7, #0]
 80025ac:	f001 fb18 	bl	8003be0 <USB_CoreInit>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d005      	beq.n	80025c2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2202      	movs	r2, #2
 80025ba:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e0d0      	b.n	8002764 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	2100      	movs	r1, #0
 80025c8:	4618      	mov	r0, r3
 80025ca:	f001 fb7b 	bl	8003cc4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025ce:	2300      	movs	r3, #0
 80025d0:	73fb      	strb	r3, [r7, #15]
 80025d2:	e04a      	b.n	800266a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80025d4:	7bfa      	ldrb	r2, [r7, #15]
 80025d6:	6879      	ldr	r1, [r7, #4]
 80025d8:	4613      	mov	r3, r2
 80025da:	00db      	lsls	r3, r3, #3
 80025dc:	4413      	add	r3, r2
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	440b      	add	r3, r1
 80025e2:	333d      	adds	r3, #61	; 0x3d
 80025e4:	2201      	movs	r2, #1
 80025e6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80025e8:	7bfa      	ldrb	r2, [r7, #15]
 80025ea:	6879      	ldr	r1, [r7, #4]
 80025ec:	4613      	mov	r3, r2
 80025ee:	00db      	lsls	r3, r3, #3
 80025f0:	4413      	add	r3, r2
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	440b      	add	r3, r1
 80025f6:	333c      	adds	r3, #60	; 0x3c
 80025f8:	7bfa      	ldrb	r2, [r7, #15]
 80025fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80025fc:	7bfa      	ldrb	r2, [r7, #15]
 80025fe:	7bfb      	ldrb	r3, [r7, #15]
 8002600:	b298      	uxth	r0, r3
 8002602:	6879      	ldr	r1, [r7, #4]
 8002604:	4613      	mov	r3, r2
 8002606:	00db      	lsls	r3, r3, #3
 8002608:	4413      	add	r3, r2
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	440b      	add	r3, r1
 800260e:	3344      	adds	r3, #68	; 0x44
 8002610:	4602      	mov	r2, r0
 8002612:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002614:	7bfa      	ldrb	r2, [r7, #15]
 8002616:	6879      	ldr	r1, [r7, #4]
 8002618:	4613      	mov	r3, r2
 800261a:	00db      	lsls	r3, r3, #3
 800261c:	4413      	add	r3, r2
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	440b      	add	r3, r1
 8002622:	3340      	adds	r3, #64	; 0x40
 8002624:	2200      	movs	r2, #0
 8002626:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002628:	7bfa      	ldrb	r2, [r7, #15]
 800262a:	6879      	ldr	r1, [r7, #4]
 800262c:	4613      	mov	r3, r2
 800262e:	00db      	lsls	r3, r3, #3
 8002630:	4413      	add	r3, r2
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	440b      	add	r3, r1
 8002636:	3348      	adds	r3, #72	; 0x48
 8002638:	2200      	movs	r2, #0
 800263a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800263c:	7bfa      	ldrb	r2, [r7, #15]
 800263e:	6879      	ldr	r1, [r7, #4]
 8002640:	4613      	mov	r3, r2
 8002642:	00db      	lsls	r3, r3, #3
 8002644:	4413      	add	r3, r2
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	440b      	add	r3, r1
 800264a:	334c      	adds	r3, #76	; 0x4c
 800264c:	2200      	movs	r2, #0
 800264e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002650:	7bfa      	ldrb	r2, [r7, #15]
 8002652:	6879      	ldr	r1, [r7, #4]
 8002654:	4613      	mov	r3, r2
 8002656:	00db      	lsls	r3, r3, #3
 8002658:	4413      	add	r3, r2
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	440b      	add	r3, r1
 800265e:	3354      	adds	r3, #84	; 0x54
 8002660:	2200      	movs	r2, #0
 8002662:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002664:	7bfb      	ldrb	r3, [r7, #15]
 8002666:	3301      	adds	r3, #1
 8002668:	73fb      	strb	r3, [r7, #15]
 800266a:	7bfa      	ldrb	r2, [r7, #15]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	429a      	cmp	r2, r3
 8002672:	d3af      	bcc.n	80025d4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002674:	2300      	movs	r3, #0
 8002676:	73fb      	strb	r3, [r7, #15]
 8002678:	e044      	b.n	8002704 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800267a:	7bfa      	ldrb	r2, [r7, #15]
 800267c:	6879      	ldr	r1, [r7, #4]
 800267e:	4613      	mov	r3, r2
 8002680:	00db      	lsls	r3, r3, #3
 8002682:	4413      	add	r3, r2
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	440b      	add	r3, r1
 8002688:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800268c:	2200      	movs	r2, #0
 800268e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002690:	7bfa      	ldrb	r2, [r7, #15]
 8002692:	6879      	ldr	r1, [r7, #4]
 8002694:	4613      	mov	r3, r2
 8002696:	00db      	lsls	r3, r3, #3
 8002698:	4413      	add	r3, r2
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	440b      	add	r3, r1
 800269e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80026a2:	7bfa      	ldrb	r2, [r7, #15]
 80026a4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80026a6:	7bfa      	ldrb	r2, [r7, #15]
 80026a8:	6879      	ldr	r1, [r7, #4]
 80026aa:	4613      	mov	r3, r2
 80026ac:	00db      	lsls	r3, r3, #3
 80026ae:	4413      	add	r3, r2
 80026b0:	009b      	lsls	r3, r3, #2
 80026b2:	440b      	add	r3, r1
 80026b4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80026b8:	2200      	movs	r2, #0
 80026ba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80026bc:	7bfa      	ldrb	r2, [r7, #15]
 80026be:	6879      	ldr	r1, [r7, #4]
 80026c0:	4613      	mov	r3, r2
 80026c2:	00db      	lsls	r3, r3, #3
 80026c4:	4413      	add	r3, r2
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	440b      	add	r3, r1
 80026ca:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80026ce:	2200      	movs	r2, #0
 80026d0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80026d2:	7bfa      	ldrb	r2, [r7, #15]
 80026d4:	6879      	ldr	r1, [r7, #4]
 80026d6:	4613      	mov	r3, r2
 80026d8:	00db      	lsls	r3, r3, #3
 80026da:	4413      	add	r3, r2
 80026dc:	009b      	lsls	r3, r3, #2
 80026de:	440b      	add	r3, r1
 80026e0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80026e4:	2200      	movs	r2, #0
 80026e6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80026e8:	7bfa      	ldrb	r2, [r7, #15]
 80026ea:	6879      	ldr	r1, [r7, #4]
 80026ec:	4613      	mov	r3, r2
 80026ee:	00db      	lsls	r3, r3, #3
 80026f0:	4413      	add	r3, r2
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	440b      	add	r3, r1
 80026f6:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80026fa:	2200      	movs	r2, #0
 80026fc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026fe:	7bfb      	ldrb	r3, [r7, #15]
 8002700:	3301      	adds	r3, #1
 8002702:	73fb      	strb	r3, [r7, #15]
 8002704:	7bfa      	ldrb	r2, [r7, #15]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	429a      	cmp	r2, r3
 800270c:	d3b5      	bcc.n	800267a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	603b      	str	r3, [r7, #0]
 8002714:	687e      	ldr	r6, [r7, #4]
 8002716:	466d      	mov	r5, sp
 8002718:	f106 0410 	add.w	r4, r6, #16
 800271c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800271e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002720:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002722:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002724:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002728:	e885 0003 	stmia.w	r5, {r0, r1}
 800272c:	1d33      	adds	r3, r6, #4
 800272e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002730:	6838      	ldr	r0, [r7, #0]
 8002732:	f001 fb13 	bl	8003d5c <USB_DevInit>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d005      	beq.n	8002748 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2202      	movs	r2, #2
 8002740:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	e00d      	b.n	8002764 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2200      	movs	r2, #0
 800274c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2201      	movs	r2, #1
 8002754:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4618      	mov	r0, r3
 800275e:	f001 fcde 	bl	800411e <USB_DevDisconnect>

  return HAL_OK;
 8002762:	2300      	movs	r3, #0
}
 8002764:	4618      	mov	r0, r3
 8002766:	3714      	adds	r7, #20
 8002768:	46bd      	mov	sp, r7
 800276a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800276c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b086      	sub	sp, #24
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d101      	bne.n	800277e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e267      	b.n	8002c4e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 0301 	and.w	r3, r3, #1
 8002786:	2b00      	cmp	r3, #0
 8002788:	d075      	beq.n	8002876 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800278a:	4b88      	ldr	r3, [pc, #544]	; (80029ac <HAL_RCC_OscConfig+0x240>)
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	f003 030c 	and.w	r3, r3, #12
 8002792:	2b04      	cmp	r3, #4
 8002794:	d00c      	beq.n	80027b0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002796:	4b85      	ldr	r3, [pc, #532]	; (80029ac <HAL_RCC_OscConfig+0x240>)
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800279e:	2b08      	cmp	r3, #8
 80027a0:	d112      	bne.n	80027c8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027a2:	4b82      	ldr	r3, [pc, #520]	; (80029ac <HAL_RCC_OscConfig+0x240>)
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027ae:	d10b      	bne.n	80027c8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027b0:	4b7e      	ldr	r3, [pc, #504]	; (80029ac <HAL_RCC_OscConfig+0x240>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d05b      	beq.n	8002874 <HAL_RCC_OscConfig+0x108>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d157      	bne.n	8002874 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	e242      	b.n	8002c4e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027d0:	d106      	bne.n	80027e0 <HAL_RCC_OscConfig+0x74>
 80027d2:	4b76      	ldr	r3, [pc, #472]	; (80029ac <HAL_RCC_OscConfig+0x240>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a75      	ldr	r2, [pc, #468]	; (80029ac <HAL_RCC_OscConfig+0x240>)
 80027d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027dc:	6013      	str	r3, [r2, #0]
 80027de:	e01d      	b.n	800281c <HAL_RCC_OscConfig+0xb0>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027e8:	d10c      	bne.n	8002804 <HAL_RCC_OscConfig+0x98>
 80027ea:	4b70      	ldr	r3, [pc, #448]	; (80029ac <HAL_RCC_OscConfig+0x240>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a6f      	ldr	r2, [pc, #444]	; (80029ac <HAL_RCC_OscConfig+0x240>)
 80027f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027f4:	6013      	str	r3, [r2, #0]
 80027f6:	4b6d      	ldr	r3, [pc, #436]	; (80029ac <HAL_RCC_OscConfig+0x240>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a6c      	ldr	r2, [pc, #432]	; (80029ac <HAL_RCC_OscConfig+0x240>)
 80027fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002800:	6013      	str	r3, [r2, #0]
 8002802:	e00b      	b.n	800281c <HAL_RCC_OscConfig+0xb0>
 8002804:	4b69      	ldr	r3, [pc, #420]	; (80029ac <HAL_RCC_OscConfig+0x240>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a68      	ldr	r2, [pc, #416]	; (80029ac <HAL_RCC_OscConfig+0x240>)
 800280a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800280e:	6013      	str	r3, [r2, #0]
 8002810:	4b66      	ldr	r3, [pc, #408]	; (80029ac <HAL_RCC_OscConfig+0x240>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a65      	ldr	r2, [pc, #404]	; (80029ac <HAL_RCC_OscConfig+0x240>)
 8002816:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800281a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d013      	beq.n	800284c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002824:	f7ff f886 	bl	8001934 <HAL_GetTick>
 8002828:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800282a:	e008      	b.n	800283e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800282c:	f7ff f882 	bl	8001934 <HAL_GetTick>
 8002830:	4602      	mov	r2, r0
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	2b64      	cmp	r3, #100	; 0x64
 8002838:	d901      	bls.n	800283e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800283a:	2303      	movs	r3, #3
 800283c:	e207      	b.n	8002c4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800283e:	4b5b      	ldr	r3, [pc, #364]	; (80029ac <HAL_RCC_OscConfig+0x240>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002846:	2b00      	cmp	r3, #0
 8002848:	d0f0      	beq.n	800282c <HAL_RCC_OscConfig+0xc0>
 800284a:	e014      	b.n	8002876 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800284c:	f7ff f872 	bl	8001934 <HAL_GetTick>
 8002850:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002852:	e008      	b.n	8002866 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002854:	f7ff f86e 	bl	8001934 <HAL_GetTick>
 8002858:	4602      	mov	r2, r0
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	2b64      	cmp	r3, #100	; 0x64
 8002860:	d901      	bls.n	8002866 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002862:	2303      	movs	r3, #3
 8002864:	e1f3      	b.n	8002c4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002866:	4b51      	ldr	r3, [pc, #324]	; (80029ac <HAL_RCC_OscConfig+0x240>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d1f0      	bne.n	8002854 <HAL_RCC_OscConfig+0xe8>
 8002872:	e000      	b.n	8002876 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002874:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0302 	and.w	r3, r3, #2
 800287e:	2b00      	cmp	r3, #0
 8002880:	d063      	beq.n	800294a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002882:	4b4a      	ldr	r3, [pc, #296]	; (80029ac <HAL_RCC_OscConfig+0x240>)
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	f003 030c 	and.w	r3, r3, #12
 800288a:	2b00      	cmp	r3, #0
 800288c:	d00b      	beq.n	80028a6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800288e:	4b47      	ldr	r3, [pc, #284]	; (80029ac <HAL_RCC_OscConfig+0x240>)
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002896:	2b08      	cmp	r3, #8
 8002898:	d11c      	bne.n	80028d4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800289a:	4b44      	ldr	r3, [pc, #272]	; (80029ac <HAL_RCC_OscConfig+0x240>)
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d116      	bne.n	80028d4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028a6:	4b41      	ldr	r3, [pc, #260]	; (80029ac <HAL_RCC_OscConfig+0x240>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 0302 	and.w	r3, r3, #2
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d005      	beq.n	80028be <HAL_RCC_OscConfig+0x152>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	68db      	ldr	r3, [r3, #12]
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d001      	beq.n	80028be <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e1c7      	b.n	8002c4e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028be:	4b3b      	ldr	r3, [pc, #236]	; (80029ac <HAL_RCC_OscConfig+0x240>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	691b      	ldr	r3, [r3, #16]
 80028ca:	00db      	lsls	r3, r3, #3
 80028cc:	4937      	ldr	r1, [pc, #220]	; (80029ac <HAL_RCC_OscConfig+0x240>)
 80028ce:	4313      	orrs	r3, r2
 80028d0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028d2:	e03a      	b.n	800294a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d020      	beq.n	800291e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028dc:	4b34      	ldr	r3, [pc, #208]	; (80029b0 <HAL_RCC_OscConfig+0x244>)
 80028de:	2201      	movs	r2, #1
 80028e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028e2:	f7ff f827 	bl	8001934 <HAL_GetTick>
 80028e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028e8:	e008      	b.n	80028fc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028ea:	f7ff f823 	bl	8001934 <HAL_GetTick>
 80028ee:	4602      	mov	r2, r0
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	1ad3      	subs	r3, r2, r3
 80028f4:	2b02      	cmp	r3, #2
 80028f6:	d901      	bls.n	80028fc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80028f8:	2303      	movs	r3, #3
 80028fa:	e1a8      	b.n	8002c4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028fc:	4b2b      	ldr	r3, [pc, #172]	; (80029ac <HAL_RCC_OscConfig+0x240>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 0302 	and.w	r3, r3, #2
 8002904:	2b00      	cmp	r3, #0
 8002906:	d0f0      	beq.n	80028ea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002908:	4b28      	ldr	r3, [pc, #160]	; (80029ac <HAL_RCC_OscConfig+0x240>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	691b      	ldr	r3, [r3, #16]
 8002914:	00db      	lsls	r3, r3, #3
 8002916:	4925      	ldr	r1, [pc, #148]	; (80029ac <HAL_RCC_OscConfig+0x240>)
 8002918:	4313      	orrs	r3, r2
 800291a:	600b      	str	r3, [r1, #0]
 800291c:	e015      	b.n	800294a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800291e:	4b24      	ldr	r3, [pc, #144]	; (80029b0 <HAL_RCC_OscConfig+0x244>)
 8002920:	2200      	movs	r2, #0
 8002922:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002924:	f7ff f806 	bl	8001934 <HAL_GetTick>
 8002928:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800292a:	e008      	b.n	800293e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800292c:	f7ff f802 	bl	8001934 <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	2b02      	cmp	r3, #2
 8002938:	d901      	bls.n	800293e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	e187      	b.n	8002c4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800293e:	4b1b      	ldr	r3, [pc, #108]	; (80029ac <HAL_RCC_OscConfig+0x240>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 0302 	and.w	r3, r3, #2
 8002946:	2b00      	cmp	r3, #0
 8002948:	d1f0      	bne.n	800292c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0308 	and.w	r3, r3, #8
 8002952:	2b00      	cmp	r3, #0
 8002954:	d036      	beq.n	80029c4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	695b      	ldr	r3, [r3, #20]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d016      	beq.n	800298c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800295e:	4b15      	ldr	r3, [pc, #84]	; (80029b4 <HAL_RCC_OscConfig+0x248>)
 8002960:	2201      	movs	r2, #1
 8002962:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002964:	f7fe ffe6 	bl	8001934 <HAL_GetTick>
 8002968:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800296a:	e008      	b.n	800297e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800296c:	f7fe ffe2 	bl	8001934 <HAL_GetTick>
 8002970:	4602      	mov	r2, r0
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	2b02      	cmp	r3, #2
 8002978:	d901      	bls.n	800297e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800297a:	2303      	movs	r3, #3
 800297c:	e167      	b.n	8002c4e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800297e:	4b0b      	ldr	r3, [pc, #44]	; (80029ac <HAL_RCC_OscConfig+0x240>)
 8002980:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002982:	f003 0302 	and.w	r3, r3, #2
 8002986:	2b00      	cmp	r3, #0
 8002988:	d0f0      	beq.n	800296c <HAL_RCC_OscConfig+0x200>
 800298a:	e01b      	b.n	80029c4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800298c:	4b09      	ldr	r3, [pc, #36]	; (80029b4 <HAL_RCC_OscConfig+0x248>)
 800298e:	2200      	movs	r2, #0
 8002990:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002992:	f7fe ffcf 	bl	8001934 <HAL_GetTick>
 8002996:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002998:	e00e      	b.n	80029b8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800299a:	f7fe ffcb 	bl	8001934 <HAL_GetTick>
 800299e:	4602      	mov	r2, r0
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	1ad3      	subs	r3, r2, r3
 80029a4:	2b02      	cmp	r3, #2
 80029a6:	d907      	bls.n	80029b8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80029a8:	2303      	movs	r3, #3
 80029aa:	e150      	b.n	8002c4e <HAL_RCC_OscConfig+0x4e2>
 80029ac:	40023800 	.word	0x40023800
 80029b0:	42470000 	.word	0x42470000
 80029b4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029b8:	4b88      	ldr	r3, [pc, #544]	; (8002bdc <HAL_RCC_OscConfig+0x470>)
 80029ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029bc:	f003 0302 	and.w	r3, r3, #2
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d1ea      	bne.n	800299a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 0304 	and.w	r3, r3, #4
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	f000 8097 	beq.w	8002b00 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029d2:	2300      	movs	r3, #0
 80029d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029d6:	4b81      	ldr	r3, [pc, #516]	; (8002bdc <HAL_RCC_OscConfig+0x470>)
 80029d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d10f      	bne.n	8002a02 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029e2:	2300      	movs	r3, #0
 80029e4:	60bb      	str	r3, [r7, #8]
 80029e6:	4b7d      	ldr	r3, [pc, #500]	; (8002bdc <HAL_RCC_OscConfig+0x470>)
 80029e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ea:	4a7c      	ldr	r2, [pc, #496]	; (8002bdc <HAL_RCC_OscConfig+0x470>)
 80029ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029f0:	6413      	str	r3, [r2, #64]	; 0x40
 80029f2:	4b7a      	ldr	r3, [pc, #488]	; (8002bdc <HAL_RCC_OscConfig+0x470>)
 80029f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029fa:	60bb      	str	r3, [r7, #8]
 80029fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029fe:	2301      	movs	r3, #1
 8002a00:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a02:	4b77      	ldr	r3, [pc, #476]	; (8002be0 <HAL_RCC_OscConfig+0x474>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d118      	bne.n	8002a40 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a0e:	4b74      	ldr	r3, [pc, #464]	; (8002be0 <HAL_RCC_OscConfig+0x474>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a73      	ldr	r2, [pc, #460]	; (8002be0 <HAL_RCC_OscConfig+0x474>)
 8002a14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a1a:	f7fe ff8b 	bl	8001934 <HAL_GetTick>
 8002a1e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a20:	e008      	b.n	8002a34 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a22:	f7fe ff87 	bl	8001934 <HAL_GetTick>
 8002a26:	4602      	mov	r2, r0
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	2b02      	cmp	r3, #2
 8002a2e:	d901      	bls.n	8002a34 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002a30:	2303      	movs	r3, #3
 8002a32:	e10c      	b.n	8002c4e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a34:	4b6a      	ldr	r3, [pc, #424]	; (8002be0 <HAL_RCC_OscConfig+0x474>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d0f0      	beq.n	8002a22 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d106      	bne.n	8002a56 <HAL_RCC_OscConfig+0x2ea>
 8002a48:	4b64      	ldr	r3, [pc, #400]	; (8002bdc <HAL_RCC_OscConfig+0x470>)
 8002a4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a4c:	4a63      	ldr	r2, [pc, #396]	; (8002bdc <HAL_RCC_OscConfig+0x470>)
 8002a4e:	f043 0301 	orr.w	r3, r3, #1
 8002a52:	6713      	str	r3, [r2, #112]	; 0x70
 8002a54:	e01c      	b.n	8002a90 <HAL_RCC_OscConfig+0x324>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	2b05      	cmp	r3, #5
 8002a5c:	d10c      	bne.n	8002a78 <HAL_RCC_OscConfig+0x30c>
 8002a5e:	4b5f      	ldr	r3, [pc, #380]	; (8002bdc <HAL_RCC_OscConfig+0x470>)
 8002a60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a62:	4a5e      	ldr	r2, [pc, #376]	; (8002bdc <HAL_RCC_OscConfig+0x470>)
 8002a64:	f043 0304 	orr.w	r3, r3, #4
 8002a68:	6713      	str	r3, [r2, #112]	; 0x70
 8002a6a:	4b5c      	ldr	r3, [pc, #368]	; (8002bdc <HAL_RCC_OscConfig+0x470>)
 8002a6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a6e:	4a5b      	ldr	r2, [pc, #364]	; (8002bdc <HAL_RCC_OscConfig+0x470>)
 8002a70:	f043 0301 	orr.w	r3, r3, #1
 8002a74:	6713      	str	r3, [r2, #112]	; 0x70
 8002a76:	e00b      	b.n	8002a90 <HAL_RCC_OscConfig+0x324>
 8002a78:	4b58      	ldr	r3, [pc, #352]	; (8002bdc <HAL_RCC_OscConfig+0x470>)
 8002a7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a7c:	4a57      	ldr	r2, [pc, #348]	; (8002bdc <HAL_RCC_OscConfig+0x470>)
 8002a7e:	f023 0301 	bic.w	r3, r3, #1
 8002a82:	6713      	str	r3, [r2, #112]	; 0x70
 8002a84:	4b55      	ldr	r3, [pc, #340]	; (8002bdc <HAL_RCC_OscConfig+0x470>)
 8002a86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a88:	4a54      	ldr	r2, [pc, #336]	; (8002bdc <HAL_RCC_OscConfig+0x470>)
 8002a8a:	f023 0304 	bic.w	r3, r3, #4
 8002a8e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d015      	beq.n	8002ac4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a98:	f7fe ff4c 	bl	8001934 <HAL_GetTick>
 8002a9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a9e:	e00a      	b.n	8002ab6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002aa0:	f7fe ff48 	bl	8001934 <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d901      	bls.n	8002ab6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e0cb      	b.n	8002c4e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ab6:	4b49      	ldr	r3, [pc, #292]	; (8002bdc <HAL_RCC_OscConfig+0x470>)
 8002ab8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aba:	f003 0302 	and.w	r3, r3, #2
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d0ee      	beq.n	8002aa0 <HAL_RCC_OscConfig+0x334>
 8002ac2:	e014      	b.n	8002aee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ac4:	f7fe ff36 	bl	8001934 <HAL_GetTick>
 8002ac8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002aca:	e00a      	b.n	8002ae2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002acc:	f7fe ff32 	bl	8001934 <HAL_GetTick>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d901      	bls.n	8002ae2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002ade:	2303      	movs	r3, #3
 8002ae0:	e0b5      	b.n	8002c4e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ae2:	4b3e      	ldr	r3, [pc, #248]	; (8002bdc <HAL_RCC_OscConfig+0x470>)
 8002ae4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ae6:	f003 0302 	and.w	r3, r3, #2
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d1ee      	bne.n	8002acc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002aee:	7dfb      	ldrb	r3, [r7, #23]
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d105      	bne.n	8002b00 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002af4:	4b39      	ldr	r3, [pc, #228]	; (8002bdc <HAL_RCC_OscConfig+0x470>)
 8002af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af8:	4a38      	ldr	r2, [pc, #224]	; (8002bdc <HAL_RCC_OscConfig+0x470>)
 8002afa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002afe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	699b      	ldr	r3, [r3, #24]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	f000 80a1 	beq.w	8002c4c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b0a:	4b34      	ldr	r3, [pc, #208]	; (8002bdc <HAL_RCC_OscConfig+0x470>)
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	f003 030c 	and.w	r3, r3, #12
 8002b12:	2b08      	cmp	r3, #8
 8002b14:	d05c      	beq.n	8002bd0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	699b      	ldr	r3, [r3, #24]
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	d141      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b1e:	4b31      	ldr	r3, [pc, #196]	; (8002be4 <HAL_RCC_OscConfig+0x478>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b24:	f7fe ff06 	bl	8001934 <HAL_GetTick>
 8002b28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b2a:	e008      	b.n	8002b3e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b2c:	f7fe ff02 	bl	8001934 <HAL_GetTick>
 8002b30:	4602      	mov	r2, r0
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	2b02      	cmp	r3, #2
 8002b38:	d901      	bls.n	8002b3e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e087      	b.n	8002c4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b3e:	4b27      	ldr	r3, [pc, #156]	; (8002bdc <HAL_RCC_OscConfig+0x470>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d1f0      	bne.n	8002b2c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	69da      	ldr	r2, [r3, #28]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6a1b      	ldr	r3, [r3, #32]
 8002b52:	431a      	orrs	r2, r3
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b58:	019b      	lsls	r3, r3, #6
 8002b5a:	431a      	orrs	r2, r3
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b60:	085b      	lsrs	r3, r3, #1
 8002b62:	3b01      	subs	r3, #1
 8002b64:	041b      	lsls	r3, r3, #16
 8002b66:	431a      	orrs	r2, r3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b6c:	061b      	lsls	r3, r3, #24
 8002b6e:	491b      	ldr	r1, [pc, #108]	; (8002bdc <HAL_RCC_OscConfig+0x470>)
 8002b70:	4313      	orrs	r3, r2
 8002b72:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b74:	4b1b      	ldr	r3, [pc, #108]	; (8002be4 <HAL_RCC_OscConfig+0x478>)
 8002b76:	2201      	movs	r2, #1
 8002b78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b7a:	f7fe fedb 	bl	8001934 <HAL_GetTick>
 8002b7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b80:	e008      	b.n	8002b94 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b82:	f7fe fed7 	bl	8001934 <HAL_GetTick>
 8002b86:	4602      	mov	r2, r0
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	1ad3      	subs	r3, r2, r3
 8002b8c:	2b02      	cmp	r3, #2
 8002b8e:	d901      	bls.n	8002b94 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002b90:	2303      	movs	r3, #3
 8002b92:	e05c      	b.n	8002c4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b94:	4b11      	ldr	r3, [pc, #68]	; (8002bdc <HAL_RCC_OscConfig+0x470>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d0f0      	beq.n	8002b82 <HAL_RCC_OscConfig+0x416>
 8002ba0:	e054      	b.n	8002c4c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ba2:	4b10      	ldr	r3, [pc, #64]	; (8002be4 <HAL_RCC_OscConfig+0x478>)
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ba8:	f7fe fec4 	bl	8001934 <HAL_GetTick>
 8002bac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bae:	e008      	b.n	8002bc2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bb0:	f7fe fec0 	bl	8001934 <HAL_GetTick>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d901      	bls.n	8002bc2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e045      	b.n	8002c4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bc2:	4b06      	ldr	r3, [pc, #24]	; (8002bdc <HAL_RCC_OscConfig+0x470>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d1f0      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x444>
 8002bce:	e03d      	b.n	8002c4c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	699b      	ldr	r3, [r3, #24]
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d107      	bne.n	8002be8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e038      	b.n	8002c4e <HAL_RCC_OscConfig+0x4e2>
 8002bdc:	40023800 	.word	0x40023800
 8002be0:	40007000 	.word	0x40007000
 8002be4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002be8:	4b1b      	ldr	r3, [pc, #108]	; (8002c58 <HAL_RCC_OscConfig+0x4ec>)
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	699b      	ldr	r3, [r3, #24]
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d028      	beq.n	8002c48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d121      	bne.n	8002c48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d11a      	bne.n	8002c48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c12:	68fa      	ldr	r2, [r7, #12]
 8002c14:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002c18:	4013      	ands	r3, r2
 8002c1a:	687a      	ldr	r2, [r7, #4]
 8002c1c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002c1e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d111      	bne.n	8002c48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c2e:	085b      	lsrs	r3, r3, #1
 8002c30:	3b01      	subs	r3, #1
 8002c32:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d107      	bne.n	8002c48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c42:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d001      	beq.n	8002c4c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e000      	b.n	8002c4e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002c4c:	2300      	movs	r3, #0
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3718      	adds	r7, #24
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	40023800 	.word	0x40023800

08002c5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b084      	sub	sp, #16
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
 8002c64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d101      	bne.n	8002c70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	e0cc      	b.n	8002e0a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c70:	4b68      	ldr	r3, [pc, #416]	; (8002e14 <HAL_RCC_ClockConfig+0x1b8>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 030f 	and.w	r3, r3, #15
 8002c78:	683a      	ldr	r2, [r7, #0]
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d90c      	bls.n	8002c98 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c7e:	4b65      	ldr	r3, [pc, #404]	; (8002e14 <HAL_RCC_ClockConfig+0x1b8>)
 8002c80:	683a      	ldr	r2, [r7, #0]
 8002c82:	b2d2      	uxtb	r2, r2
 8002c84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c86:	4b63      	ldr	r3, [pc, #396]	; (8002e14 <HAL_RCC_ClockConfig+0x1b8>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 030f 	and.w	r3, r3, #15
 8002c8e:	683a      	ldr	r2, [r7, #0]
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d001      	beq.n	8002c98 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	e0b8      	b.n	8002e0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 0302 	and.w	r3, r3, #2
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d020      	beq.n	8002ce6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 0304 	and.w	r3, r3, #4
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d005      	beq.n	8002cbc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002cb0:	4b59      	ldr	r3, [pc, #356]	; (8002e18 <HAL_RCC_ClockConfig+0x1bc>)
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	4a58      	ldr	r2, [pc, #352]	; (8002e18 <HAL_RCC_ClockConfig+0x1bc>)
 8002cb6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002cba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 0308 	and.w	r3, r3, #8
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d005      	beq.n	8002cd4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002cc8:	4b53      	ldr	r3, [pc, #332]	; (8002e18 <HAL_RCC_ClockConfig+0x1bc>)
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	4a52      	ldr	r2, [pc, #328]	; (8002e18 <HAL_RCC_ClockConfig+0x1bc>)
 8002cce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002cd2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cd4:	4b50      	ldr	r3, [pc, #320]	; (8002e18 <HAL_RCC_ClockConfig+0x1bc>)
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	494d      	ldr	r1, [pc, #308]	; (8002e18 <HAL_RCC_ClockConfig+0x1bc>)
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 0301 	and.w	r3, r3, #1
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d044      	beq.n	8002d7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d107      	bne.n	8002d0a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cfa:	4b47      	ldr	r3, [pc, #284]	; (8002e18 <HAL_RCC_ClockConfig+0x1bc>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d119      	bne.n	8002d3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e07f      	b.n	8002e0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	2b02      	cmp	r3, #2
 8002d10:	d003      	beq.n	8002d1a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d16:	2b03      	cmp	r3, #3
 8002d18:	d107      	bne.n	8002d2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d1a:	4b3f      	ldr	r3, [pc, #252]	; (8002e18 <HAL_RCC_ClockConfig+0x1bc>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d109      	bne.n	8002d3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e06f      	b.n	8002e0a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d2a:	4b3b      	ldr	r3, [pc, #236]	; (8002e18 <HAL_RCC_ClockConfig+0x1bc>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 0302 	and.w	r3, r3, #2
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d101      	bne.n	8002d3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e067      	b.n	8002e0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d3a:	4b37      	ldr	r3, [pc, #220]	; (8002e18 <HAL_RCC_ClockConfig+0x1bc>)
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	f023 0203 	bic.w	r2, r3, #3
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	4934      	ldr	r1, [pc, #208]	; (8002e18 <HAL_RCC_ClockConfig+0x1bc>)
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d4c:	f7fe fdf2 	bl	8001934 <HAL_GetTick>
 8002d50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d52:	e00a      	b.n	8002d6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d54:	f7fe fdee 	bl	8001934 <HAL_GetTick>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d901      	bls.n	8002d6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d66:	2303      	movs	r3, #3
 8002d68:	e04f      	b.n	8002e0a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d6a:	4b2b      	ldr	r3, [pc, #172]	; (8002e18 <HAL_RCC_ClockConfig+0x1bc>)
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	f003 020c 	and.w	r2, r3, #12
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d1eb      	bne.n	8002d54 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d7c:	4b25      	ldr	r3, [pc, #148]	; (8002e14 <HAL_RCC_ClockConfig+0x1b8>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 030f 	and.w	r3, r3, #15
 8002d84:	683a      	ldr	r2, [r7, #0]
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d20c      	bcs.n	8002da4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d8a:	4b22      	ldr	r3, [pc, #136]	; (8002e14 <HAL_RCC_ClockConfig+0x1b8>)
 8002d8c:	683a      	ldr	r2, [r7, #0]
 8002d8e:	b2d2      	uxtb	r2, r2
 8002d90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d92:	4b20      	ldr	r3, [pc, #128]	; (8002e14 <HAL_RCC_ClockConfig+0x1b8>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 030f 	and.w	r3, r3, #15
 8002d9a:	683a      	ldr	r2, [r7, #0]
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d001      	beq.n	8002da4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e032      	b.n	8002e0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 0304 	and.w	r3, r3, #4
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d008      	beq.n	8002dc2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002db0:	4b19      	ldr	r3, [pc, #100]	; (8002e18 <HAL_RCC_ClockConfig+0x1bc>)
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	4916      	ldr	r1, [pc, #88]	; (8002e18 <HAL_RCC_ClockConfig+0x1bc>)
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 0308 	and.w	r3, r3, #8
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d009      	beq.n	8002de2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002dce:	4b12      	ldr	r3, [pc, #72]	; (8002e18 <HAL_RCC_ClockConfig+0x1bc>)
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	691b      	ldr	r3, [r3, #16]
 8002dda:	00db      	lsls	r3, r3, #3
 8002ddc:	490e      	ldr	r1, [pc, #56]	; (8002e18 <HAL_RCC_ClockConfig+0x1bc>)
 8002dde:	4313      	orrs	r3, r2
 8002de0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002de2:	f000 f821 	bl	8002e28 <HAL_RCC_GetSysClockFreq>
 8002de6:	4602      	mov	r2, r0
 8002de8:	4b0b      	ldr	r3, [pc, #44]	; (8002e18 <HAL_RCC_ClockConfig+0x1bc>)
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	091b      	lsrs	r3, r3, #4
 8002dee:	f003 030f 	and.w	r3, r3, #15
 8002df2:	490a      	ldr	r1, [pc, #40]	; (8002e1c <HAL_RCC_ClockConfig+0x1c0>)
 8002df4:	5ccb      	ldrb	r3, [r1, r3]
 8002df6:	fa22 f303 	lsr.w	r3, r2, r3
 8002dfa:	4a09      	ldr	r2, [pc, #36]	; (8002e20 <HAL_RCC_ClockConfig+0x1c4>)
 8002dfc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002dfe:	4b09      	ldr	r3, [pc, #36]	; (8002e24 <HAL_RCC_ClockConfig+0x1c8>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4618      	mov	r0, r3
 8002e04:	f7fe fc88 	bl	8001718 <HAL_InitTick>

  return HAL_OK;
 8002e08:	2300      	movs	r3, #0
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3710      	adds	r7, #16
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	40023c00 	.word	0x40023c00
 8002e18:	40023800 	.word	0x40023800
 8002e1c:	080070bc 	.word	0x080070bc
 8002e20:	20000000 	.word	0x20000000
 8002e24:	20000004 	.word	0x20000004

08002e28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e2c:	b094      	sub	sp, #80	; 0x50
 8002e2e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002e30:	2300      	movs	r3, #0
 8002e32:	647b      	str	r3, [r7, #68]	; 0x44
 8002e34:	2300      	movs	r3, #0
 8002e36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e38:	2300      	movs	r3, #0
 8002e3a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e40:	4b79      	ldr	r3, [pc, #484]	; (8003028 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	f003 030c 	and.w	r3, r3, #12
 8002e48:	2b08      	cmp	r3, #8
 8002e4a:	d00d      	beq.n	8002e68 <HAL_RCC_GetSysClockFreq+0x40>
 8002e4c:	2b08      	cmp	r3, #8
 8002e4e:	f200 80e1 	bhi.w	8003014 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d002      	beq.n	8002e5c <HAL_RCC_GetSysClockFreq+0x34>
 8002e56:	2b04      	cmp	r3, #4
 8002e58:	d003      	beq.n	8002e62 <HAL_RCC_GetSysClockFreq+0x3a>
 8002e5a:	e0db      	b.n	8003014 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e5c:	4b73      	ldr	r3, [pc, #460]	; (800302c <HAL_RCC_GetSysClockFreq+0x204>)
 8002e5e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002e60:	e0db      	b.n	800301a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e62:	4b73      	ldr	r3, [pc, #460]	; (8003030 <HAL_RCC_GetSysClockFreq+0x208>)
 8002e64:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002e66:	e0d8      	b.n	800301a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e68:	4b6f      	ldr	r3, [pc, #444]	; (8003028 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e70:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e72:	4b6d      	ldr	r3, [pc, #436]	; (8003028 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d063      	beq.n	8002f46 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e7e:	4b6a      	ldr	r3, [pc, #424]	; (8003028 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	099b      	lsrs	r3, r3, #6
 8002e84:	2200      	movs	r2, #0
 8002e86:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e88:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002e8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e90:	633b      	str	r3, [r7, #48]	; 0x30
 8002e92:	2300      	movs	r3, #0
 8002e94:	637b      	str	r3, [r7, #52]	; 0x34
 8002e96:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002e9a:	4622      	mov	r2, r4
 8002e9c:	462b      	mov	r3, r5
 8002e9e:	f04f 0000 	mov.w	r0, #0
 8002ea2:	f04f 0100 	mov.w	r1, #0
 8002ea6:	0159      	lsls	r1, r3, #5
 8002ea8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002eac:	0150      	lsls	r0, r2, #5
 8002eae:	4602      	mov	r2, r0
 8002eb0:	460b      	mov	r3, r1
 8002eb2:	4621      	mov	r1, r4
 8002eb4:	1a51      	subs	r1, r2, r1
 8002eb6:	6139      	str	r1, [r7, #16]
 8002eb8:	4629      	mov	r1, r5
 8002eba:	eb63 0301 	sbc.w	r3, r3, r1
 8002ebe:	617b      	str	r3, [r7, #20]
 8002ec0:	f04f 0200 	mov.w	r2, #0
 8002ec4:	f04f 0300 	mov.w	r3, #0
 8002ec8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ecc:	4659      	mov	r1, fp
 8002ece:	018b      	lsls	r3, r1, #6
 8002ed0:	4651      	mov	r1, sl
 8002ed2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ed6:	4651      	mov	r1, sl
 8002ed8:	018a      	lsls	r2, r1, #6
 8002eda:	4651      	mov	r1, sl
 8002edc:	ebb2 0801 	subs.w	r8, r2, r1
 8002ee0:	4659      	mov	r1, fp
 8002ee2:	eb63 0901 	sbc.w	r9, r3, r1
 8002ee6:	f04f 0200 	mov.w	r2, #0
 8002eea:	f04f 0300 	mov.w	r3, #0
 8002eee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ef2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002ef6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002efa:	4690      	mov	r8, r2
 8002efc:	4699      	mov	r9, r3
 8002efe:	4623      	mov	r3, r4
 8002f00:	eb18 0303 	adds.w	r3, r8, r3
 8002f04:	60bb      	str	r3, [r7, #8]
 8002f06:	462b      	mov	r3, r5
 8002f08:	eb49 0303 	adc.w	r3, r9, r3
 8002f0c:	60fb      	str	r3, [r7, #12]
 8002f0e:	f04f 0200 	mov.w	r2, #0
 8002f12:	f04f 0300 	mov.w	r3, #0
 8002f16:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002f1a:	4629      	mov	r1, r5
 8002f1c:	024b      	lsls	r3, r1, #9
 8002f1e:	4621      	mov	r1, r4
 8002f20:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002f24:	4621      	mov	r1, r4
 8002f26:	024a      	lsls	r2, r1, #9
 8002f28:	4610      	mov	r0, r2
 8002f2a:	4619      	mov	r1, r3
 8002f2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f2e:	2200      	movs	r2, #0
 8002f30:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f32:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002f34:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002f38:	f7fd f95a 	bl	80001f0 <__aeabi_uldivmod>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	460b      	mov	r3, r1
 8002f40:	4613      	mov	r3, r2
 8002f42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f44:	e058      	b.n	8002ff8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f46:	4b38      	ldr	r3, [pc, #224]	; (8003028 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	099b      	lsrs	r3, r3, #6
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	4618      	mov	r0, r3
 8002f50:	4611      	mov	r1, r2
 8002f52:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002f56:	623b      	str	r3, [r7, #32]
 8002f58:	2300      	movs	r3, #0
 8002f5a:	627b      	str	r3, [r7, #36]	; 0x24
 8002f5c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002f60:	4642      	mov	r2, r8
 8002f62:	464b      	mov	r3, r9
 8002f64:	f04f 0000 	mov.w	r0, #0
 8002f68:	f04f 0100 	mov.w	r1, #0
 8002f6c:	0159      	lsls	r1, r3, #5
 8002f6e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f72:	0150      	lsls	r0, r2, #5
 8002f74:	4602      	mov	r2, r0
 8002f76:	460b      	mov	r3, r1
 8002f78:	4641      	mov	r1, r8
 8002f7a:	ebb2 0a01 	subs.w	sl, r2, r1
 8002f7e:	4649      	mov	r1, r9
 8002f80:	eb63 0b01 	sbc.w	fp, r3, r1
 8002f84:	f04f 0200 	mov.w	r2, #0
 8002f88:	f04f 0300 	mov.w	r3, #0
 8002f8c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002f90:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002f94:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002f98:	ebb2 040a 	subs.w	r4, r2, sl
 8002f9c:	eb63 050b 	sbc.w	r5, r3, fp
 8002fa0:	f04f 0200 	mov.w	r2, #0
 8002fa4:	f04f 0300 	mov.w	r3, #0
 8002fa8:	00eb      	lsls	r3, r5, #3
 8002faa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002fae:	00e2      	lsls	r2, r4, #3
 8002fb0:	4614      	mov	r4, r2
 8002fb2:	461d      	mov	r5, r3
 8002fb4:	4643      	mov	r3, r8
 8002fb6:	18e3      	adds	r3, r4, r3
 8002fb8:	603b      	str	r3, [r7, #0]
 8002fba:	464b      	mov	r3, r9
 8002fbc:	eb45 0303 	adc.w	r3, r5, r3
 8002fc0:	607b      	str	r3, [r7, #4]
 8002fc2:	f04f 0200 	mov.w	r2, #0
 8002fc6:	f04f 0300 	mov.w	r3, #0
 8002fca:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002fce:	4629      	mov	r1, r5
 8002fd0:	028b      	lsls	r3, r1, #10
 8002fd2:	4621      	mov	r1, r4
 8002fd4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002fd8:	4621      	mov	r1, r4
 8002fda:	028a      	lsls	r2, r1, #10
 8002fdc:	4610      	mov	r0, r2
 8002fde:	4619      	mov	r1, r3
 8002fe0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	61bb      	str	r3, [r7, #24]
 8002fe6:	61fa      	str	r2, [r7, #28]
 8002fe8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002fec:	f7fd f900 	bl	80001f0 <__aeabi_uldivmod>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	460b      	mov	r3, r1
 8002ff4:	4613      	mov	r3, r2
 8002ff6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ff8:	4b0b      	ldr	r3, [pc, #44]	; (8003028 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	0c1b      	lsrs	r3, r3, #16
 8002ffe:	f003 0303 	and.w	r3, r3, #3
 8003002:	3301      	adds	r3, #1
 8003004:	005b      	lsls	r3, r3, #1
 8003006:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003008:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800300a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800300c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003010:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003012:	e002      	b.n	800301a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003014:	4b05      	ldr	r3, [pc, #20]	; (800302c <HAL_RCC_GetSysClockFreq+0x204>)
 8003016:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003018:	bf00      	nop
    }
  }
  return sysclockfreq;
 800301a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800301c:	4618      	mov	r0, r3
 800301e:	3750      	adds	r7, #80	; 0x50
 8003020:	46bd      	mov	sp, r7
 8003022:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003026:	bf00      	nop
 8003028:	40023800 	.word	0x40023800
 800302c:	00f42400 	.word	0x00f42400
 8003030:	007a1200 	.word	0x007a1200

08003034 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003034:	b480      	push	{r7}
 8003036:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003038:	4b03      	ldr	r3, [pc, #12]	; (8003048 <HAL_RCC_GetHCLKFreq+0x14>)
 800303a:	681b      	ldr	r3, [r3, #0]
}
 800303c:	4618      	mov	r0, r3
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr
 8003046:	bf00      	nop
 8003048:	20000000 	.word	0x20000000

0800304c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003050:	f7ff fff0 	bl	8003034 <HAL_RCC_GetHCLKFreq>
 8003054:	4602      	mov	r2, r0
 8003056:	4b05      	ldr	r3, [pc, #20]	; (800306c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	0a9b      	lsrs	r3, r3, #10
 800305c:	f003 0307 	and.w	r3, r3, #7
 8003060:	4903      	ldr	r1, [pc, #12]	; (8003070 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003062:	5ccb      	ldrb	r3, [r1, r3]
 8003064:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003068:	4618      	mov	r0, r3
 800306a:	bd80      	pop	{r7, pc}
 800306c:	40023800 	.word	0x40023800
 8003070:	080070cc 	.word	0x080070cc

08003074 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003078:	f7ff ffdc 	bl	8003034 <HAL_RCC_GetHCLKFreq>
 800307c:	4602      	mov	r2, r0
 800307e:	4b05      	ldr	r3, [pc, #20]	; (8003094 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	0b5b      	lsrs	r3, r3, #13
 8003084:	f003 0307 	and.w	r3, r3, #7
 8003088:	4903      	ldr	r1, [pc, #12]	; (8003098 <HAL_RCC_GetPCLK2Freq+0x24>)
 800308a:	5ccb      	ldrb	r3, [r1, r3]
 800308c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003090:	4618      	mov	r0, r3
 8003092:	bd80      	pop	{r7, pc}
 8003094:	40023800 	.word	0x40023800
 8003098:	080070cc 	.word	0x080070cc

0800309c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800309c:	b480      	push	{r7}
 800309e:	b083      	sub	sp, #12
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	220f      	movs	r2, #15
 80030aa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80030ac:	4b12      	ldr	r3, [pc, #72]	; (80030f8 <HAL_RCC_GetClockConfig+0x5c>)
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	f003 0203 	and.w	r2, r3, #3
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80030b8:	4b0f      	ldr	r3, [pc, #60]	; (80030f8 <HAL_RCC_GetClockConfig+0x5c>)
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80030c4:	4b0c      	ldr	r3, [pc, #48]	; (80030f8 <HAL_RCC_GetClockConfig+0x5c>)
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80030d0:	4b09      	ldr	r3, [pc, #36]	; (80030f8 <HAL_RCC_GetClockConfig+0x5c>)
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	08db      	lsrs	r3, r3, #3
 80030d6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80030de:	4b07      	ldr	r3, [pc, #28]	; (80030fc <HAL_RCC_GetClockConfig+0x60>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 020f 	and.w	r2, r3, #15
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	601a      	str	r2, [r3, #0]
}
 80030ea:	bf00      	nop
 80030ec:	370c      	adds	r7, #12
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr
 80030f6:	bf00      	nop
 80030f8:	40023800 	.word	0x40023800
 80030fc:	40023c00 	.word	0x40023c00

08003100 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b082      	sub	sp, #8
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d101      	bne.n	8003112 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e041      	b.n	8003196 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003118:	b2db      	uxtb	r3, r3
 800311a:	2b00      	cmp	r3, #0
 800311c:	d106      	bne.n	800312c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2200      	movs	r2, #0
 8003122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f000 f839 	bl	800319e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2202      	movs	r2, #2
 8003130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	3304      	adds	r3, #4
 800313c:	4619      	mov	r1, r3
 800313e:	4610      	mov	r0, r2
 8003140:	f000 f9d8 	bl	80034f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2201      	movs	r2, #1
 8003148:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2201      	movs	r2, #1
 8003150:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2201      	movs	r2, #1
 8003158:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2201      	movs	r2, #1
 8003160:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2201      	movs	r2, #1
 8003168:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2201      	movs	r2, #1
 8003170:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2201      	movs	r2, #1
 8003178:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2201      	movs	r2, #1
 8003180:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2201      	movs	r2, #1
 8003188:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2201      	movs	r2, #1
 8003190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003194:	2300      	movs	r3, #0
}
 8003196:	4618      	mov	r0, r3
 8003198:	3708      	adds	r7, #8
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}

0800319e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800319e:	b480      	push	{r7}
 80031a0:	b083      	sub	sp, #12
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80031a6:	bf00      	nop
 80031a8:	370c      	adds	r7, #12
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr
	...

080031b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b085      	sub	sp, #20
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031c2:	b2db      	uxtb	r3, r3
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d001      	beq.n	80031cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	e04e      	b.n	800326a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2202      	movs	r2, #2
 80031d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	68da      	ldr	r2, [r3, #12]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f042 0201 	orr.w	r2, r2, #1
 80031e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a23      	ldr	r2, [pc, #140]	; (8003278 <HAL_TIM_Base_Start_IT+0xc4>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d022      	beq.n	8003234 <HAL_TIM_Base_Start_IT+0x80>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031f6:	d01d      	beq.n	8003234 <HAL_TIM_Base_Start_IT+0x80>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a1f      	ldr	r2, [pc, #124]	; (800327c <HAL_TIM_Base_Start_IT+0xc8>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d018      	beq.n	8003234 <HAL_TIM_Base_Start_IT+0x80>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a1e      	ldr	r2, [pc, #120]	; (8003280 <HAL_TIM_Base_Start_IT+0xcc>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d013      	beq.n	8003234 <HAL_TIM_Base_Start_IT+0x80>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a1c      	ldr	r2, [pc, #112]	; (8003284 <HAL_TIM_Base_Start_IT+0xd0>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d00e      	beq.n	8003234 <HAL_TIM_Base_Start_IT+0x80>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a1b      	ldr	r2, [pc, #108]	; (8003288 <HAL_TIM_Base_Start_IT+0xd4>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d009      	beq.n	8003234 <HAL_TIM_Base_Start_IT+0x80>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a19      	ldr	r2, [pc, #100]	; (800328c <HAL_TIM_Base_Start_IT+0xd8>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d004      	beq.n	8003234 <HAL_TIM_Base_Start_IT+0x80>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a18      	ldr	r2, [pc, #96]	; (8003290 <HAL_TIM_Base_Start_IT+0xdc>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d111      	bne.n	8003258 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	f003 0307 	and.w	r3, r3, #7
 800323e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2b06      	cmp	r3, #6
 8003244:	d010      	beq.n	8003268 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f042 0201 	orr.w	r2, r2, #1
 8003254:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003256:	e007      	b.n	8003268 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f042 0201 	orr.w	r2, r2, #1
 8003266:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003268:	2300      	movs	r3, #0
}
 800326a:	4618      	mov	r0, r3
 800326c:	3714      	adds	r7, #20
 800326e:	46bd      	mov	sp, r7
 8003270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003274:	4770      	bx	lr
 8003276:	bf00      	nop
 8003278:	40010000 	.word	0x40010000
 800327c:	40000400 	.word	0x40000400
 8003280:	40000800 	.word	0x40000800
 8003284:	40000c00 	.word	0x40000c00
 8003288:	40010400 	.word	0x40010400
 800328c:	40014000 	.word	0x40014000
 8003290:	40001800 	.word	0x40001800

08003294 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b082      	sub	sp, #8
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	691b      	ldr	r3, [r3, #16]
 80032a2:	f003 0302 	and.w	r3, r3, #2
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d122      	bne.n	80032f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	f003 0302 	and.w	r3, r3, #2
 80032b4:	2b02      	cmp	r3, #2
 80032b6:	d11b      	bne.n	80032f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f06f 0202 	mvn.w	r2, #2
 80032c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2201      	movs	r2, #1
 80032c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	699b      	ldr	r3, [r3, #24]
 80032ce:	f003 0303 	and.w	r3, r3, #3
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d003      	beq.n	80032de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f000 f8ee 	bl	80034b8 <HAL_TIM_IC_CaptureCallback>
 80032dc:	e005      	b.n	80032ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f000 f8e0 	bl	80034a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	f000 f8f1 	bl	80034cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2200      	movs	r2, #0
 80032ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	691b      	ldr	r3, [r3, #16]
 80032f6:	f003 0304 	and.w	r3, r3, #4
 80032fa:	2b04      	cmp	r3, #4
 80032fc:	d122      	bne.n	8003344 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	f003 0304 	and.w	r3, r3, #4
 8003308:	2b04      	cmp	r3, #4
 800330a:	d11b      	bne.n	8003344 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f06f 0204 	mvn.w	r2, #4
 8003314:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2202      	movs	r2, #2
 800331a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	699b      	ldr	r3, [r3, #24]
 8003322:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003326:	2b00      	cmp	r3, #0
 8003328:	d003      	beq.n	8003332 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	f000 f8c4 	bl	80034b8 <HAL_TIM_IC_CaptureCallback>
 8003330:	e005      	b.n	800333e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f000 f8b6 	bl	80034a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	f000 f8c7 	bl	80034cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2200      	movs	r2, #0
 8003342:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	691b      	ldr	r3, [r3, #16]
 800334a:	f003 0308 	and.w	r3, r3, #8
 800334e:	2b08      	cmp	r3, #8
 8003350:	d122      	bne.n	8003398 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	f003 0308 	and.w	r3, r3, #8
 800335c:	2b08      	cmp	r3, #8
 800335e:	d11b      	bne.n	8003398 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f06f 0208 	mvn.w	r2, #8
 8003368:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2204      	movs	r2, #4
 800336e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	69db      	ldr	r3, [r3, #28]
 8003376:	f003 0303 	and.w	r3, r3, #3
 800337a:	2b00      	cmp	r3, #0
 800337c:	d003      	beq.n	8003386 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f000 f89a 	bl	80034b8 <HAL_TIM_IC_CaptureCallback>
 8003384:	e005      	b.n	8003392 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f000 f88c 	bl	80034a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	f000 f89d 	bl	80034cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2200      	movs	r2, #0
 8003396:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	691b      	ldr	r3, [r3, #16]
 800339e:	f003 0310 	and.w	r3, r3, #16
 80033a2:	2b10      	cmp	r3, #16
 80033a4:	d122      	bne.n	80033ec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	f003 0310 	and.w	r3, r3, #16
 80033b0:	2b10      	cmp	r3, #16
 80033b2:	d11b      	bne.n	80033ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f06f 0210 	mvn.w	r2, #16
 80033bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2208      	movs	r2, #8
 80033c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	69db      	ldr	r3, [r3, #28]
 80033ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d003      	beq.n	80033da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f000 f870 	bl	80034b8 <HAL_TIM_IC_CaptureCallback>
 80033d8:	e005      	b.n	80033e6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f000 f862 	bl	80034a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	f000 f873 	bl	80034cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2200      	movs	r2, #0
 80033ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	691b      	ldr	r3, [r3, #16]
 80033f2:	f003 0301 	and.w	r3, r3, #1
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	d10e      	bne.n	8003418 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	68db      	ldr	r3, [r3, #12]
 8003400:	f003 0301 	and.w	r3, r3, #1
 8003404:	2b01      	cmp	r3, #1
 8003406:	d107      	bne.n	8003418 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f06f 0201 	mvn.w	r2, #1
 8003410:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f7fd ffd4 	bl	80013c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	691b      	ldr	r3, [r3, #16]
 800341e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003422:	2b80      	cmp	r3, #128	; 0x80
 8003424:	d10e      	bne.n	8003444 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	68db      	ldr	r3, [r3, #12]
 800342c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003430:	2b80      	cmp	r3, #128	; 0x80
 8003432:	d107      	bne.n	8003444 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800343c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f000 f902 	bl	8003648 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	691b      	ldr	r3, [r3, #16]
 800344a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800344e:	2b40      	cmp	r3, #64	; 0x40
 8003450:	d10e      	bne.n	8003470 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800345c:	2b40      	cmp	r3, #64	; 0x40
 800345e:	d107      	bne.n	8003470 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003468:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f000 f838 	bl	80034e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	691b      	ldr	r3, [r3, #16]
 8003476:	f003 0320 	and.w	r3, r3, #32
 800347a:	2b20      	cmp	r3, #32
 800347c:	d10e      	bne.n	800349c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	f003 0320 	and.w	r3, r3, #32
 8003488:	2b20      	cmp	r3, #32
 800348a:	d107      	bne.n	800349c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f06f 0220 	mvn.w	r2, #32
 8003494:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f000 f8cc 	bl	8003634 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800349c:	bf00      	nop
 800349e:	3708      	adds	r7, #8
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}

080034a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b083      	sub	sp, #12
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80034ac:	bf00      	nop
 80034ae:	370c      	adds	r7, #12
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr

080034b8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b083      	sub	sp, #12
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80034c0:	bf00      	nop
 80034c2:	370c      	adds	r7, #12
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr

080034cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b083      	sub	sp, #12
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80034d4:	bf00      	nop
 80034d6:	370c      	adds	r7, #12
 80034d8:	46bd      	mov	sp, r7
 80034da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034de:	4770      	bx	lr

080034e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b083      	sub	sp, #12
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80034e8:	bf00      	nop
 80034ea:	370c      	adds	r7, #12
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr

080034f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b085      	sub	sp, #20
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
 80034fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	4a40      	ldr	r2, [pc, #256]	; (8003608 <TIM_Base_SetConfig+0x114>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d013      	beq.n	8003534 <TIM_Base_SetConfig+0x40>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003512:	d00f      	beq.n	8003534 <TIM_Base_SetConfig+0x40>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	4a3d      	ldr	r2, [pc, #244]	; (800360c <TIM_Base_SetConfig+0x118>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d00b      	beq.n	8003534 <TIM_Base_SetConfig+0x40>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	4a3c      	ldr	r2, [pc, #240]	; (8003610 <TIM_Base_SetConfig+0x11c>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d007      	beq.n	8003534 <TIM_Base_SetConfig+0x40>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	4a3b      	ldr	r2, [pc, #236]	; (8003614 <TIM_Base_SetConfig+0x120>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d003      	beq.n	8003534 <TIM_Base_SetConfig+0x40>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	4a3a      	ldr	r2, [pc, #232]	; (8003618 <TIM_Base_SetConfig+0x124>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d108      	bne.n	8003546 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800353a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	68fa      	ldr	r2, [r7, #12]
 8003542:	4313      	orrs	r3, r2
 8003544:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4a2f      	ldr	r2, [pc, #188]	; (8003608 <TIM_Base_SetConfig+0x114>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d02b      	beq.n	80035a6 <TIM_Base_SetConfig+0xb2>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003554:	d027      	beq.n	80035a6 <TIM_Base_SetConfig+0xb2>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4a2c      	ldr	r2, [pc, #176]	; (800360c <TIM_Base_SetConfig+0x118>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d023      	beq.n	80035a6 <TIM_Base_SetConfig+0xb2>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4a2b      	ldr	r2, [pc, #172]	; (8003610 <TIM_Base_SetConfig+0x11c>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d01f      	beq.n	80035a6 <TIM_Base_SetConfig+0xb2>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4a2a      	ldr	r2, [pc, #168]	; (8003614 <TIM_Base_SetConfig+0x120>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d01b      	beq.n	80035a6 <TIM_Base_SetConfig+0xb2>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4a29      	ldr	r2, [pc, #164]	; (8003618 <TIM_Base_SetConfig+0x124>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d017      	beq.n	80035a6 <TIM_Base_SetConfig+0xb2>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4a28      	ldr	r2, [pc, #160]	; (800361c <TIM_Base_SetConfig+0x128>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d013      	beq.n	80035a6 <TIM_Base_SetConfig+0xb2>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4a27      	ldr	r2, [pc, #156]	; (8003620 <TIM_Base_SetConfig+0x12c>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d00f      	beq.n	80035a6 <TIM_Base_SetConfig+0xb2>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a26      	ldr	r2, [pc, #152]	; (8003624 <TIM_Base_SetConfig+0x130>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d00b      	beq.n	80035a6 <TIM_Base_SetConfig+0xb2>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4a25      	ldr	r2, [pc, #148]	; (8003628 <TIM_Base_SetConfig+0x134>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d007      	beq.n	80035a6 <TIM_Base_SetConfig+0xb2>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	4a24      	ldr	r2, [pc, #144]	; (800362c <TIM_Base_SetConfig+0x138>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d003      	beq.n	80035a6 <TIM_Base_SetConfig+0xb2>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4a23      	ldr	r2, [pc, #140]	; (8003630 <TIM_Base_SetConfig+0x13c>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d108      	bne.n	80035b8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	68db      	ldr	r3, [r3, #12]
 80035b2:	68fa      	ldr	r2, [r7, #12]
 80035b4:	4313      	orrs	r3, r2
 80035b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	695b      	ldr	r3, [r3, #20]
 80035c2:	4313      	orrs	r3, r2
 80035c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	68fa      	ldr	r2, [r7, #12]
 80035ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	689a      	ldr	r2, [r3, #8]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	4a0a      	ldr	r2, [pc, #40]	; (8003608 <TIM_Base_SetConfig+0x114>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d003      	beq.n	80035ec <TIM_Base_SetConfig+0xf8>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	4a0c      	ldr	r2, [pc, #48]	; (8003618 <TIM_Base_SetConfig+0x124>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d103      	bne.n	80035f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	691a      	ldr	r2, [r3, #16]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2201      	movs	r2, #1
 80035f8:	615a      	str	r2, [r3, #20]
}
 80035fa:	bf00      	nop
 80035fc:	3714      	adds	r7, #20
 80035fe:	46bd      	mov	sp, r7
 8003600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003604:	4770      	bx	lr
 8003606:	bf00      	nop
 8003608:	40010000 	.word	0x40010000
 800360c:	40000400 	.word	0x40000400
 8003610:	40000800 	.word	0x40000800
 8003614:	40000c00 	.word	0x40000c00
 8003618:	40010400 	.word	0x40010400
 800361c:	40014000 	.word	0x40014000
 8003620:	40014400 	.word	0x40014400
 8003624:	40014800 	.word	0x40014800
 8003628:	40001800 	.word	0x40001800
 800362c:	40001c00 	.word	0x40001c00
 8003630:	40002000 	.word	0x40002000

08003634 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003634:	b480      	push	{r7}
 8003636:	b083      	sub	sp, #12
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800363c:	bf00      	nop
 800363e:	370c      	adds	r7, #12
 8003640:	46bd      	mov	sp, r7
 8003642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003646:	4770      	bx	lr

08003648 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003648:	b480      	push	{r7}
 800364a:	b083      	sub	sp, #12
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003650:	bf00      	nop
 8003652:	370c      	adds	r7, #12
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr

0800365c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b082      	sub	sp, #8
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d101      	bne.n	800366e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e03f      	b.n	80036ee <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003674:	b2db      	uxtb	r3, r3
 8003676:	2b00      	cmp	r3, #0
 8003678:	d106      	bne.n	8003688 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2200      	movs	r2, #0
 800367e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f7fd ffa6 	bl	80015d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2224      	movs	r2, #36	; 0x24
 800368c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	68da      	ldr	r2, [r3, #12]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800369e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f000 f829 	bl	80036f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	691a      	ldr	r2, [r3, #16]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80036b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	695a      	ldr	r2, [r3, #20]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80036c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	68da      	ldr	r2, [r3, #12]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80036d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2200      	movs	r2, #0
 80036da:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2220      	movs	r2, #32
 80036e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2220      	movs	r2, #32
 80036e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80036ec:	2300      	movs	r3, #0
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3708      	adds	r7, #8
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
	...

080036f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036fc:	b0c0      	sub	sp, #256	; 0x100
 80036fe:	af00      	add	r7, sp, #0
 8003700:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003704:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	691b      	ldr	r3, [r3, #16]
 800370c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003714:	68d9      	ldr	r1, [r3, #12]
 8003716:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	ea40 0301 	orr.w	r3, r0, r1
 8003720:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003722:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003726:	689a      	ldr	r2, [r3, #8]
 8003728:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800372c:	691b      	ldr	r3, [r3, #16]
 800372e:	431a      	orrs	r2, r3
 8003730:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003734:	695b      	ldr	r3, [r3, #20]
 8003736:	431a      	orrs	r2, r3
 8003738:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800373c:	69db      	ldr	r3, [r3, #28]
 800373e:	4313      	orrs	r3, r2
 8003740:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003744:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	68db      	ldr	r3, [r3, #12]
 800374c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003750:	f021 010c 	bic.w	r1, r1, #12
 8003754:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800375e:	430b      	orrs	r3, r1
 8003760:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003762:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	695b      	ldr	r3, [r3, #20]
 800376a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800376e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003772:	6999      	ldr	r1, [r3, #24]
 8003774:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	ea40 0301 	orr.w	r3, r0, r1
 800377e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003780:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	4b8f      	ldr	r3, [pc, #572]	; (80039c4 <UART_SetConfig+0x2cc>)
 8003788:	429a      	cmp	r2, r3
 800378a:	d005      	beq.n	8003798 <UART_SetConfig+0xa0>
 800378c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	4b8d      	ldr	r3, [pc, #564]	; (80039c8 <UART_SetConfig+0x2d0>)
 8003794:	429a      	cmp	r2, r3
 8003796:	d104      	bne.n	80037a2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003798:	f7ff fc6c 	bl	8003074 <HAL_RCC_GetPCLK2Freq>
 800379c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80037a0:	e003      	b.n	80037aa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80037a2:	f7ff fc53 	bl	800304c <HAL_RCC_GetPCLK1Freq>
 80037a6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037ae:	69db      	ldr	r3, [r3, #28]
 80037b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037b4:	f040 810c 	bne.w	80039d0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80037b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037bc:	2200      	movs	r2, #0
 80037be:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80037c2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80037c6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80037ca:	4622      	mov	r2, r4
 80037cc:	462b      	mov	r3, r5
 80037ce:	1891      	adds	r1, r2, r2
 80037d0:	65b9      	str	r1, [r7, #88]	; 0x58
 80037d2:	415b      	adcs	r3, r3
 80037d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80037d6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80037da:	4621      	mov	r1, r4
 80037dc:	eb12 0801 	adds.w	r8, r2, r1
 80037e0:	4629      	mov	r1, r5
 80037e2:	eb43 0901 	adc.w	r9, r3, r1
 80037e6:	f04f 0200 	mov.w	r2, #0
 80037ea:	f04f 0300 	mov.w	r3, #0
 80037ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80037f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80037f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80037fa:	4690      	mov	r8, r2
 80037fc:	4699      	mov	r9, r3
 80037fe:	4623      	mov	r3, r4
 8003800:	eb18 0303 	adds.w	r3, r8, r3
 8003804:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003808:	462b      	mov	r3, r5
 800380a:	eb49 0303 	adc.w	r3, r9, r3
 800380e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003812:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	2200      	movs	r2, #0
 800381a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800381e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003822:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003826:	460b      	mov	r3, r1
 8003828:	18db      	adds	r3, r3, r3
 800382a:	653b      	str	r3, [r7, #80]	; 0x50
 800382c:	4613      	mov	r3, r2
 800382e:	eb42 0303 	adc.w	r3, r2, r3
 8003832:	657b      	str	r3, [r7, #84]	; 0x54
 8003834:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003838:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800383c:	f7fc fcd8 	bl	80001f0 <__aeabi_uldivmod>
 8003840:	4602      	mov	r2, r0
 8003842:	460b      	mov	r3, r1
 8003844:	4b61      	ldr	r3, [pc, #388]	; (80039cc <UART_SetConfig+0x2d4>)
 8003846:	fba3 2302 	umull	r2, r3, r3, r2
 800384a:	095b      	lsrs	r3, r3, #5
 800384c:	011c      	lsls	r4, r3, #4
 800384e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003852:	2200      	movs	r2, #0
 8003854:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003858:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800385c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003860:	4642      	mov	r2, r8
 8003862:	464b      	mov	r3, r9
 8003864:	1891      	adds	r1, r2, r2
 8003866:	64b9      	str	r1, [r7, #72]	; 0x48
 8003868:	415b      	adcs	r3, r3
 800386a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800386c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003870:	4641      	mov	r1, r8
 8003872:	eb12 0a01 	adds.w	sl, r2, r1
 8003876:	4649      	mov	r1, r9
 8003878:	eb43 0b01 	adc.w	fp, r3, r1
 800387c:	f04f 0200 	mov.w	r2, #0
 8003880:	f04f 0300 	mov.w	r3, #0
 8003884:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003888:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800388c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003890:	4692      	mov	sl, r2
 8003892:	469b      	mov	fp, r3
 8003894:	4643      	mov	r3, r8
 8003896:	eb1a 0303 	adds.w	r3, sl, r3
 800389a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800389e:	464b      	mov	r3, r9
 80038a0:	eb4b 0303 	adc.w	r3, fp, r3
 80038a4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80038a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	2200      	movs	r2, #0
 80038b0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80038b4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80038b8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80038bc:	460b      	mov	r3, r1
 80038be:	18db      	adds	r3, r3, r3
 80038c0:	643b      	str	r3, [r7, #64]	; 0x40
 80038c2:	4613      	mov	r3, r2
 80038c4:	eb42 0303 	adc.w	r3, r2, r3
 80038c8:	647b      	str	r3, [r7, #68]	; 0x44
 80038ca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80038ce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80038d2:	f7fc fc8d 	bl	80001f0 <__aeabi_uldivmod>
 80038d6:	4602      	mov	r2, r0
 80038d8:	460b      	mov	r3, r1
 80038da:	4611      	mov	r1, r2
 80038dc:	4b3b      	ldr	r3, [pc, #236]	; (80039cc <UART_SetConfig+0x2d4>)
 80038de:	fba3 2301 	umull	r2, r3, r3, r1
 80038e2:	095b      	lsrs	r3, r3, #5
 80038e4:	2264      	movs	r2, #100	; 0x64
 80038e6:	fb02 f303 	mul.w	r3, r2, r3
 80038ea:	1acb      	subs	r3, r1, r3
 80038ec:	00db      	lsls	r3, r3, #3
 80038ee:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80038f2:	4b36      	ldr	r3, [pc, #216]	; (80039cc <UART_SetConfig+0x2d4>)
 80038f4:	fba3 2302 	umull	r2, r3, r3, r2
 80038f8:	095b      	lsrs	r3, r3, #5
 80038fa:	005b      	lsls	r3, r3, #1
 80038fc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003900:	441c      	add	r4, r3
 8003902:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003906:	2200      	movs	r2, #0
 8003908:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800390c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003910:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003914:	4642      	mov	r2, r8
 8003916:	464b      	mov	r3, r9
 8003918:	1891      	adds	r1, r2, r2
 800391a:	63b9      	str	r1, [r7, #56]	; 0x38
 800391c:	415b      	adcs	r3, r3
 800391e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003920:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003924:	4641      	mov	r1, r8
 8003926:	1851      	adds	r1, r2, r1
 8003928:	6339      	str	r1, [r7, #48]	; 0x30
 800392a:	4649      	mov	r1, r9
 800392c:	414b      	adcs	r3, r1
 800392e:	637b      	str	r3, [r7, #52]	; 0x34
 8003930:	f04f 0200 	mov.w	r2, #0
 8003934:	f04f 0300 	mov.w	r3, #0
 8003938:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800393c:	4659      	mov	r1, fp
 800393e:	00cb      	lsls	r3, r1, #3
 8003940:	4651      	mov	r1, sl
 8003942:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003946:	4651      	mov	r1, sl
 8003948:	00ca      	lsls	r2, r1, #3
 800394a:	4610      	mov	r0, r2
 800394c:	4619      	mov	r1, r3
 800394e:	4603      	mov	r3, r0
 8003950:	4642      	mov	r2, r8
 8003952:	189b      	adds	r3, r3, r2
 8003954:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003958:	464b      	mov	r3, r9
 800395a:	460a      	mov	r2, r1
 800395c:	eb42 0303 	adc.w	r3, r2, r3
 8003960:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003964:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	2200      	movs	r2, #0
 800396c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003970:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003974:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003978:	460b      	mov	r3, r1
 800397a:	18db      	adds	r3, r3, r3
 800397c:	62bb      	str	r3, [r7, #40]	; 0x28
 800397e:	4613      	mov	r3, r2
 8003980:	eb42 0303 	adc.w	r3, r2, r3
 8003984:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003986:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800398a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800398e:	f7fc fc2f 	bl	80001f0 <__aeabi_uldivmod>
 8003992:	4602      	mov	r2, r0
 8003994:	460b      	mov	r3, r1
 8003996:	4b0d      	ldr	r3, [pc, #52]	; (80039cc <UART_SetConfig+0x2d4>)
 8003998:	fba3 1302 	umull	r1, r3, r3, r2
 800399c:	095b      	lsrs	r3, r3, #5
 800399e:	2164      	movs	r1, #100	; 0x64
 80039a0:	fb01 f303 	mul.w	r3, r1, r3
 80039a4:	1ad3      	subs	r3, r2, r3
 80039a6:	00db      	lsls	r3, r3, #3
 80039a8:	3332      	adds	r3, #50	; 0x32
 80039aa:	4a08      	ldr	r2, [pc, #32]	; (80039cc <UART_SetConfig+0x2d4>)
 80039ac:	fba2 2303 	umull	r2, r3, r2, r3
 80039b0:	095b      	lsrs	r3, r3, #5
 80039b2:	f003 0207 	and.w	r2, r3, #7
 80039b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4422      	add	r2, r4
 80039be:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80039c0:	e106      	b.n	8003bd0 <UART_SetConfig+0x4d8>
 80039c2:	bf00      	nop
 80039c4:	40011000 	.word	0x40011000
 80039c8:	40011400 	.word	0x40011400
 80039cc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80039d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80039d4:	2200      	movs	r2, #0
 80039d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80039da:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80039de:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80039e2:	4642      	mov	r2, r8
 80039e4:	464b      	mov	r3, r9
 80039e6:	1891      	adds	r1, r2, r2
 80039e8:	6239      	str	r1, [r7, #32]
 80039ea:	415b      	adcs	r3, r3
 80039ec:	627b      	str	r3, [r7, #36]	; 0x24
 80039ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80039f2:	4641      	mov	r1, r8
 80039f4:	1854      	adds	r4, r2, r1
 80039f6:	4649      	mov	r1, r9
 80039f8:	eb43 0501 	adc.w	r5, r3, r1
 80039fc:	f04f 0200 	mov.w	r2, #0
 8003a00:	f04f 0300 	mov.w	r3, #0
 8003a04:	00eb      	lsls	r3, r5, #3
 8003a06:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a0a:	00e2      	lsls	r2, r4, #3
 8003a0c:	4614      	mov	r4, r2
 8003a0e:	461d      	mov	r5, r3
 8003a10:	4643      	mov	r3, r8
 8003a12:	18e3      	adds	r3, r4, r3
 8003a14:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003a18:	464b      	mov	r3, r9
 8003a1a:	eb45 0303 	adc.w	r3, r5, r3
 8003a1e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003a22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003a2e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003a32:	f04f 0200 	mov.w	r2, #0
 8003a36:	f04f 0300 	mov.w	r3, #0
 8003a3a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003a3e:	4629      	mov	r1, r5
 8003a40:	008b      	lsls	r3, r1, #2
 8003a42:	4621      	mov	r1, r4
 8003a44:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a48:	4621      	mov	r1, r4
 8003a4a:	008a      	lsls	r2, r1, #2
 8003a4c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003a50:	f7fc fbce 	bl	80001f0 <__aeabi_uldivmod>
 8003a54:	4602      	mov	r2, r0
 8003a56:	460b      	mov	r3, r1
 8003a58:	4b60      	ldr	r3, [pc, #384]	; (8003bdc <UART_SetConfig+0x4e4>)
 8003a5a:	fba3 2302 	umull	r2, r3, r3, r2
 8003a5e:	095b      	lsrs	r3, r3, #5
 8003a60:	011c      	lsls	r4, r3, #4
 8003a62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a66:	2200      	movs	r2, #0
 8003a68:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003a6c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003a70:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003a74:	4642      	mov	r2, r8
 8003a76:	464b      	mov	r3, r9
 8003a78:	1891      	adds	r1, r2, r2
 8003a7a:	61b9      	str	r1, [r7, #24]
 8003a7c:	415b      	adcs	r3, r3
 8003a7e:	61fb      	str	r3, [r7, #28]
 8003a80:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a84:	4641      	mov	r1, r8
 8003a86:	1851      	adds	r1, r2, r1
 8003a88:	6139      	str	r1, [r7, #16]
 8003a8a:	4649      	mov	r1, r9
 8003a8c:	414b      	adcs	r3, r1
 8003a8e:	617b      	str	r3, [r7, #20]
 8003a90:	f04f 0200 	mov.w	r2, #0
 8003a94:	f04f 0300 	mov.w	r3, #0
 8003a98:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003a9c:	4659      	mov	r1, fp
 8003a9e:	00cb      	lsls	r3, r1, #3
 8003aa0:	4651      	mov	r1, sl
 8003aa2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003aa6:	4651      	mov	r1, sl
 8003aa8:	00ca      	lsls	r2, r1, #3
 8003aaa:	4610      	mov	r0, r2
 8003aac:	4619      	mov	r1, r3
 8003aae:	4603      	mov	r3, r0
 8003ab0:	4642      	mov	r2, r8
 8003ab2:	189b      	adds	r3, r3, r2
 8003ab4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003ab8:	464b      	mov	r3, r9
 8003aba:	460a      	mov	r2, r1
 8003abc:	eb42 0303 	adc.w	r3, r2, r3
 8003ac0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003ac4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	2200      	movs	r2, #0
 8003acc:	67bb      	str	r3, [r7, #120]	; 0x78
 8003ace:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003ad0:	f04f 0200 	mov.w	r2, #0
 8003ad4:	f04f 0300 	mov.w	r3, #0
 8003ad8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003adc:	4649      	mov	r1, r9
 8003ade:	008b      	lsls	r3, r1, #2
 8003ae0:	4641      	mov	r1, r8
 8003ae2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ae6:	4641      	mov	r1, r8
 8003ae8:	008a      	lsls	r2, r1, #2
 8003aea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003aee:	f7fc fb7f 	bl	80001f0 <__aeabi_uldivmod>
 8003af2:	4602      	mov	r2, r0
 8003af4:	460b      	mov	r3, r1
 8003af6:	4611      	mov	r1, r2
 8003af8:	4b38      	ldr	r3, [pc, #224]	; (8003bdc <UART_SetConfig+0x4e4>)
 8003afa:	fba3 2301 	umull	r2, r3, r3, r1
 8003afe:	095b      	lsrs	r3, r3, #5
 8003b00:	2264      	movs	r2, #100	; 0x64
 8003b02:	fb02 f303 	mul.w	r3, r2, r3
 8003b06:	1acb      	subs	r3, r1, r3
 8003b08:	011b      	lsls	r3, r3, #4
 8003b0a:	3332      	adds	r3, #50	; 0x32
 8003b0c:	4a33      	ldr	r2, [pc, #204]	; (8003bdc <UART_SetConfig+0x4e4>)
 8003b0e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b12:	095b      	lsrs	r3, r3, #5
 8003b14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b18:	441c      	add	r4, r3
 8003b1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b1e:	2200      	movs	r2, #0
 8003b20:	673b      	str	r3, [r7, #112]	; 0x70
 8003b22:	677a      	str	r2, [r7, #116]	; 0x74
 8003b24:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003b28:	4642      	mov	r2, r8
 8003b2a:	464b      	mov	r3, r9
 8003b2c:	1891      	adds	r1, r2, r2
 8003b2e:	60b9      	str	r1, [r7, #8]
 8003b30:	415b      	adcs	r3, r3
 8003b32:	60fb      	str	r3, [r7, #12]
 8003b34:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b38:	4641      	mov	r1, r8
 8003b3a:	1851      	adds	r1, r2, r1
 8003b3c:	6039      	str	r1, [r7, #0]
 8003b3e:	4649      	mov	r1, r9
 8003b40:	414b      	adcs	r3, r1
 8003b42:	607b      	str	r3, [r7, #4]
 8003b44:	f04f 0200 	mov.w	r2, #0
 8003b48:	f04f 0300 	mov.w	r3, #0
 8003b4c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003b50:	4659      	mov	r1, fp
 8003b52:	00cb      	lsls	r3, r1, #3
 8003b54:	4651      	mov	r1, sl
 8003b56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b5a:	4651      	mov	r1, sl
 8003b5c:	00ca      	lsls	r2, r1, #3
 8003b5e:	4610      	mov	r0, r2
 8003b60:	4619      	mov	r1, r3
 8003b62:	4603      	mov	r3, r0
 8003b64:	4642      	mov	r2, r8
 8003b66:	189b      	adds	r3, r3, r2
 8003b68:	66bb      	str	r3, [r7, #104]	; 0x68
 8003b6a:	464b      	mov	r3, r9
 8003b6c:	460a      	mov	r2, r1
 8003b6e:	eb42 0303 	adc.w	r3, r2, r3
 8003b72:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003b74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	663b      	str	r3, [r7, #96]	; 0x60
 8003b7e:	667a      	str	r2, [r7, #100]	; 0x64
 8003b80:	f04f 0200 	mov.w	r2, #0
 8003b84:	f04f 0300 	mov.w	r3, #0
 8003b88:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003b8c:	4649      	mov	r1, r9
 8003b8e:	008b      	lsls	r3, r1, #2
 8003b90:	4641      	mov	r1, r8
 8003b92:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b96:	4641      	mov	r1, r8
 8003b98:	008a      	lsls	r2, r1, #2
 8003b9a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003b9e:	f7fc fb27 	bl	80001f0 <__aeabi_uldivmod>
 8003ba2:	4602      	mov	r2, r0
 8003ba4:	460b      	mov	r3, r1
 8003ba6:	4b0d      	ldr	r3, [pc, #52]	; (8003bdc <UART_SetConfig+0x4e4>)
 8003ba8:	fba3 1302 	umull	r1, r3, r3, r2
 8003bac:	095b      	lsrs	r3, r3, #5
 8003bae:	2164      	movs	r1, #100	; 0x64
 8003bb0:	fb01 f303 	mul.w	r3, r1, r3
 8003bb4:	1ad3      	subs	r3, r2, r3
 8003bb6:	011b      	lsls	r3, r3, #4
 8003bb8:	3332      	adds	r3, #50	; 0x32
 8003bba:	4a08      	ldr	r2, [pc, #32]	; (8003bdc <UART_SetConfig+0x4e4>)
 8003bbc:	fba2 2303 	umull	r2, r3, r2, r3
 8003bc0:	095b      	lsrs	r3, r3, #5
 8003bc2:	f003 020f 	and.w	r2, r3, #15
 8003bc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4422      	add	r2, r4
 8003bce:	609a      	str	r2, [r3, #8]
}
 8003bd0:	bf00      	nop
 8003bd2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003bdc:	51eb851f 	.word	0x51eb851f

08003be0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003be0:	b084      	sub	sp, #16
 8003be2:	b580      	push	{r7, lr}
 8003be4:	b084      	sub	sp, #16
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	6078      	str	r0, [r7, #4]
 8003bea:	f107 001c 	add.w	r0, r7, #28
 8003bee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d122      	bne.n	8003c3e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bfc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	68db      	ldr	r3, [r3, #12]
 8003c08:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003c0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c10:	687a      	ldr	r2, [r7, #4]
 8003c12:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	68db      	ldr	r3, [r3, #12]
 8003c18:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003c20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d105      	bne.n	8003c32 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	68db      	ldr	r3, [r3, #12]
 8003c2a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f000 faa2 	bl	800417c <USB_CoreReset>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	73fb      	strb	r3, [r7, #15]
 8003c3c:	e01a      	b.n	8003c74 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	68db      	ldr	r3, [r3, #12]
 8003c42:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f000 fa96 	bl	800417c <USB_CoreReset>
 8003c50:	4603      	mov	r3, r0
 8003c52:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003c54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d106      	bne.n	8003c68 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c5e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	639a      	str	r2, [r3, #56]	; 0x38
 8003c66:	e005      	b.n	8003c74 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c6c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	d10b      	bne.n	8003c92 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	f043 0206 	orr.w	r2, r3, #6
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	f043 0220 	orr.w	r2, r3, #32
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003c92:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	3710      	adds	r7, #16
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003c9e:	b004      	add	sp, #16
 8003ca0:	4770      	bx	lr

08003ca2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003ca2:	b480      	push	{r7}
 8003ca4:	b083      	sub	sp, #12
 8003ca6:	af00      	add	r7, sp, #0
 8003ca8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	f023 0201 	bic.w	r2, r3, #1
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003cb6:	2300      	movs	r3, #0
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	370c      	adds	r7, #12
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr

08003cc4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b084      	sub	sp, #16
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
 8003ccc:	460b      	mov	r3, r1
 8003cce:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	68db      	ldr	r3, [r3, #12]
 8003cd8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003ce0:	78fb      	ldrb	r3, [r7, #3]
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	d115      	bne.n	8003d12 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	68db      	ldr	r3, [r3, #12]
 8003cea:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003cf2:	2001      	movs	r0, #1
 8003cf4:	f7fd fe2a 	bl	800194c <HAL_Delay>
      ms++;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	3301      	adds	r3, #1
 8003cfc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f000 fa2e 	bl	8004160 <USB_GetMode>
 8003d04:	4603      	mov	r3, r0
 8003d06:	2b01      	cmp	r3, #1
 8003d08:	d01e      	beq.n	8003d48 <USB_SetCurrentMode+0x84>
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2b31      	cmp	r3, #49	; 0x31
 8003d0e:	d9f0      	bls.n	8003cf2 <USB_SetCurrentMode+0x2e>
 8003d10:	e01a      	b.n	8003d48 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003d12:	78fb      	ldrb	r3, [r7, #3]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d115      	bne.n	8003d44 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	68db      	ldr	r3, [r3, #12]
 8003d1c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003d24:	2001      	movs	r0, #1
 8003d26:	f7fd fe11 	bl	800194c <HAL_Delay>
      ms++;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	3301      	adds	r3, #1
 8003d2e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003d30:	6878      	ldr	r0, [r7, #4]
 8003d32:	f000 fa15 	bl	8004160 <USB_GetMode>
 8003d36:	4603      	mov	r3, r0
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d005      	beq.n	8003d48 <USB_SetCurrentMode+0x84>
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2b31      	cmp	r3, #49	; 0x31
 8003d40:	d9f0      	bls.n	8003d24 <USB_SetCurrentMode+0x60>
 8003d42:	e001      	b.n	8003d48 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003d44:	2301      	movs	r3, #1
 8003d46:	e005      	b.n	8003d54 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2b32      	cmp	r3, #50	; 0x32
 8003d4c:	d101      	bne.n	8003d52 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e000      	b.n	8003d54 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003d52:	2300      	movs	r3, #0
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3710      	adds	r7, #16
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}

08003d5c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003d5c:	b084      	sub	sp, #16
 8003d5e:	b580      	push	{r7, lr}
 8003d60:	b086      	sub	sp, #24
 8003d62:	af00      	add	r7, sp, #0
 8003d64:	6078      	str	r0, [r7, #4]
 8003d66:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003d6a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003d76:	2300      	movs	r3, #0
 8003d78:	613b      	str	r3, [r7, #16]
 8003d7a:	e009      	b.n	8003d90 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003d7c:	687a      	ldr	r2, [r7, #4]
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	3340      	adds	r3, #64	; 0x40
 8003d82:	009b      	lsls	r3, r3, #2
 8003d84:	4413      	add	r3, r2
 8003d86:	2200      	movs	r2, #0
 8003d88:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	3301      	adds	r3, #1
 8003d8e:	613b      	str	r3, [r7, #16]
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	2b0e      	cmp	r3, #14
 8003d94:	d9f2      	bls.n	8003d7c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003d96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d11c      	bne.n	8003dd6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	68fa      	ldr	r2, [r7, #12]
 8003da6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003daa:	f043 0302 	orr.w	r3, r3, #2
 8003dae:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003db4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dc0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dcc:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	639a      	str	r2, [r3, #56]	; 0x38
 8003dd4:	e00b      	b.n	8003dee <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dda:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003de6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003df4:	461a      	mov	r2, r3
 8003df6:	2300      	movs	r3, #0
 8003df8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e00:	4619      	mov	r1, r3
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e08:	461a      	mov	r2, r3
 8003e0a:	680b      	ldr	r3, [r1, #0]
 8003e0c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d10c      	bne.n	8003e2e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d104      	bne.n	8003e24 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003e1a:	2100      	movs	r1, #0
 8003e1c:	6878      	ldr	r0, [r7, #4]
 8003e1e:	f000 f965 	bl	80040ec <USB_SetDevSpeed>
 8003e22:	e008      	b.n	8003e36 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003e24:	2101      	movs	r1, #1
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f000 f960 	bl	80040ec <USB_SetDevSpeed>
 8003e2c:	e003      	b.n	8003e36 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003e2e:	2103      	movs	r1, #3
 8003e30:	6878      	ldr	r0, [r7, #4]
 8003e32:	f000 f95b 	bl	80040ec <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003e36:	2110      	movs	r1, #16
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f000 f8f3 	bl	8004024 <USB_FlushTxFifo>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d001      	beq.n	8003e48 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003e44:	2301      	movs	r3, #1
 8003e46:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003e48:	6878      	ldr	r0, [r7, #4]
 8003e4a:	f000 f91f 	bl	800408c <USB_FlushRxFifo>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d001      	beq.n	8003e58 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e5e:	461a      	mov	r2, r3
 8003e60:	2300      	movs	r3, #0
 8003e62:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e6a:	461a      	mov	r2, r3
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e76:	461a      	mov	r2, r3
 8003e78:	2300      	movs	r3, #0
 8003e7a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	613b      	str	r3, [r7, #16]
 8003e80:	e043      	b.n	8003f0a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	015a      	lsls	r2, r3, #5
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	4413      	add	r3, r2
 8003e8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e94:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e98:	d118      	bne.n	8003ecc <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d10a      	bne.n	8003eb6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	015a      	lsls	r2, r3, #5
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	4413      	add	r3, r2
 8003ea8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003eac:	461a      	mov	r2, r3
 8003eae:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003eb2:	6013      	str	r3, [r2, #0]
 8003eb4:	e013      	b.n	8003ede <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	015a      	lsls	r2, r3, #5
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	4413      	add	r3, r2
 8003ebe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ec2:	461a      	mov	r2, r3
 8003ec4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003ec8:	6013      	str	r3, [r2, #0]
 8003eca:	e008      	b.n	8003ede <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	015a      	lsls	r2, r3, #5
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	4413      	add	r3, r2
 8003ed4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ed8:	461a      	mov	r2, r3
 8003eda:	2300      	movs	r3, #0
 8003edc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	015a      	lsls	r2, r3, #5
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	4413      	add	r3, r2
 8003ee6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003eea:	461a      	mov	r2, r3
 8003eec:	2300      	movs	r3, #0
 8003eee:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	015a      	lsls	r2, r3, #5
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	4413      	add	r3, r2
 8003ef8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003efc:	461a      	mov	r2, r3
 8003efe:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003f02:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	3301      	adds	r3, #1
 8003f08:	613b      	str	r3, [r7, #16]
 8003f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f0c:	693a      	ldr	r2, [r7, #16]
 8003f0e:	429a      	cmp	r2, r3
 8003f10:	d3b7      	bcc.n	8003e82 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003f12:	2300      	movs	r3, #0
 8003f14:	613b      	str	r3, [r7, #16]
 8003f16:	e043      	b.n	8003fa0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	015a      	lsls	r2, r3, #5
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	4413      	add	r3, r2
 8003f20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003f2a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f2e:	d118      	bne.n	8003f62 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d10a      	bne.n	8003f4c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	015a      	lsls	r2, r3, #5
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	4413      	add	r3, r2
 8003f3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f42:	461a      	mov	r2, r3
 8003f44:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003f48:	6013      	str	r3, [r2, #0]
 8003f4a:	e013      	b.n	8003f74 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	015a      	lsls	r2, r3, #5
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	4413      	add	r3, r2
 8003f54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f58:	461a      	mov	r2, r3
 8003f5a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003f5e:	6013      	str	r3, [r2, #0]
 8003f60:	e008      	b.n	8003f74 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	015a      	lsls	r2, r3, #5
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	4413      	add	r3, r2
 8003f6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f6e:	461a      	mov	r2, r3
 8003f70:	2300      	movs	r3, #0
 8003f72:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	015a      	lsls	r2, r3, #5
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	4413      	add	r3, r2
 8003f7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f80:	461a      	mov	r2, r3
 8003f82:	2300      	movs	r3, #0
 8003f84:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	015a      	lsls	r2, r3, #5
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	4413      	add	r3, r2
 8003f8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f92:	461a      	mov	r2, r3
 8003f94:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003f98:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	3301      	adds	r3, #1
 8003f9e:	613b      	str	r3, [r7, #16]
 8003fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa2:	693a      	ldr	r2, [r7, #16]
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d3b7      	bcc.n	8003f18 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fae:	691b      	ldr	r3, [r3, #16]
 8003fb0:	68fa      	ldr	r2, [r7, #12]
 8003fb2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003fb6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003fba:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003fc8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d105      	bne.n	8003fdc <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	699b      	ldr	r3, [r3, #24]
 8003fd4:	f043 0210 	orr.w	r2, r3, #16
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	699a      	ldr	r2, [r3, #24]
 8003fe0:	4b0f      	ldr	r3, [pc, #60]	; (8004020 <USB_DevInit+0x2c4>)
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	687a      	ldr	r2, [r7, #4]
 8003fe6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003fe8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d005      	beq.n	8003ffa <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	699b      	ldr	r3, [r3, #24]
 8003ff2:	f043 0208 	orr.w	r2, r3, #8
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003ffa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d107      	bne.n	8004010 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	699b      	ldr	r3, [r3, #24]
 8004004:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004008:	f043 0304 	orr.w	r3, r3, #4
 800400c:	687a      	ldr	r2, [r7, #4]
 800400e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004010:	7dfb      	ldrb	r3, [r7, #23]
}
 8004012:	4618      	mov	r0, r3
 8004014:	3718      	adds	r7, #24
 8004016:	46bd      	mov	sp, r7
 8004018:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800401c:	b004      	add	sp, #16
 800401e:	4770      	bx	lr
 8004020:	803c3800 	.word	0x803c3800

08004024 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004024:	b480      	push	{r7}
 8004026:	b085      	sub	sp, #20
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
 800402c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800402e:	2300      	movs	r3, #0
 8004030:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	3301      	adds	r3, #1
 8004036:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	4a13      	ldr	r2, [pc, #76]	; (8004088 <USB_FlushTxFifo+0x64>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d901      	bls.n	8004044 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004040:	2303      	movs	r3, #3
 8004042:	e01b      	b.n	800407c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	691b      	ldr	r3, [r3, #16]
 8004048:	2b00      	cmp	r3, #0
 800404a:	daf2      	bge.n	8004032 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800404c:	2300      	movs	r3, #0
 800404e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	019b      	lsls	r3, r3, #6
 8004054:	f043 0220 	orr.w	r2, r3, #32
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	3301      	adds	r3, #1
 8004060:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	4a08      	ldr	r2, [pc, #32]	; (8004088 <USB_FlushTxFifo+0x64>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d901      	bls.n	800406e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800406a:	2303      	movs	r3, #3
 800406c:	e006      	b.n	800407c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	691b      	ldr	r3, [r3, #16]
 8004072:	f003 0320 	and.w	r3, r3, #32
 8004076:	2b20      	cmp	r3, #32
 8004078:	d0f0      	beq.n	800405c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800407a:	2300      	movs	r3, #0
}
 800407c:	4618      	mov	r0, r3
 800407e:	3714      	adds	r7, #20
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr
 8004088:	00030d40 	.word	0x00030d40

0800408c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800408c:	b480      	push	{r7}
 800408e:	b085      	sub	sp, #20
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004094:	2300      	movs	r3, #0
 8004096:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	3301      	adds	r3, #1
 800409c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	4a11      	ldr	r2, [pc, #68]	; (80040e8 <USB_FlushRxFifo+0x5c>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d901      	bls.n	80040aa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80040a6:	2303      	movs	r3, #3
 80040a8:	e018      	b.n	80040dc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	691b      	ldr	r3, [r3, #16]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	daf2      	bge.n	8004098 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80040b2:	2300      	movs	r3, #0
 80040b4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2210      	movs	r2, #16
 80040ba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	3301      	adds	r3, #1
 80040c0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	4a08      	ldr	r2, [pc, #32]	; (80040e8 <USB_FlushRxFifo+0x5c>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d901      	bls.n	80040ce <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80040ca:	2303      	movs	r3, #3
 80040cc:	e006      	b.n	80040dc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	691b      	ldr	r3, [r3, #16]
 80040d2:	f003 0310 	and.w	r3, r3, #16
 80040d6:	2b10      	cmp	r3, #16
 80040d8:	d0f0      	beq.n	80040bc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80040da:	2300      	movs	r3, #0
}
 80040dc:	4618      	mov	r0, r3
 80040de:	3714      	adds	r7, #20
 80040e0:	46bd      	mov	sp, r7
 80040e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e6:	4770      	bx	lr
 80040e8:	00030d40 	.word	0x00030d40

080040ec <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b085      	sub	sp, #20
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
 80040f4:	460b      	mov	r3, r1
 80040f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	78fb      	ldrb	r3, [r7, #3]
 8004106:	68f9      	ldr	r1, [r7, #12]
 8004108:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800410c:	4313      	orrs	r3, r2
 800410e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004110:	2300      	movs	r3, #0
}
 8004112:	4618      	mov	r0, r3
 8004114:	3714      	adds	r7, #20
 8004116:	46bd      	mov	sp, r7
 8004118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411c:	4770      	bx	lr

0800411e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800411e:	b480      	push	{r7}
 8004120:	b085      	sub	sp, #20
 8004122:	af00      	add	r7, sp, #0
 8004124:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	68fa      	ldr	r2, [r7, #12]
 8004134:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004138:	f023 0303 	bic.w	r3, r3, #3
 800413c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	68fa      	ldr	r2, [r7, #12]
 8004148:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800414c:	f043 0302 	orr.w	r3, r3, #2
 8004150:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004152:	2300      	movs	r3, #0
}
 8004154:	4618      	mov	r0, r3
 8004156:	3714      	adds	r7, #20
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr

08004160 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004160:	b480      	push	{r7}
 8004162:	b083      	sub	sp, #12
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	695b      	ldr	r3, [r3, #20]
 800416c:	f003 0301 	and.w	r3, r3, #1
}
 8004170:	4618      	mov	r0, r3
 8004172:	370c      	adds	r7, #12
 8004174:	46bd      	mov	sp, r7
 8004176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417a:	4770      	bx	lr

0800417c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800417c:	b480      	push	{r7}
 800417e:	b085      	sub	sp, #20
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004184:	2300      	movs	r3, #0
 8004186:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	3301      	adds	r3, #1
 800418c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	4a13      	ldr	r2, [pc, #76]	; (80041e0 <USB_CoreReset+0x64>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d901      	bls.n	800419a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004196:	2303      	movs	r3, #3
 8004198:	e01b      	b.n	80041d2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	691b      	ldr	r3, [r3, #16]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	daf2      	bge.n	8004188 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80041a2:	2300      	movs	r3, #0
 80041a4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	691b      	ldr	r3, [r3, #16]
 80041aa:	f043 0201 	orr.w	r2, r3, #1
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	3301      	adds	r3, #1
 80041b6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	4a09      	ldr	r2, [pc, #36]	; (80041e0 <USB_CoreReset+0x64>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d901      	bls.n	80041c4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80041c0:	2303      	movs	r3, #3
 80041c2:	e006      	b.n	80041d2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	691b      	ldr	r3, [r3, #16]
 80041c8:	f003 0301 	and.w	r3, r3, #1
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	d0f0      	beq.n	80041b2 <USB_CoreReset+0x36>

  return HAL_OK;
 80041d0:	2300      	movs	r3, #0
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3714      	adds	r7, #20
 80041d6:	46bd      	mov	sp, r7
 80041d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041dc:	4770      	bx	lr
 80041de:	bf00      	nop
 80041e0:	00030d40 	.word	0x00030d40

080041e4 <__NVIC_SetPriority>:
{
 80041e4:	b480      	push	{r7}
 80041e6:	b083      	sub	sp, #12
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	4603      	mov	r3, r0
 80041ec:	6039      	str	r1, [r7, #0]
 80041ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	db0a      	blt.n	800420e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	b2da      	uxtb	r2, r3
 80041fc:	490c      	ldr	r1, [pc, #48]	; (8004230 <__NVIC_SetPriority+0x4c>)
 80041fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004202:	0112      	lsls	r2, r2, #4
 8004204:	b2d2      	uxtb	r2, r2
 8004206:	440b      	add	r3, r1
 8004208:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800420c:	e00a      	b.n	8004224 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	b2da      	uxtb	r2, r3
 8004212:	4908      	ldr	r1, [pc, #32]	; (8004234 <__NVIC_SetPriority+0x50>)
 8004214:	79fb      	ldrb	r3, [r7, #7]
 8004216:	f003 030f 	and.w	r3, r3, #15
 800421a:	3b04      	subs	r3, #4
 800421c:	0112      	lsls	r2, r2, #4
 800421e:	b2d2      	uxtb	r2, r2
 8004220:	440b      	add	r3, r1
 8004222:	761a      	strb	r2, [r3, #24]
}
 8004224:	bf00      	nop
 8004226:	370c      	adds	r7, #12
 8004228:	46bd      	mov	sp, r7
 800422a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422e:	4770      	bx	lr
 8004230:	e000e100 	.word	0xe000e100
 8004234:	e000ed00 	.word	0xe000ed00

08004238 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004238:	b580      	push	{r7, lr}
 800423a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800423c:	4b05      	ldr	r3, [pc, #20]	; (8004254 <SysTick_Handler+0x1c>)
 800423e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004240:	f001 fd84 	bl	8005d4c <xTaskGetSchedulerState>
 8004244:	4603      	mov	r3, r0
 8004246:	2b01      	cmp	r3, #1
 8004248:	d001      	beq.n	800424e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800424a:	f002 fb6d 	bl	8006928 <xPortSysTickHandler>
  }
}
 800424e:	bf00      	nop
 8004250:	bd80      	pop	{r7, pc}
 8004252:	bf00      	nop
 8004254:	e000e010 	.word	0xe000e010

08004258 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004258:	b580      	push	{r7, lr}
 800425a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800425c:	2100      	movs	r1, #0
 800425e:	f06f 0004 	mvn.w	r0, #4
 8004262:	f7ff ffbf 	bl	80041e4 <__NVIC_SetPriority>
#endif
}
 8004266:	bf00      	nop
 8004268:	bd80      	pop	{r7, pc}
	...

0800426c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800426c:	b480      	push	{r7}
 800426e:	b083      	sub	sp, #12
 8004270:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004272:	f3ef 8305 	mrs	r3, IPSR
 8004276:	603b      	str	r3, [r7, #0]
  return(result);
 8004278:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800427a:	2b00      	cmp	r3, #0
 800427c:	d003      	beq.n	8004286 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800427e:	f06f 0305 	mvn.w	r3, #5
 8004282:	607b      	str	r3, [r7, #4]
 8004284:	e00c      	b.n	80042a0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004286:	4b0a      	ldr	r3, [pc, #40]	; (80042b0 <osKernelInitialize+0x44>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d105      	bne.n	800429a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800428e:	4b08      	ldr	r3, [pc, #32]	; (80042b0 <osKernelInitialize+0x44>)
 8004290:	2201      	movs	r2, #1
 8004292:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004294:	2300      	movs	r3, #0
 8004296:	607b      	str	r3, [r7, #4]
 8004298:	e002      	b.n	80042a0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800429a:	f04f 33ff 	mov.w	r3, #4294967295
 800429e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80042a0:	687b      	ldr	r3, [r7, #4]
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	370c      	adds	r7, #12
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr
 80042ae:	bf00      	nop
 80042b0:	20000d04 	.word	0x20000d04

080042b4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b082      	sub	sp, #8
 80042b8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80042ba:	f3ef 8305 	mrs	r3, IPSR
 80042be:	603b      	str	r3, [r7, #0]
  return(result);
 80042c0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d003      	beq.n	80042ce <osKernelStart+0x1a>
    stat = osErrorISR;
 80042c6:	f06f 0305 	mvn.w	r3, #5
 80042ca:	607b      	str	r3, [r7, #4]
 80042cc:	e010      	b.n	80042f0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80042ce:	4b0b      	ldr	r3, [pc, #44]	; (80042fc <osKernelStart+0x48>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d109      	bne.n	80042ea <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80042d6:	f7ff ffbf 	bl	8004258 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80042da:	4b08      	ldr	r3, [pc, #32]	; (80042fc <osKernelStart+0x48>)
 80042dc:	2202      	movs	r2, #2
 80042de:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80042e0:	f001 f8ba 	bl	8005458 <vTaskStartScheduler>
      stat = osOK;
 80042e4:	2300      	movs	r3, #0
 80042e6:	607b      	str	r3, [r7, #4]
 80042e8:	e002      	b.n	80042f0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80042ea:	f04f 33ff 	mov.w	r3, #4294967295
 80042ee:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80042f0:	687b      	ldr	r3, [r7, #4]
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	3708      	adds	r7, #8
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}
 80042fa:	bf00      	nop
 80042fc:	20000d04 	.word	0x20000d04

08004300 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004300:	b580      	push	{r7, lr}
 8004302:	b08e      	sub	sp, #56	; 0x38
 8004304:	af04      	add	r7, sp, #16
 8004306:	60f8      	str	r0, [r7, #12]
 8004308:	60b9      	str	r1, [r7, #8]
 800430a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800430c:	2300      	movs	r3, #0
 800430e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004310:	f3ef 8305 	mrs	r3, IPSR
 8004314:	617b      	str	r3, [r7, #20]
  return(result);
 8004316:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004318:	2b00      	cmp	r3, #0
 800431a:	d17e      	bne.n	800441a <osThreadNew+0x11a>
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d07b      	beq.n	800441a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004322:	2380      	movs	r3, #128	; 0x80
 8004324:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004326:	2318      	movs	r3, #24
 8004328:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800432a:	2300      	movs	r3, #0
 800432c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800432e:	f04f 33ff 	mov.w	r3, #4294967295
 8004332:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d045      	beq.n	80043c6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d002      	beq.n	8004348 <osThreadNew+0x48>
        name = attr->name;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	699b      	ldr	r3, [r3, #24]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d002      	beq.n	8004356 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	699b      	ldr	r3, [r3, #24]
 8004354:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004356:	69fb      	ldr	r3, [r7, #28]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d008      	beq.n	800436e <osThreadNew+0x6e>
 800435c:	69fb      	ldr	r3, [r7, #28]
 800435e:	2b38      	cmp	r3, #56	; 0x38
 8004360:	d805      	bhi.n	800436e <osThreadNew+0x6e>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	f003 0301 	and.w	r3, r3, #1
 800436a:	2b00      	cmp	r3, #0
 800436c:	d001      	beq.n	8004372 <osThreadNew+0x72>
        return (NULL);
 800436e:	2300      	movs	r3, #0
 8004370:	e054      	b.n	800441c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	695b      	ldr	r3, [r3, #20]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d003      	beq.n	8004382 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	695b      	ldr	r3, [r3, #20]
 800437e:	089b      	lsrs	r3, r3, #2
 8004380:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d00e      	beq.n	80043a8 <osThreadNew+0xa8>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	68db      	ldr	r3, [r3, #12]
 800438e:	2bab      	cmp	r3, #171	; 0xab
 8004390:	d90a      	bls.n	80043a8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004396:	2b00      	cmp	r3, #0
 8004398:	d006      	beq.n	80043a8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	695b      	ldr	r3, [r3, #20]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d002      	beq.n	80043a8 <osThreadNew+0xa8>
        mem = 1;
 80043a2:	2301      	movs	r3, #1
 80043a4:	61bb      	str	r3, [r7, #24]
 80043a6:	e010      	b.n	80043ca <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	689b      	ldr	r3, [r3, #8]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d10c      	bne.n	80043ca <osThreadNew+0xca>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d108      	bne.n	80043ca <osThreadNew+0xca>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	691b      	ldr	r3, [r3, #16]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d104      	bne.n	80043ca <osThreadNew+0xca>
          mem = 0;
 80043c0:	2300      	movs	r3, #0
 80043c2:	61bb      	str	r3, [r7, #24]
 80043c4:	e001      	b.n	80043ca <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80043c6:	2300      	movs	r3, #0
 80043c8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80043ca:	69bb      	ldr	r3, [r7, #24]
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d110      	bne.n	80043f2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80043d4:	687a      	ldr	r2, [r7, #4]
 80043d6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80043d8:	9202      	str	r2, [sp, #8]
 80043da:	9301      	str	r3, [sp, #4]
 80043dc:	69fb      	ldr	r3, [r7, #28]
 80043de:	9300      	str	r3, [sp, #0]
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	6a3a      	ldr	r2, [r7, #32]
 80043e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80043e6:	68f8      	ldr	r0, [r7, #12]
 80043e8:	f000 fe46 	bl	8005078 <xTaskCreateStatic>
 80043ec:	4603      	mov	r3, r0
 80043ee:	613b      	str	r3, [r7, #16]
 80043f0:	e013      	b.n	800441a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80043f2:	69bb      	ldr	r3, [r7, #24]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d110      	bne.n	800441a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80043f8:	6a3b      	ldr	r3, [r7, #32]
 80043fa:	b29a      	uxth	r2, r3
 80043fc:	f107 0310 	add.w	r3, r7, #16
 8004400:	9301      	str	r3, [sp, #4]
 8004402:	69fb      	ldr	r3, [r7, #28]
 8004404:	9300      	str	r3, [sp, #0]
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800440a:	68f8      	ldr	r0, [r7, #12]
 800440c:	f000 fe91 	bl	8005132 <xTaskCreate>
 8004410:	4603      	mov	r3, r0
 8004412:	2b01      	cmp	r3, #1
 8004414:	d001      	beq.n	800441a <osThreadNew+0x11a>
            hTask = NULL;
 8004416:	2300      	movs	r3, #0
 8004418:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800441a:	693b      	ldr	r3, [r7, #16]
}
 800441c:	4618      	mov	r0, r3
 800441e:	3728      	adds	r7, #40	; 0x28
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}

08004424 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004424:	b580      	push	{r7, lr}
 8004426:	b084      	sub	sp, #16
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800442c:	f3ef 8305 	mrs	r3, IPSR
 8004430:	60bb      	str	r3, [r7, #8]
  return(result);
 8004432:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004434:	2b00      	cmp	r3, #0
 8004436:	d003      	beq.n	8004440 <osDelay+0x1c>
    stat = osErrorISR;
 8004438:	f06f 0305 	mvn.w	r3, #5
 800443c:	60fb      	str	r3, [r7, #12]
 800443e:	e007      	b.n	8004450 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004440:	2300      	movs	r3, #0
 8004442:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d002      	beq.n	8004450 <osDelay+0x2c>
      vTaskDelay(ticks);
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f000 ffd0 	bl	80053f0 <vTaskDelay>
    }
  }

  return (stat);
 8004450:	68fb      	ldr	r3, [r7, #12]
}
 8004452:	4618      	mov	r0, r3
 8004454:	3710      	adds	r7, #16
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}
	...

0800445c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800445c:	b480      	push	{r7}
 800445e:	b085      	sub	sp, #20
 8004460:	af00      	add	r7, sp, #0
 8004462:	60f8      	str	r0, [r7, #12]
 8004464:	60b9      	str	r1, [r7, #8]
 8004466:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	4a07      	ldr	r2, [pc, #28]	; (8004488 <vApplicationGetIdleTaskMemory+0x2c>)
 800446c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	4a06      	ldr	r2, [pc, #24]	; (800448c <vApplicationGetIdleTaskMemory+0x30>)
 8004472:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2280      	movs	r2, #128	; 0x80
 8004478:	601a      	str	r2, [r3, #0]
}
 800447a:	bf00      	nop
 800447c:	3714      	adds	r7, #20
 800447e:	46bd      	mov	sp, r7
 8004480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004484:	4770      	bx	lr
 8004486:	bf00      	nop
 8004488:	20000d08 	.word	0x20000d08
 800448c:	20000db4 	.word	0x20000db4

08004490 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004490:	b480      	push	{r7}
 8004492:	b085      	sub	sp, #20
 8004494:	af00      	add	r7, sp, #0
 8004496:	60f8      	str	r0, [r7, #12]
 8004498:	60b9      	str	r1, [r7, #8]
 800449a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	4a07      	ldr	r2, [pc, #28]	; (80044bc <vApplicationGetTimerTaskMemory+0x2c>)
 80044a0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	4a06      	ldr	r2, [pc, #24]	; (80044c0 <vApplicationGetTimerTaskMemory+0x30>)
 80044a6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80044ae:	601a      	str	r2, [r3, #0]
}
 80044b0:	bf00      	nop
 80044b2:	3714      	adds	r7, #20
 80044b4:	46bd      	mov	sp, r7
 80044b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ba:	4770      	bx	lr
 80044bc:	20000fb4 	.word	0x20000fb4
 80044c0:	20001060 	.word	0x20001060

080044c4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80044c4:	b480      	push	{r7}
 80044c6:	b083      	sub	sp, #12
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	f103 0208 	add.w	r2, r3, #8
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	f04f 32ff 	mov.w	r2, #4294967295
 80044dc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	f103 0208 	add.w	r2, r3, #8
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	f103 0208 	add.w	r2, r3, #8
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2200      	movs	r2, #0
 80044f6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80044f8:	bf00      	nop
 80044fa:	370c      	adds	r7, #12
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr

08004504 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004504:	b480      	push	{r7}
 8004506:	b083      	sub	sp, #12
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2200      	movs	r2, #0
 8004510:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004512:	bf00      	nop
 8004514:	370c      	adds	r7, #12
 8004516:	46bd      	mov	sp, r7
 8004518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451c:	4770      	bx	lr

0800451e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800451e:	b480      	push	{r7}
 8004520:	b085      	sub	sp, #20
 8004522:	af00      	add	r7, sp, #0
 8004524:	6078      	str	r0, [r7, #4]
 8004526:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	68fa      	ldr	r2, [r7, #12]
 8004532:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	689a      	ldr	r2, [r3, #8]
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	683a      	ldr	r2, [r7, #0]
 8004542:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	683a      	ldr	r2, [r7, #0]
 8004548:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	687a      	ldr	r2, [r7, #4]
 800454e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	1c5a      	adds	r2, r3, #1
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	601a      	str	r2, [r3, #0]
}
 800455a:	bf00      	nop
 800455c:	3714      	adds	r7, #20
 800455e:	46bd      	mov	sp, r7
 8004560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004564:	4770      	bx	lr

08004566 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004566:	b480      	push	{r7}
 8004568:	b085      	sub	sp, #20
 800456a:	af00      	add	r7, sp, #0
 800456c:	6078      	str	r0, [r7, #4]
 800456e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800457c:	d103      	bne.n	8004586 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	691b      	ldr	r3, [r3, #16]
 8004582:	60fb      	str	r3, [r7, #12]
 8004584:	e00c      	b.n	80045a0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	3308      	adds	r3, #8
 800458a:	60fb      	str	r3, [r7, #12]
 800458c:	e002      	b.n	8004594 <vListInsert+0x2e>
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	60fb      	str	r3, [r7, #12]
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	68ba      	ldr	r2, [r7, #8]
 800459c:	429a      	cmp	r2, r3
 800459e:	d2f6      	bcs.n	800458e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	685a      	ldr	r2, [r3, #4]
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	683a      	ldr	r2, [r7, #0]
 80045ae:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	68fa      	ldr	r2, [r7, #12]
 80045b4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	683a      	ldr	r2, [r7, #0]
 80045ba:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	687a      	ldr	r2, [r7, #4]
 80045c0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	1c5a      	adds	r2, r3, #1
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	601a      	str	r2, [r3, #0]
}
 80045cc:	bf00      	nop
 80045ce:	3714      	adds	r7, #20
 80045d0:	46bd      	mov	sp, r7
 80045d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d6:	4770      	bx	lr

080045d8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80045d8:	b480      	push	{r7}
 80045da:	b085      	sub	sp, #20
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	691b      	ldr	r3, [r3, #16]
 80045e4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	687a      	ldr	r2, [r7, #4]
 80045ec:	6892      	ldr	r2, [r2, #8]
 80045ee:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	687a      	ldr	r2, [r7, #4]
 80045f6:	6852      	ldr	r2, [r2, #4]
 80045f8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	687a      	ldr	r2, [r7, #4]
 8004600:	429a      	cmp	r2, r3
 8004602:	d103      	bne.n	800460c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	689a      	ldr	r2, [r3, #8]
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2200      	movs	r2, #0
 8004610:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	1e5a      	subs	r2, r3, #1
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
}
 8004620:	4618      	mov	r0, r3
 8004622:	3714      	adds	r7, #20
 8004624:	46bd      	mov	sp, r7
 8004626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462a:	4770      	bx	lr

0800462c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b084      	sub	sp, #16
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
 8004634:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d10a      	bne.n	8004656 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004644:	f383 8811 	msr	BASEPRI, r3
 8004648:	f3bf 8f6f 	isb	sy
 800464c:	f3bf 8f4f 	dsb	sy
 8004650:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004652:	bf00      	nop
 8004654:	e7fe      	b.n	8004654 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004656:	f002 f8d5 	bl	8006804 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004662:	68f9      	ldr	r1, [r7, #12]
 8004664:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004666:	fb01 f303 	mul.w	r3, r1, r3
 800466a:	441a      	add	r2, r3
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2200      	movs	r2, #0
 8004674:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681a      	ldr	r2, [r3, #0]
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004686:	3b01      	subs	r3, #1
 8004688:	68f9      	ldr	r1, [r7, #12]
 800468a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800468c:	fb01 f303 	mul.w	r3, r1, r3
 8004690:	441a      	add	r2, r3
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	22ff      	movs	r2, #255	; 0xff
 800469a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	22ff      	movs	r2, #255	; 0xff
 80046a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d114      	bne.n	80046d6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	691b      	ldr	r3, [r3, #16]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d01a      	beq.n	80046ea <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	3310      	adds	r3, #16
 80046b8:	4618      	mov	r0, r3
 80046ba:	f001 f985 	bl	80059c8 <xTaskRemoveFromEventList>
 80046be:	4603      	mov	r3, r0
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d012      	beq.n	80046ea <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80046c4:	4b0c      	ldr	r3, [pc, #48]	; (80046f8 <xQueueGenericReset+0xcc>)
 80046c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046ca:	601a      	str	r2, [r3, #0]
 80046cc:	f3bf 8f4f 	dsb	sy
 80046d0:	f3bf 8f6f 	isb	sy
 80046d4:	e009      	b.n	80046ea <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	3310      	adds	r3, #16
 80046da:	4618      	mov	r0, r3
 80046dc:	f7ff fef2 	bl	80044c4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	3324      	adds	r3, #36	; 0x24
 80046e4:	4618      	mov	r0, r3
 80046e6:	f7ff feed 	bl	80044c4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80046ea:	f002 f8bb 	bl	8006864 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80046ee:	2301      	movs	r3, #1
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	3710      	adds	r7, #16
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}
 80046f8:	e000ed04 	.word	0xe000ed04

080046fc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b08e      	sub	sp, #56	; 0x38
 8004700:	af02      	add	r7, sp, #8
 8004702:	60f8      	str	r0, [r7, #12]
 8004704:	60b9      	str	r1, [r7, #8]
 8004706:	607a      	str	r2, [r7, #4]
 8004708:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d10a      	bne.n	8004726 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004714:	f383 8811 	msr	BASEPRI, r3
 8004718:	f3bf 8f6f 	isb	sy
 800471c:	f3bf 8f4f 	dsb	sy
 8004720:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004722:	bf00      	nop
 8004724:	e7fe      	b.n	8004724 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d10a      	bne.n	8004742 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800472c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004730:	f383 8811 	msr	BASEPRI, r3
 8004734:	f3bf 8f6f 	isb	sy
 8004738:	f3bf 8f4f 	dsb	sy
 800473c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800473e:	bf00      	nop
 8004740:	e7fe      	b.n	8004740 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d002      	beq.n	800474e <xQueueGenericCreateStatic+0x52>
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d001      	beq.n	8004752 <xQueueGenericCreateStatic+0x56>
 800474e:	2301      	movs	r3, #1
 8004750:	e000      	b.n	8004754 <xQueueGenericCreateStatic+0x58>
 8004752:	2300      	movs	r3, #0
 8004754:	2b00      	cmp	r3, #0
 8004756:	d10a      	bne.n	800476e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800475c:	f383 8811 	msr	BASEPRI, r3
 8004760:	f3bf 8f6f 	isb	sy
 8004764:	f3bf 8f4f 	dsb	sy
 8004768:	623b      	str	r3, [r7, #32]
}
 800476a:	bf00      	nop
 800476c:	e7fe      	b.n	800476c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d102      	bne.n	800477a <xQueueGenericCreateStatic+0x7e>
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d101      	bne.n	800477e <xQueueGenericCreateStatic+0x82>
 800477a:	2301      	movs	r3, #1
 800477c:	e000      	b.n	8004780 <xQueueGenericCreateStatic+0x84>
 800477e:	2300      	movs	r3, #0
 8004780:	2b00      	cmp	r3, #0
 8004782:	d10a      	bne.n	800479a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004788:	f383 8811 	msr	BASEPRI, r3
 800478c:	f3bf 8f6f 	isb	sy
 8004790:	f3bf 8f4f 	dsb	sy
 8004794:	61fb      	str	r3, [r7, #28]
}
 8004796:	bf00      	nop
 8004798:	e7fe      	b.n	8004798 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800479a:	2350      	movs	r3, #80	; 0x50
 800479c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	2b50      	cmp	r3, #80	; 0x50
 80047a2:	d00a      	beq.n	80047ba <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80047a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047a8:	f383 8811 	msr	BASEPRI, r3
 80047ac:	f3bf 8f6f 	isb	sy
 80047b0:	f3bf 8f4f 	dsb	sy
 80047b4:	61bb      	str	r3, [r7, #24]
}
 80047b6:	bf00      	nop
 80047b8:	e7fe      	b.n	80047b8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80047ba:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80047c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d00d      	beq.n	80047e2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80047c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047c8:	2201      	movs	r2, #1
 80047ca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80047ce:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80047d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047d4:	9300      	str	r3, [sp, #0]
 80047d6:	4613      	mov	r3, r2
 80047d8:	687a      	ldr	r2, [r7, #4]
 80047da:	68b9      	ldr	r1, [r7, #8]
 80047dc:	68f8      	ldr	r0, [r7, #12]
 80047de:	f000 f83f 	bl	8004860 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80047e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80047e4:	4618      	mov	r0, r3
 80047e6:	3730      	adds	r7, #48	; 0x30
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd80      	pop	{r7, pc}

080047ec <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b08a      	sub	sp, #40	; 0x28
 80047f0:	af02      	add	r7, sp, #8
 80047f2:	60f8      	str	r0, [r7, #12]
 80047f4:	60b9      	str	r1, [r7, #8]
 80047f6:	4613      	mov	r3, r2
 80047f8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d10a      	bne.n	8004816 <xQueueGenericCreate+0x2a>
	__asm volatile
 8004800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004804:	f383 8811 	msr	BASEPRI, r3
 8004808:	f3bf 8f6f 	isb	sy
 800480c:	f3bf 8f4f 	dsb	sy
 8004810:	613b      	str	r3, [r7, #16]
}
 8004812:	bf00      	nop
 8004814:	e7fe      	b.n	8004814 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	68ba      	ldr	r2, [r7, #8]
 800481a:	fb02 f303 	mul.w	r3, r2, r3
 800481e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004820:	69fb      	ldr	r3, [r7, #28]
 8004822:	3350      	adds	r3, #80	; 0x50
 8004824:	4618      	mov	r0, r3
 8004826:	f002 f90f 	bl	8006a48 <pvPortMalloc>
 800482a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800482c:	69bb      	ldr	r3, [r7, #24]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d011      	beq.n	8004856 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004832:	69bb      	ldr	r3, [r7, #24]
 8004834:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	3350      	adds	r3, #80	; 0x50
 800483a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800483c:	69bb      	ldr	r3, [r7, #24]
 800483e:	2200      	movs	r2, #0
 8004840:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004844:	79fa      	ldrb	r2, [r7, #7]
 8004846:	69bb      	ldr	r3, [r7, #24]
 8004848:	9300      	str	r3, [sp, #0]
 800484a:	4613      	mov	r3, r2
 800484c:	697a      	ldr	r2, [r7, #20]
 800484e:	68b9      	ldr	r1, [r7, #8]
 8004850:	68f8      	ldr	r0, [r7, #12]
 8004852:	f000 f805 	bl	8004860 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004856:	69bb      	ldr	r3, [r7, #24]
	}
 8004858:	4618      	mov	r0, r3
 800485a:	3720      	adds	r7, #32
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}

08004860 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b084      	sub	sp, #16
 8004864:	af00      	add	r7, sp, #0
 8004866:	60f8      	str	r0, [r7, #12]
 8004868:	60b9      	str	r1, [r7, #8]
 800486a:	607a      	str	r2, [r7, #4]
 800486c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d103      	bne.n	800487c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004874:	69bb      	ldr	r3, [r7, #24]
 8004876:	69ba      	ldr	r2, [r7, #24]
 8004878:	601a      	str	r2, [r3, #0]
 800487a:	e002      	b.n	8004882 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800487c:	69bb      	ldr	r3, [r7, #24]
 800487e:	687a      	ldr	r2, [r7, #4]
 8004880:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004882:	69bb      	ldr	r3, [r7, #24]
 8004884:	68fa      	ldr	r2, [r7, #12]
 8004886:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004888:	69bb      	ldr	r3, [r7, #24]
 800488a:	68ba      	ldr	r2, [r7, #8]
 800488c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800488e:	2101      	movs	r1, #1
 8004890:	69b8      	ldr	r0, [r7, #24]
 8004892:	f7ff fecb 	bl	800462c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004896:	69bb      	ldr	r3, [r7, #24]
 8004898:	78fa      	ldrb	r2, [r7, #3]
 800489a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800489e:	bf00      	nop
 80048a0:	3710      	adds	r7, #16
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}
	...

080048a8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b08e      	sub	sp, #56	; 0x38
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	60f8      	str	r0, [r7, #12]
 80048b0:	60b9      	str	r1, [r7, #8]
 80048b2:	607a      	str	r2, [r7, #4]
 80048b4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80048b6:	2300      	movs	r3, #0
 80048b8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80048be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d10a      	bne.n	80048da <xQueueGenericSend+0x32>
	__asm volatile
 80048c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048c8:	f383 8811 	msr	BASEPRI, r3
 80048cc:	f3bf 8f6f 	isb	sy
 80048d0:	f3bf 8f4f 	dsb	sy
 80048d4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80048d6:	bf00      	nop
 80048d8:	e7fe      	b.n	80048d8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d103      	bne.n	80048e8 <xQueueGenericSend+0x40>
 80048e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d101      	bne.n	80048ec <xQueueGenericSend+0x44>
 80048e8:	2301      	movs	r3, #1
 80048ea:	e000      	b.n	80048ee <xQueueGenericSend+0x46>
 80048ec:	2300      	movs	r3, #0
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d10a      	bne.n	8004908 <xQueueGenericSend+0x60>
	__asm volatile
 80048f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048f6:	f383 8811 	msr	BASEPRI, r3
 80048fa:	f3bf 8f6f 	isb	sy
 80048fe:	f3bf 8f4f 	dsb	sy
 8004902:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004904:	bf00      	nop
 8004906:	e7fe      	b.n	8004906 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	2b02      	cmp	r3, #2
 800490c:	d103      	bne.n	8004916 <xQueueGenericSend+0x6e>
 800490e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004910:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004912:	2b01      	cmp	r3, #1
 8004914:	d101      	bne.n	800491a <xQueueGenericSend+0x72>
 8004916:	2301      	movs	r3, #1
 8004918:	e000      	b.n	800491c <xQueueGenericSend+0x74>
 800491a:	2300      	movs	r3, #0
 800491c:	2b00      	cmp	r3, #0
 800491e:	d10a      	bne.n	8004936 <xQueueGenericSend+0x8e>
	__asm volatile
 8004920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004924:	f383 8811 	msr	BASEPRI, r3
 8004928:	f3bf 8f6f 	isb	sy
 800492c:	f3bf 8f4f 	dsb	sy
 8004930:	623b      	str	r3, [r7, #32]
}
 8004932:	bf00      	nop
 8004934:	e7fe      	b.n	8004934 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004936:	f001 fa09 	bl	8005d4c <xTaskGetSchedulerState>
 800493a:	4603      	mov	r3, r0
 800493c:	2b00      	cmp	r3, #0
 800493e:	d102      	bne.n	8004946 <xQueueGenericSend+0x9e>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d101      	bne.n	800494a <xQueueGenericSend+0xa2>
 8004946:	2301      	movs	r3, #1
 8004948:	e000      	b.n	800494c <xQueueGenericSend+0xa4>
 800494a:	2300      	movs	r3, #0
 800494c:	2b00      	cmp	r3, #0
 800494e:	d10a      	bne.n	8004966 <xQueueGenericSend+0xbe>
	__asm volatile
 8004950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004954:	f383 8811 	msr	BASEPRI, r3
 8004958:	f3bf 8f6f 	isb	sy
 800495c:	f3bf 8f4f 	dsb	sy
 8004960:	61fb      	str	r3, [r7, #28]
}
 8004962:	bf00      	nop
 8004964:	e7fe      	b.n	8004964 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004966:	f001 ff4d 	bl	8006804 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800496a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800496c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800496e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004970:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004972:	429a      	cmp	r2, r3
 8004974:	d302      	bcc.n	800497c <xQueueGenericSend+0xd4>
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	2b02      	cmp	r3, #2
 800497a:	d129      	bne.n	80049d0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800497c:	683a      	ldr	r2, [r7, #0]
 800497e:	68b9      	ldr	r1, [r7, #8]
 8004980:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004982:	f000 fa0b 	bl	8004d9c <prvCopyDataToQueue>
 8004986:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800498a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800498c:	2b00      	cmp	r3, #0
 800498e:	d010      	beq.n	80049b2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004992:	3324      	adds	r3, #36	; 0x24
 8004994:	4618      	mov	r0, r3
 8004996:	f001 f817 	bl	80059c8 <xTaskRemoveFromEventList>
 800499a:	4603      	mov	r3, r0
 800499c:	2b00      	cmp	r3, #0
 800499e:	d013      	beq.n	80049c8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80049a0:	4b3f      	ldr	r3, [pc, #252]	; (8004aa0 <xQueueGenericSend+0x1f8>)
 80049a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049a6:	601a      	str	r2, [r3, #0]
 80049a8:	f3bf 8f4f 	dsb	sy
 80049ac:	f3bf 8f6f 	isb	sy
 80049b0:	e00a      	b.n	80049c8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80049b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d007      	beq.n	80049c8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80049b8:	4b39      	ldr	r3, [pc, #228]	; (8004aa0 <xQueueGenericSend+0x1f8>)
 80049ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049be:	601a      	str	r2, [r3, #0]
 80049c0:	f3bf 8f4f 	dsb	sy
 80049c4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80049c8:	f001 ff4c 	bl	8006864 <vPortExitCritical>
				return pdPASS;
 80049cc:	2301      	movs	r3, #1
 80049ce:	e063      	b.n	8004a98 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d103      	bne.n	80049de <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80049d6:	f001 ff45 	bl	8006864 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80049da:	2300      	movs	r3, #0
 80049dc:	e05c      	b.n	8004a98 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80049de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d106      	bne.n	80049f2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80049e4:	f107 0314 	add.w	r3, r7, #20
 80049e8:	4618      	mov	r0, r3
 80049ea:	f001 f851 	bl	8005a90 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80049ee:	2301      	movs	r3, #1
 80049f0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80049f2:	f001 ff37 	bl	8006864 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80049f6:	f000 fda1 	bl	800553c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80049fa:	f001 ff03 	bl	8006804 <vPortEnterCritical>
 80049fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a00:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004a04:	b25b      	sxtb	r3, r3
 8004a06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a0a:	d103      	bne.n	8004a14 <xQueueGenericSend+0x16c>
 8004a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a0e:	2200      	movs	r2, #0
 8004a10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a16:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004a1a:	b25b      	sxtb	r3, r3
 8004a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a20:	d103      	bne.n	8004a2a <xQueueGenericSend+0x182>
 8004a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a24:	2200      	movs	r2, #0
 8004a26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a2a:	f001 ff1b 	bl	8006864 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004a2e:	1d3a      	adds	r2, r7, #4
 8004a30:	f107 0314 	add.w	r3, r7, #20
 8004a34:	4611      	mov	r1, r2
 8004a36:	4618      	mov	r0, r3
 8004a38:	f001 f840 	bl	8005abc <xTaskCheckForTimeOut>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d124      	bne.n	8004a8c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004a42:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a44:	f000 faa2 	bl	8004f8c <prvIsQueueFull>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d018      	beq.n	8004a80 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a50:	3310      	adds	r3, #16
 8004a52:	687a      	ldr	r2, [r7, #4]
 8004a54:	4611      	mov	r1, r2
 8004a56:	4618      	mov	r0, r3
 8004a58:	f000 ff66 	bl	8005928 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004a5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a5e:	f000 fa2d 	bl	8004ebc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004a62:	f000 fd79 	bl	8005558 <xTaskResumeAll>
 8004a66:	4603      	mov	r3, r0
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	f47f af7c 	bne.w	8004966 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004a6e:	4b0c      	ldr	r3, [pc, #48]	; (8004aa0 <xQueueGenericSend+0x1f8>)
 8004a70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a74:	601a      	str	r2, [r3, #0]
 8004a76:	f3bf 8f4f 	dsb	sy
 8004a7a:	f3bf 8f6f 	isb	sy
 8004a7e:	e772      	b.n	8004966 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004a80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a82:	f000 fa1b 	bl	8004ebc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004a86:	f000 fd67 	bl	8005558 <xTaskResumeAll>
 8004a8a:	e76c      	b.n	8004966 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004a8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a8e:	f000 fa15 	bl	8004ebc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004a92:	f000 fd61 	bl	8005558 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004a96:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	3738      	adds	r7, #56	; 0x38
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}
 8004aa0:	e000ed04 	.word	0xe000ed04

08004aa4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b090      	sub	sp, #64	; 0x40
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	60f8      	str	r0, [r7, #12]
 8004aac:	60b9      	str	r1, [r7, #8]
 8004aae:	607a      	str	r2, [r7, #4]
 8004ab0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d10a      	bne.n	8004ad2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ac0:	f383 8811 	msr	BASEPRI, r3
 8004ac4:	f3bf 8f6f 	isb	sy
 8004ac8:	f3bf 8f4f 	dsb	sy
 8004acc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004ace:	bf00      	nop
 8004ad0:	e7fe      	b.n	8004ad0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d103      	bne.n	8004ae0 <xQueueGenericSendFromISR+0x3c>
 8004ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d101      	bne.n	8004ae4 <xQueueGenericSendFromISR+0x40>
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	e000      	b.n	8004ae6 <xQueueGenericSendFromISR+0x42>
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d10a      	bne.n	8004b00 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aee:	f383 8811 	msr	BASEPRI, r3
 8004af2:	f3bf 8f6f 	isb	sy
 8004af6:	f3bf 8f4f 	dsb	sy
 8004afa:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004afc:	bf00      	nop
 8004afe:	e7fe      	b.n	8004afe <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	2b02      	cmp	r3, #2
 8004b04:	d103      	bne.n	8004b0e <xQueueGenericSendFromISR+0x6a>
 8004b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b0a:	2b01      	cmp	r3, #1
 8004b0c:	d101      	bne.n	8004b12 <xQueueGenericSendFromISR+0x6e>
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e000      	b.n	8004b14 <xQueueGenericSendFromISR+0x70>
 8004b12:	2300      	movs	r3, #0
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d10a      	bne.n	8004b2e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b1c:	f383 8811 	msr	BASEPRI, r3
 8004b20:	f3bf 8f6f 	isb	sy
 8004b24:	f3bf 8f4f 	dsb	sy
 8004b28:	623b      	str	r3, [r7, #32]
}
 8004b2a:	bf00      	nop
 8004b2c:	e7fe      	b.n	8004b2c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004b2e:	f001 ff4b 	bl	80069c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004b32:	f3ef 8211 	mrs	r2, BASEPRI
 8004b36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b3a:	f383 8811 	msr	BASEPRI, r3
 8004b3e:	f3bf 8f6f 	isb	sy
 8004b42:	f3bf 8f4f 	dsb	sy
 8004b46:	61fa      	str	r2, [r7, #28]
 8004b48:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004b4a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004b4c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b56:	429a      	cmp	r2, r3
 8004b58:	d302      	bcc.n	8004b60 <xQueueGenericSendFromISR+0xbc>
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	2b02      	cmp	r3, #2
 8004b5e:	d12f      	bne.n	8004bc0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b62:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004b70:	683a      	ldr	r2, [r7, #0]
 8004b72:	68b9      	ldr	r1, [r7, #8]
 8004b74:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004b76:	f000 f911 	bl	8004d9c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004b7a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004b7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b82:	d112      	bne.n	8004baa <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d016      	beq.n	8004bba <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b8e:	3324      	adds	r3, #36	; 0x24
 8004b90:	4618      	mov	r0, r3
 8004b92:	f000 ff19 	bl	80059c8 <xTaskRemoveFromEventList>
 8004b96:	4603      	mov	r3, r0
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d00e      	beq.n	8004bba <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d00b      	beq.n	8004bba <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2201      	movs	r2, #1
 8004ba6:	601a      	str	r2, [r3, #0]
 8004ba8:	e007      	b.n	8004bba <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004baa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004bae:	3301      	adds	r3, #1
 8004bb0:	b2db      	uxtb	r3, r3
 8004bb2:	b25a      	sxtb	r2, r3
 8004bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bb6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004bbe:	e001      	b.n	8004bc4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004bc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bc6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004bce:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004bd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	3740      	adds	r7, #64	; 0x40
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}
	...

08004bdc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b08c      	sub	sp, #48	; 0x30
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	60f8      	str	r0, [r7, #12]
 8004be4:	60b9      	str	r1, [r7, #8]
 8004be6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004be8:	2300      	movs	r3, #0
 8004bea:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d10a      	bne.n	8004c0c <xQueueReceive+0x30>
	__asm volatile
 8004bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bfa:	f383 8811 	msr	BASEPRI, r3
 8004bfe:	f3bf 8f6f 	isb	sy
 8004c02:	f3bf 8f4f 	dsb	sy
 8004c06:	623b      	str	r3, [r7, #32]
}
 8004c08:	bf00      	nop
 8004c0a:	e7fe      	b.n	8004c0a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d103      	bne.n	8004c1a <xQueueReceive+0x3e>
 8004c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d101      	bne.n	8004c1e <xQueueReceive+0x42>
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	e000      	b.n	8004c20 <xQueueReceive+0x44>
 8004c1e:	2300      	movs	r3, #0
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d10a      	bne.n	8004c3a <xQueueReceive+0x5e>
	__asm volatile
 8004c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c28:	f383 8811 	msr	BASEPRI, r3
 8004c2c:	f3bf 8f6f 	isb	sy
 8004c30:	f3bf 8f4f 	dsb	sy
 8004c34:	61fb      	str	r3, [r7, #28]
}
 8004c36:	bf00      	nop
 8004c38:	e7fe      	b.n	8004c38 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004c3a:	f001 f887 	bl	8005d4c <xTaskGetSchedulerState>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d102      	bne.n	8004c4a <xQueueReceive+0x6e>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d101      	bne.n	8004c4e <xQueueReceive+0x72>
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	e000      	b.n	8004c50 <xQueueReceive+0x74>
 8004c4e:	2300      	movs	r3, #0
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d10a      	bne.n	8004c6a <xQueueReceive+0x8e>
	__asm volatile
 8004c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c58:	f383 8811 	msr	BASEPRI, r3
 8004c5c:	f3bf 8f6f 	isb	sy
 8004c60:	f3bf 8f4f 	dsb	sy
 8004c64:	61bb      	str	r3, [r7, #24]
}
 8004c66:	bf00      	nop
 8004c68:	e7fe      	b.n	8004c68 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004c6a:	f001 fdcb 	bl	8006804 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c72:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d01f      	beq.n	8004cba <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004c7a:	68b9      	ldr	r1, [r7, #8]
 8004c7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c7e:	f000 f8f7 	bl	8004e70 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c84:	1e5a      	subs	r2, r3, #1
 8004c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c88:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c8c:	691b      	ldr	r3, [r3, #16]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d00f      	beq.n	8004cb2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c94:	3310      	adds	r3, #16
 8004c96:	4618      	mov	r0, r3
 8004c98:	f000 fe96 	bl	80059c8 <xTaskRemoveFromEventList>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d007      	beq.n	8004cb2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004ca2:	4b3d      	ldr	r3, [pc, #244]	; (8004d98 <xQueueReceive+0x1bc>)
 8004ca4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ca8:	601a      	str	r2, [r3, #0]
 8004caa:	f3bf 8f4f 	dsb	sy
 8004cae:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004cb2:	f001 fdd7 	bl	8006864 <vPortExitCritical>
				return pdPASS;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e069      	b.n	8004d8e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d103      	bne.n	8004cc8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004cc0:	f001 fdd0 	bl	8006864 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	e062      	b.n	8004d8e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004cc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d106      	bne.n	8004cdc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004cce:	f107 0310 	add.w	r3, r7, #16
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f000 fedc 	bl	8005a90 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004cd8:	2301      	movs	r3, #1
 8004cda:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004cdc:	f001 fdc2 	bl	8006864 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004ce0:	f000 fc2c 	bl	800553c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004ce4:	f001 fd8e 	bl	8006804 <vPortEnterCritical>
 8004ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004cee:	b25b      	sxtb	r3, r3
 8004cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cf4:	d103      	bne.n	8004cfe <xQueueReceive+0x122>
 8004cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d00:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d04:	b25b      	sxtb	r3, r3
 8004d06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d0a:	d103      	bne.n	8004d14 <xQueueReceive+0x138>
 8004d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d0e:	2200      	movs	r2, #0
 8004d10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d14:	f001 fda6 	bl	8006864 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004d18:	1d3a      	adds	r2, r7, #4
 8004d1a:	f107 0310 	add.w	r3, r7, #16
 8004d1e:	4611      	mov	r1, r2
 8004d20:	4618      	mov	r0, r3
 8004d22:	f000 fecb 	bl	8005abc <xTaskCheckForTimeOut>
 8004d26:	4603      	mov	r3, r0
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d123      	bne.n	8004d74 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004d2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d2e:	f000 f917 	bl	8004f60 <prvIsQueueEmpty>
 8004d32:	4603      	mov	r3, r0
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d017      	beq.n	8004d68 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d3a:	3324      	adds	r3, #36	; 0x24
 8004d3c:	687a      	ldr	r2, [r7, #4]
 8004d3e:	4611      	mov	r1, r2
 8004d40:	4618      	mov	r0, r3
 8004d42:	f000 fdf1 	bl	8005928 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004d46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d48:	f000 f8b8 	bl	8004ebc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004d4c:	f000 fc04 	bl	8005558 <xTaskResumeAll>
 8004d50:	4603      	mov	r3, r0
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d189      	bne.n	8004c6a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004d56:	4b10      	ldr	r3, [pc, #64]	; (8004d98 <xQueueReceive+0x1bc>)
 8004d58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d5c:	601a      	str	r2, [r3, #0]
 8004d5e:	f3bf 8f4f 	dsb	sy
 8004d62:	f3bf 8f6f 	isb	sy
 8004d66:	e780      	b.n	8004c6a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004d68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d6a:	f000 f8a7 	bl	8004ebc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004d6e:	f000 fbf3 	bl	8005558 <xTaskResumeAll>
 8004d72:	e77a      	b.n	8004c6a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004d74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d76:	f000 f8a1 	bl	8004ebc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004d7a:	f000 fbed 	bl	8005558 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004d7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d80:	f000 f8ee 	bl	8004f60 <prvIsQueueEmpty>
 8004d84:	4603      	mov	r3, r0
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	f43f af6f 	beq.w	8004c6a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004d8c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	3730      	adds	r7, #48	; 0x30
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}
 8004d96:	bf00      	nop
 8004d98:	e000ed04 	.word	0xe000ed04

08004d9c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b086      	sub	sp, #24
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	60f8      	str	r0, [r7, #12]
 8004da4:	60b9      	str	r1, [r7, #8]
 8004da6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004da8:	2300      	movs	r3, #0
 8004daa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004db0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d10d      	bne.n	8004dd6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d14d      	bne.n	8004e5e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f000 ffde 	bl	8005d88 <xTaskPriorityDisinherit>
 8004dcc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	609a      	str	r2, [r3, #8]
 8004dd4:	e043      	b.n	8004e5e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d119      	bne.n	8004e10 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	6858      	ldr	r0, [r3, #4]
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de4:	461a      	mov	r2, r3
 8004de6:	68b9      	ldr	r1, [r7, #8]
 8004de8:	f002 f89c 	bl	8006f24 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	685a      	ldr	r2, [r3, #4]
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df4:	441a      	add	r2, r3
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	685a      	ldr	r2, [r3, #4]
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	429a      	cmp	r2, r3
 8004e04:	d32b      	bcc.n	8004e5e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681a      	ldr	r2, [r3, #0]
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	605a      	str	r2, [r3, #4]
 8004e0e:	e026      	b.n	8004e5e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	68d8      	ldr	r0, [r3, #12]
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e18:	461a      	mov	r2, r3
 8004e1a:	68b9      	ldr	r1, [r7, #8]
 8004e1c:	f002 f882 	bl	8006f24 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	68da      	ldr	r2, [r3, #12]
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e28:	425b      	negs	r3, r3
 8004e2a:	441a      	add	r2, r3
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	68da      	ldr	r2, [r3, #12]
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	429a      	cmp	r2, r3
 8004e3a:	d207      	bcs.n	8004e4c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	689a      	ldr	r2, [r3, #8]
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e44:	425b      	negs	r3, r3
 8004e46:	441a      	add	r2, r3
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2b02      	cmp	r3, #2
 8004e50:	d105      	bne.n	8004e5e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d002      	beq.n	8004e5e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	3b01      	subs	r3, #1
 8004e5c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	1c5a      	adds	r2, r3, #1
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004e66:	697b      	ldr	r3, [r7, #20]
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	3718      	adds	r7, #24
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}

08004e70 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b082      	sub	sp, #8
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
 8004e78:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d018      	beq.n	8004eb4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	68da      	ldr	r2, [r3, #12]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e8a:	441a      	add	r2, r3
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	68da      	ldr	r2, [r3, #12]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	429a      	cmp	r2, r3
 8004e9a:	d303      	bcc.n	8004ea4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	68d9      	ldr	r1, [r3, #12]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eac:	461a      	mov	r2, r3
 8004eae:	6838      	ldr	r0, [r7, #0]
 8004eb0:	f002 f838 	bl	8006f24 <memcpy>
	}
}
 8004eb4:	bf00      	nop
 8004eb6:	3708      	adds	r7, #8
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}

08004ebc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b084      	sub	sp, #16
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004ec4:	f001 fc9e 	bl	8006804 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ece:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004ed0:	e011      	b.n	8004ef6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d012      	beq.n	8004f00 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	3324      	adds	r3, #36	; 0x24
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f000 fd72 	bl	80059c8 <xTaskRemoveFromEventList>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d001      	beq.n	8004eee <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004eea:	f000 fe49 	bl	8005b80 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004eee:	7bfb      	ldrb	r3, [r7, #15]
 8004ef0:	3b01      	subs	r3, #1
 8004ef2:	b2db      	uxtb	r3, r3
 8004ef4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004ef6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	dce9      	bgt.n	8004ed2 <prvUnlockQueue+0x16>
 8004efe:	e000      	b.n	8004f02 <prvUnlockQueue+0x46>
					break;
 8004f00:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	22ff      	movs	r2, #255	; 0xff
 8004f06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004f0a:	f001 fcab 	bl	8006864 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004f0e:	f001 fc79 	bl	8006804 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004f18:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004f1a:	e011      	b.n	8004f40 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	691b      	ldr	r3, [r3, #16]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d012      	beq.n	8004f4a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	3310      	adds	r3, #16
 8004f28:	4618      	mov	r0, r3
 8004f2a:	f000 fd4d 	bl	80059c8 <xTaskRemoveFromEventList>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d001      	beq.n	8004f38 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004f34:	f000 fe24 	bl	8005b80 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004f38:	7bbb      	ldrb	r3, [r7, #14]
 8004f3a:	3b01      	subs	r3, #1
 8004f3c:	b2db      	uxtb	r3, r3
 8004f3e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004f40:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	dce9      	bgt.n	8004f1c <prvUnlockQueue+0x60>
 8004f48:	e000      	b.n	8004f4c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004f4a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	22ff      	movs	r2, #255	; 0xff
 8004f50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004f54:	f001 fc86 	bl	8006864 <vPortExitCritical>
}
 8004f58:	bf00      	nop
 8004f5a:	3710      	adds	r7, #16
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}

08004f60 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b084      	sub	sp, #16
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004f68:	f001 fc4c 	bl	8006804 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d102      	bne.n	8004f7a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004f74:	2301      	movs	r3, #1
 8004f76:	60fb      	str	r3, [r7, #12]
 8004f78:	e001      	b.n	8004f7e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004f7e:	f001 fc71 	bl	8006864 <vPortExitCritical>

	return xReturn;
 8004f82:	68fb      	ldr	r3, [r7, #12]
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	3710      	adds	r7, #16
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd80      	pop	{r7, pc}

08004f8c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b084      	sub	sp, #16
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004f94:	f001 fc36 	bl	8006804 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fa0:	429a      	cmp	r2, r3
 8004fa2:	d102      	bne.n	8004faa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	60fb      	str	r3, [r7, #12]
 8004fa8:	e001      	b.n	8004fae <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004faa:	2300      	movs	r3, #0
 8004fac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004fae:	f001 fc59 	bl	8006864 <vPortExitCritical>

	return xReturn;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	3710      	adds	r7, #16
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bd80      	pop	{r7, pc}

08004fbc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b085      	sub	sp, #20
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
 8004fc4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	60fb      	str	r3, [r7, #12]
 8004fca:	e014      	b.n	8004ff6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004fcc:	4a0f      	ldr	r2, [pc, #60]	; (800500c <vQueueAddToRegistry+0x50>)
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d10b      	bne.n	8004ff0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004fd8:	490c      	ldr	r1, [pc, #48]	; (800500c <vQueueAddToRegistry+0x50>)
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	683a      	ldr	r2, [r7, #0]
 8004fde:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004fe2:	4a0a      	ldr	r2, [pc, #40]	; (800500c <vQueueAddToRegistry+0x50>)
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	00db      	lsls	r3, r3, #3
 8004fe8:	4413      	add	r3, r2
 8004fea:	687a      	ldr	r2, [r7, #4]
 8004fec:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004fee:	e006      	b.n	8004ffe <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	3301      	adds	r3, #1
 8004ff4:	60fb      	str	r3, [r7, #12]
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	2b07      	cmp	r3, #7
 8004ffa:	d9e7      	bls.n	8004fcc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004ffc:	bf00      	nop
 8004ffe:	bf00      	nop
 8005000:	3714      	adds	r7, #20
 8005002:	46bd      	mov	sp, r7
 8005004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005008:	4770      	bx	lr
 800500a:	bf00      	nop
 800500c:	20001460 	.word	0x20001460

08005010 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005010:	b580      	push	{r7, lr}
 8005012:	b086      	sub	sp, #24
 8005014:	af00      	add	r7, sp, #0
 8005016:	60f8      	str	r0, [r7, #12]
 8005018:	60b9      	str	r1, [r7, #8]
 800501a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005020:	f001 fbf0 	bl	8006804 <vPortEnterCritical>
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800502a:	b25b      	sxtb	r3, r3
 800502c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005030:	d103      	bne.n	800503a <vQueueWaitForMessageRestricted+0x2a>
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	2200      	movs	r2, #0
 8005036:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005040:	b25b      	sxtb	r3, r3
 8005042:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005046:	d103      	bne.n	8005050 <vQueueWaitForMessageRestricted+0x40>
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	2200      	movs	r2, #0
 800504c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005050:	f001 fc08 	bl	8006864 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005058:	2b00      	cmp	r3, #0
 800505a:	d106      	bne.n	800506a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	3324      	adds	r3, #36	; 0x24
 8005060:	687a      	ldr	r2, [r7, #4]
 8005062:	68b9      	ldr	r1, [r7, #8]
 8005064:	4618      	mov	r0, r3
 8005066:	f000 fc83 	bl	8005970 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800506a:	6978      	ldr	r0, [r7, #20]
 800506c:	f7ff ff26 	bl	8004ebc <prvUnlockQueue>
	}
 8005070:	bf00      	nop
 8005072:	3718      	adds	r7, #24
 8005074:	46bd      	mov	sp, r7
 8005076:	bd80      	pop	{r7, pc}

08005078 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005078:	b580      	push	{r7, lr}
 800507a:	b08e      	sub	sp, #56	; 0x38
 800507c:	af04      	add	r7, sp, #16
 800507e:	60f8      	str	r0, [r7, #12]
 8005080:	60b9      	str	r1, [r7, #8]
 8005082:	607a      	str	r2, [r7, #4]
 8005084:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005086:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005088:	2b00      	cmp	r3, #0
 800508a:	d10a      	bne.n	80050a2 <xTaskCreateStatic+0x2a>
	__asm volatile
 800508c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005090:	f383 8811 	msr	BASEPRI, r3
 8005094:	f3bf 8f6f 	isb	sy
 8005098:	f3bf 8f4f 	dsb	sy
 800509c:	623b      	str	r3, [r7, #32]
}
 800509e:	bf00      	nop
 80050a0:	e7fe      	b.n	80050a0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80050a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d10a      	bne.n	80050be <xTaskCreateStatic+0x46>
	__asm volatile
 80050a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ac:	f383 8811 	msr	BASEPRI, r3
 80050b0:	f3bf 8f6f 	isb	sy
 80050b4:	f3bf 8f4f 	dsb	sy
 80050b8:	61fb      	str	r3, [r7, #28]
}
 80050ba:	bf00      	nop
 80050bc:	e7fe      	b.n	80050bc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80050be:	23ac      	movs	r3, #172	; 0xac
 80050c0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	2bac      	cmp	r3, #172	; 0xac
 80050c6:	d00a      	beq.n	80050de <xTaskCreateStatic+0x66>
	__asm volatile
 80050c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050cc:	f383 8811 	msr	BASEPRI, r3
 80050d0:	f3bf 8f6f 	isb	sy
 80050d4:	f3bf 8f4f 	dsb	sy
 80050d8:	61bb      	str	r3, [r7, #24]
}
 80050da:	bf00      	nop
 80050dc:	e7fe      	b.n	80050dc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80050de:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80050e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d01e      	beq.n	8005124 <xTaskCreateStatic+0xac>
 80050e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d01b      	beq.n	8005124 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80050ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050ee:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80050f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80050f4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80050f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f8:	2202      	movs	r2, #2
 80050fa:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80050fe:	2300      	movs	r3, #0
 8005100:	9303      	str	r3, [sp, #12]
 8005102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005104:	9302      	str	r3, [sp, #8]
 8005106:	f107 0314 	add.w	r3, r7, #20
 800510a:	9301      	str	r3, [sp, #4]
 800510c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800510e:	9300      	str	r3, [sp, #0]
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	687a      	ldr	r2, [r7, #4]
 8005114:	68b9      	ldr	r1, [r7, #8]
 8005116:	68f8      	ldr	r0, [r7, #12]
 8005118:	f000 f850 	bl	80051bc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800511c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800511e:	f000 f8f7 	bl	8005310 <prvAddNewTaskToReadyList>
 8005122:	e001      	b.n	8005128 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005124:	2300      	movs	r3, #0
 8005126:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005128:	697b      	ldr	r3, [r7, #20]
	}
 800512a:	4618      	mov	r0, r3
 800512c:	3728      	adds	r7, #40	; 0x28
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}

08005132 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005132:	b580      	push	{r7, lr}
 8005134:	b08c      	sub	sp, #48	; 0x30
 8005136:	af04      	add	r7, sp, #16
 8005138:	60f8      	str	r0, [r7, #12]
 800513a:	60b9      	str	r1, [r7, #8]
 800513c:	603b      	str	r3, [r7, #0]
 800513e:	4613      	mov	r3, r2
 8005140:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005142:	88fb      	ldrh	r3, [r7, #6]
 8005144:	009b      	lsls	r3, r3, #2
 8005146:	4618      	mov	r0, r3
 8005148:	f001 fc7e 	bl	8006a48 <pvPortMalloc>
 800514c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d00e      	beq.n	8005172 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005154:	20ac      	movs	r0, #172	; 0xac
 8005156:	f001 fc77 	bl	8006a48 <pvPortMalloc>
 800515a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800515c:	69fb      	ldr	r3, [r7, #28]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d003      	beq.n	800516a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005162:	69fb      	ldr	r3, [r7, #28]
 8005164:	697a      	ldr	r2, [r7, #20]
 8005166:	631a      	str	r2, [r3, #48]	; 0x30
 8005168:	e005      	b.n	8005176 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800516a:	6978      	ldr	r0, [r7, #20]
 800516c:	f001 fd38 	bl	8006be0 <vPortFree>
 8005170:	e001      	b.n	8005176 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005172:	2300      	movs	r3, #0
 8005174:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005176:	69fb      	ldr	r3, [r7, #28]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d017      	beq.n	80051ac <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800517c:	69fb      	ldr	r3, [r7, #28]
 800517e:	2200      	movs	r2, #0
 8005180:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005184:	88fa      	ldrh	r2, [r7, #6]
 8005186:	2300      	movs	r3, #0
 8005188:	9303      	str	r3, [sp, #12]
 800518a:	69fb      	ldr	r3, [r7, #28]
 800518c:	9302      	str	r3, [sp, #8]
 800518e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005190:	9301      	str	r3, [sp, #4]
 8005192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005194:	9300      	str	r3, [sp, #0]
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	68b9      	ldr	r1, [r7, #8]
 800519a:	68f8      	ldr	r0, [r7, #12]
 800519c:	f000 f80e 	bl	80051bc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80051a0:	69f8      	ldr	r0, [r7, #28]
 80051a2:	f000 f8b5 	bl	8005310 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80051a6:	2301      	movs	r3, #1
 80051a8:	61bb      	str	r3, [r7, #24]
 80051aa:	e002      	b.n	80051b2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80051ac:	f04f 33ff 	mov.w	r3, #4294967295
 80051b0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80051b2:	69bb      	ldr	r3, [r7, #24]
	}
 80051b4:	4618      	mov	r0, r3
 80051b6:	3720      	adds	r7, #32
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd80      	pop	{r7, pc}

080051bc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b088      	sub	sp, #32
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	60f8      	str	r0, [r7, #12]
 80051c4:	60b9      	str	r1, [r7, #8]
 80051c6:	607a      	str	r2, [r7, #4]
 80051c8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80051ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051cc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	009b      	lsls	r3, r3, #2
 80051d2:	461a      	mov	r2, r3
 80051d4:	21a5      	movs	r1, #165	; 0xa5
 80051d6:	f001 fe21 	bl	8006e1c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80051da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80051e4:	3b01      	subs	r3, #1
 80051e6:	009b      	lsls	r3, r3, #2
 80051e8:	4413      	add	r3, r2
 80051ea:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80051ec:	69bb      	ldr	r3, [r7, #24]
 80051ee:	f023 0307 	bic.w	r3, r3, #7
 80051f2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80051f4:	69bb      	ldr	r3, [r7, #24]
 80051f6:	f003 0307 	and.w	r3, r3, #7
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d00a      	beq.n	8005214 <prvInitialiseNewTask+0x58>
	__asm volatile
 80051fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005202:	f383 8811 	msr	BASEPRI, r3
 8005206:	f3bf 8f6f 	isb	sy
 800520a:	f3bf 8f4f 	dsb	sy
 800520e:	617b      	str	r3, [r7, #20]
}
 8005210:	bf00      	nop
 8005212:	e7fe      	b.n	8005212 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d01f      	beq.n	800525a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800521a:	2300      	movs	r3, #0
 800521c:	61fb      	str	r3, [r7, #28]
 800521e:	e012      	b.n	8005246 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005220:	68ba      	ldr	r2, [r7, #8]
 8005222:	69fb      	ldr	r3, [r7, #28]
 8005224:	4413      	add	r3, r2
 8005226:	7819      	ldrb	r1, [r3, #0]
 8005228:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800522a:	69fb      	ldr	r3, [r7, #28]
 800522c:	4413      	add	r3, r2
 800522e:	3334      	adds	r3, #52	; 0x34
 8005230:	460a      	mov	r2, r1
 8005232:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005234:	68ba      	ldr	r2, [r7, #8]
 8005236:	69fb      	ldr	r3, [r7, #28]
 8005238:	4413      	add	r3, r2
 800523a:	781b      	ldrb	r3, [r3, #0]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d006      	beq.n	800524e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005240:	69fb      	ldr	r3, [r7, #28]
 8005242:	3301      	adds	r3, #1
 8005244:	61fb      	str	r3, [r7, #28]
 8005246:	69fb      	ldr	r3, [r7, #28]
 8005248:	2b0f      	cmp	r3, #15
 800524a:	d9e9      	bls.n	8005220 <prvInitialiseNewTask+0x64>
 800524c:	e000      	b.n	8005250 <prvInitialiseNewTask+0x94>
			{
				break;
 800524e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005252:	2200      	movs	r2, #0
 8005254:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005258:	e003      	b.n	8005262 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800525a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800525c:	2200      	movs	r2, #0
 800525e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005264:	2b37      	cmp	r3, #55	; 0x37
 8005266:	d901      	bls.n	800526c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005268:	2337      	movs	r3, #55	; 0x37
 800526a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800526c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800526e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005270:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005274:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005276:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800527a:	2200      	movs	r2, #0
 800527c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800527e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005280:	3304      	adds	r3, #4
 8005282:	4618      	mov	r0, r3
 8005284:	f7ff f93e 	bl	8004504 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800528a:	3318      	adds	r3, #24
 800528c:	4618      	mov	r0, r3
 800528e:	f7ff f939 	bl	8004504 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005294:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005296:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800529a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800529e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052a0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80052a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052a6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 80052a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052aa:	2200      	movs	r2, #0
 80052ac:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80052ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052b0:	2200      	movs	r2, #0
 80052b2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80052b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052b8:	2200      	movs	r2, #0
 80052ba:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80052be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052c0:	3358      	adds	r3, #88	; 0x58
 80052c2:	224c      	movs	r2, #76	; 0x4c
 80052c4:	2100      	movs	r1, #0
 80052c6:	4618      	mov	r0, r3
 80052c8:	f001 fda8 	bl	8006e1c <memset>
 80052cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ce:	4a0d      	ldr	r2, [pc, #52]	; (8005304 <prvInitialiseNewTask+0x148>)
 80052d0:	65da      	str	r2, [r3, #92]	; 0x5c
 80052d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052d4:	4a0c      	ldr	r2, [pc, #48]	; (8005308 <prvInitialiseNewTask+0x14c>)
 80052d6:	661a      	str	r2, [r3, #96]	; 0x60
 80052d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052da:	4a0c      	ldr	r2, [pc, #48]	; (800530c <prvInitialiseNewTask+0x150>)
 80052dc:	665a      	str	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80052de:	683a      	ldr	r2, [r7, #0]
 80052e0:	68f9      	ldr	r1, [r7, #12]
 80052e2:	69b8      	ldr	r0, [r7, #24]
 80052e4:	f001 f960 	bl	80065a8 <pxPortInitialiseStack>
 80052e8:	4602      	mov	r2, r0
 80052ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ec:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80052ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d002      	beq.n	80052fa <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80052f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052f8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80052fa:	bf00      	nop
 80052fc:	3720      	adds	r7, #32
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}
 8005302:	bf00      	nop
 8005304:	200056fc 	.word	0x200056fc
 8005308:	20005764 	.word	0x20005764
 800530c:	200057cc 	.word	0x200057cc

08005310 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b082      	sub	sp, #8
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005318:	f001 fa74 	bl	8006804 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800531c:	4b2d      	ldr	r3, [pc, #180]	; (80053d4 <prvAddNewTaskToReadyList+0xc4>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	3301      	adds	r3, #1
 8005322:	4a2c      	ldr	r2, [pc, #176]	; (80053d4 <prvAddNewTaskToReadyList+0xc4>)
 8005324:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005326:	4b2c      	ldr	r3, [pc, #176]	; (80053d8 <prvAddNewTaskToReadyList+0xc8>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d109      	bne.n	8005342 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800532e:	4a2a      	ldr	r2, [pc, #168]	; (80053d8 <prvAddNewTaskToReadyList+0xc8>)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005334:	4b27      	ldr	r3, [pc, #156]	; (80053d4 <prvAddNewTaskToReadyList+0xc4>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	2b01      	cmp	r3, #1
 800533a:	d110      	bne.n	800535e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800533c:	f000 fc44 	bl	8005bc8 <prvInitialiseTaskLists>
 8005340:	e00d      	b.n	800535e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005342:	4b26      	ldr	r3, [pc, #152]	; (80053dc <prvAddNewTaskToReadyList+0xcc>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d109      	bne.n	800535e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800534a:	4b23      	ldr	r3, [pc, #140]	; (80053d8 <prvAddNewTaskToReadyList+0xc8>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005354:	429a      	cmp	r2, r3
 8005356:	d802      	bhi.n	800535e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005358:	4a1f      	ldr	r2, [pc, #124]	; (80053d8 <prvAddNewTaskToReadyList+0xc8>)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800535e:	4b20      	ldr	r3, [pc, #128]	; (80053e0 <prvAddNewTaskToReadyList+0xd0>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	3301      	adds	r3, #1
 8005364:	4a1e      	ldr	r2, [pc, #120]	; (80053e0 <prvAddNewTaskToReadyList+0xd0>)
 8005366:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005368:	4b1d      	ldr	r3, [pc, #116]	; (80053e0 <prvAddNewTaskToReadyList+0xd0>)
 800536a:	681a      	ldr	r2, [r3, #0]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005374:	4b1b      	ldr	r3, [pc, #108]	; (80053e4 <prvAddNewTaskToReadyList+0xd4>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	429a      	cmp	r2, r3
 800537a:	d903      	bls.n	8005384 <prvAddNewTaskToReadyList+0x74>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005380:	4a18      	ldr	r2, [pc, #96]	; (80053e4 <prvAddNewTaskToReadyList+0xd4>)
 8005382:	6013      	str	r3, [r2, #0]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005388:	4613      	mov	r3, r2
 800538a:	009b      	lsls	r3, r3, #2
 800538c:	4413      	add	r3, r2
 800538e:	009b      	lsls	r3, r3, #2
 8005390:	4a15      	ldr	r2, [pc, #84]	; (80053e8 <prvAddNewTaskToReadyList+0xd8>)
 8005392:	441a      	add	r2, r3
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	3304      	adds	r3, #4
 8005398:	4619      	mov	r1, r3
 800539a:	4610      	mov	r0, r2
 800539c:	f7ff f8bf 	bl	800451e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80053a0:	f001 fa60 	bl	8006864 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80053a4:	4b0d      	ldr	r3, [pc, #52]	; (80053dc <prvAddNewTaskToReadyList+0xcc>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d00e      	beq.n	80053ca <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80053ac:	4b0a      	ldr	r3, [pc, #40]	; (80053d8 <prvAddNewTaskToReadyList+0xc8>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053b6:	429a      	cmp	r2, r3
 80053b8:	d207      	bcs.n	80053ca <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80053ba:	4b0c      	ldr	r3, [pc, #48]	; (80053ec <prvAddNewTaskToReadyList+0xdc>)
 80053bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053c0:	601a      	str	r2, [r3, #0]
 80053c2:	f3bf 8f4f 	dsb	sy
 80053c6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80053ca:	bf00      	nop
 80053cc:	3708      	adds	r7, #8
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}
 80053d2:	bf00      	nop
 80053d4:	20001974 	.word	0x20001974
 80053d8:	200014a0 	.word	0x200014a0
 80053dc:	20001980 	.word	0x20001980
 80053e0:	20001990 	.word	0x20001990
 80053e4:	2000197c 	.word	0x2000197c
 80053e8:	200014a4 	.word	0x200014a4
 80053ec:	e000ed04 	.word	0xe000ed04

080053f0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b084      	sub	sp, #16
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80053f8:	2300      	movs	r3, #0
 80053fa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d017      	beq.n	8005432 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005402:	4b13      	ldr	r3, [pc, #76]	; (8005450 <vTaskDelay+0x60>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d00a      	beq.n	8005420 <vTaskDelay+0x30>
	__asm volatile
 800540a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800540e:	f383 8811 	msr	BASEPRI, r3
 8005412:	f3bf 8f6f 	isb	sy
 8005416:	f3bf 8f4f 	dsb	sy
 800541a:	60bb      	str	r3, [r7, #8]
}
 800541c:	bf00      	nop
 800541e:	e7fe      	b.n	800541e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005420:	f000 f88c 	bl	800553c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005424:	2100      	movs	r1, #0
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f000 fd1c 	bl	8005e64 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800542c:	f000 f894 	bl	8005558 <xTaskResumeAll>
 8005430:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d107      	bne.n	8005448 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005438:	4b06      	ldr	r3, [pc, #24]	; (8005454 <vTaskDelay+0x64>)
 800543a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800543e:	601a      	str	r2, [r3, #0]
 8005440:	f3bf 8f4f 	dsb	sy
 8005444:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005448:	bf00      	nop
 800544a:	3710      	adds	r7, #16
 800544c:	46bd      	mov	sp, r7
 800544e:	bd80      	pop	{r7, pc}
 8005450:	2000199c 	.word	0x2000199c
 8005454:	e000ed04 	.word	0xe000ed04

08005458 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b08a      	sub	sp, #40	; 0x28
 800545c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800545e:	2300      	movs	r3, #0
 8005460:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005462:	2300      	movs	r3, #0
 8005464:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005466:	463a      	mov	r2, r7
 8005468:	1d39      	adds	r1, r7, #4
 800546a:	f107 0308 	add.w	r3, r7, #8
 800546e:	4618      	mov	r0, r3
 8005470:	f7fe fff4 	bl	800445c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005474:	6839      	ldr	r1, [r7, #0]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	68ba      	ldr	r2, [r7, #8]
 800547a:	9202      	str	r2, [sp, #8]
 800547c:	9301      	str	r3, [sp, #4]
 800547e:	2300      	movs	r3, #0
 8005480:	9300      	str	r3, [sp, #0]
 8005482:	2300      	movs	r3, #0
 8005484:	460a      	mov	r2, r1
 8005486:	4925      	ldr	r1, [pc, #148]	; (800551c <vTaskStartScheduler+0xc4>)
 8005488:	4825      	ldr	r0, [pc, #148]	; (8005520 <vTaskStartScheduler+0xc8>)
 800548a:	f7ff fdf5 	bl	8005078 <xTaskCreateStatic>
 800548e:	4603      	mov	r3, r0
 8005490:	4a24      	ldr	r2, [pc, #144]	; (8005524 <vTaskStartScheduler+0xcc>)
 8005492:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005494:	4b23      	ldr	r3, [pc, #140]	; (8005524 <vTaskStartScheduler+0xcc>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d002      	beq.n	80054a2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800549c:	2301      	movs	r3, #1
 800549e:	617b      	str	r3, [r7, #20]
 80054a0:	e001      	b.n	80054a6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80054a2:	2300      	movs	r3, #0
 80054a4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	2b01      	cmp	r3, #1
 80054aa:	d102      	bne.n	80054b2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80054ac:	f000 fd2e 	bl	8005f0c <xTimerCreateTimerTask>
 80054b0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	2b01      	cmp	r3, #1
 80054b6:	d11d      	bne.n	80054f4 <vTaskStartScheduler+0x9c>
	__asm volatile
 80054b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054bc:	f383 8811 	msr	BASEPRI, r3
 80054c0:	f3bf 8f6f 	isb	sy
 80054c4:	f3bf 8f4f 	dsb	sy
 80054c8:	613b      	str	r3, [r7, #16]
}
 80054ca:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80054cc:	4b16      	ldr	r3, [pc, #88]	; (8005528 <vTaskStartScheduler+0xd0>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	3358      	adds	r3, #88	; 0x58
 80054d2:	4a16      	ldr	r2, [pc, #88]	; (800552c <vTaskStartScheduler+0xd4>)
 80054d4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80054d6:	4b16      	ldr	r3, [pc, #88]	; (8005530 <vTaskStartScheduler+0xd8>)
 80054d8:	f04f 32ff 	mov.w	r2, #4294967295
 80054dc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80054de:	4b15      	ldr	r3, [pc, #84]	; (8005534 <vTaskStartScheduler+0xdc>)
 80054e0:	2201      	movs	r2, #1
 80054e2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80054e4:	4b14      	ldr	r3, [pc, #80]	; (8005538 <vTaskStartScheduler+0xe0>)
 80054e6:	2200      	movs	r2, #0
 80054e8:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 80054ea:	f7fb fd5d 	bl	8000fa8 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80054ee:	f001 f8e7 	bl	80066c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80054f2:	e00e      	b.n	8005512 <vTaskStartScheduler+0xba>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054fa:	d10a      	bne.n	8005512 <vTaskStartScheduler+0xba>
	__asm volatile
 80054fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005500:	f383 8811 	msr	BASEPRI, r3
 8005504:	f3bf 8f6f 	isb	sy
 8005508:	f3bf 8f4f 	dsb	sy
 800550c:	60fb      	str	r3, [r7, #12]
}
 800550e:	bf00      	nop
 8005510:	e7fe      	b.n	8005510 <vTaskStartScheduler+0xb8>
}
 8005512:	bf00      	nop
 8005514:	3718      	adds	r7, #24
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}
 800551a:	bf00      	nop
 800551c:	08007034 	.word	0x08007034
 8005520:	08005b99 	.word	0x08005b99
 8005524:	20001998 	.word	0x20001998
 8005528:	200014a0 	.word	0x200014a0
 800552c:	2000005c 	.word	0x2000005c
 8005530:	20001994 	.word	0x20001994
 8005534:	20001980 	.word	0x20001980
 8005538:	20001978 	.word	0x20001978

0800553c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800553c:	b480      	push	{r7}
 800553e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005540:	4b04      	ldr	r3, [pc, #16]	; (8005554 <vTaskSuspendAll+0x18>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	3301      	adds	r3, #1
 8005546:	4a03      	ldr	r2, [pc, #12]	; (8005554 <vTaskSuspendAll+0x18>)
 8005548:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800554a:	bf00      	nop
 800554c:	46bd      	mov	sp, r7
 800554e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005552:	4770      	bx	lr
 8005554:	2000199c 	.word	0x2000199c

08005558 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b084      	sub	sp, #16
 800555c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800555e:	2300      	movs	r3, #0
 8005560:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005562:	2300      	movs	r3, #0
 8005564:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005566:	4b42      	ldr	r3, [pc, #264]	; (8005670 <xTaskResumeAll+0x118>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d10a      	bne.n	8005584 <xTaskResumeAll+0x2c>
	__asm volatile
 800556e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005572:	f383 8811 	msr	BASEPRI, r3
 8005576:	f3bf 8f6f 	isb	sy
 800557a:	f3bf 8f4f 	dsb	sy
 800557e:	603b      	str	r3, [r7, #0]
}
 8005580:	bf00      	nop
 8005582:	e7fe      	b.n	8005582 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005584:	f001 f93e 	bl	8006804 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005588:	4b39      	ldr	r3, [pc, #228]	; (8005670 <xTaskResumeAll+0x118>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	3b01      	subs	r3, #1
 800558e:	4a38      	ldr	r2, [pc, #224]	; (8005670 <xTaskResumeAll+0x118>)
 8005590:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005592:	4b37      	ldr	r3, [pc, #220]	; (8005670 <xTaskResumeAll+0x118>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d162      	bne.n	8005660 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800559a:	4b36      	ldr	r3, [pc, #216]	; (8005674 <xTaskResumeAll+0x11c>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d05e      	beq.n	8005660 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80055a2:	e02f      	b.n	8005604 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80055a4:	4b34      	ldr	r3, [pc, #208]	; (8005678 <xTaskResumeAll+0x120>)
 80055a6:	68db      	ldr	r3, [r3, #12]
 80055a8:	68db      	ldr	r3, [r3, #12]
 80055aa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	3318      	adds	r3, #24
 80055b0:	4618      	mov	r0, r3
 80055b2:	f7ff f811 	bl	80045d8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	3304      	adds	r3, #4
 80055ba:	4618      	mov	r0, r3
 80055bc:	f7ff f80c 	bl	80045d8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055c4:	4b2d      	ldr	r3, [pc, #180]	; (800567c <xTaskResumeAll+0x124>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	429a      	cmp	r2, r3
 80055ca:	d903      	bls.n	80055d4 <xTaskResumeAll+0x7c>
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055d0:	4a2a      	ldr	r2, [pc, #168]	; (800567c <xTaskResumeAll+0x124>)
 80055d2:	6013      	str	r3, [r2, #0]
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055d8:	4613      	mov	r3, r2
 80055da:	009b      	lsls	r3, r3, #2
 80055dc:	4413      	add	r3, r2
 80055de:	009b      	lsls	r3, r3, #2
 80055e0:	4a27      	ldr	r2, [pc, #156]	; (8005680 <xTaskResumeAll+0x128>)
 80055e2:	441a      	add	r2, r3
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	3304      	adds	r3, #4
 80055e8:	4619      	mov	r1, r3
 80055ea:	4610      	mov	r0, r2
 80055ec:	f7fe ff97 	bl	800451e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055f4:	4b23      	ldr	r3, [pc, #140]	; (8005684 <xTaskResumeAll+0x12c>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055fa:	429a      	cmp	r2, r3
 80055fc:	d302      	bcc.n	8005604 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80055fe:	4b22      	ldr	r3, [pc, #136]	; (8005688 <xTaskResumeAll+0x130>)
 8005600:	2201      	movs	r2, #1
 8005602:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005604:	4b1c      	ldr	r3, [pc, #112]	; (8005678 <xTaskResumeAll+0x120>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d1cb      	bne.n	80055a4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d001      	beq.n	8005616 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005612:	f000 fb7b 	bl	8005d0c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005616:	4b1d      	ldr	r3, [pc, #116]	; (800568c <xTaskResumeAll+0x134>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d010      	beq.n	8005644 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005622:	f000 f847 	bl	80056b4 <xTaskIncrementTick>
 8005626:	4603      	mov	r3, r0
 8005628:	2b00      	cmp	r3, #0
 800562a:	d002      	beq.n	8005632 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800562c:	4b16      	ldr	r3, [pc, #88]	; (8005688 <xTaskResumeAll+0x130>)
 800562e:	2201      	movs	r2, #1
 8005630:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	3b01      	subs	r3, #1
 8005636:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d1f1      	bne.n	8005622 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800563e:	4b13      	ldr	r3, [pc, #76]	; (800568c <xTaskResumeAll+0x134>)
 8005640:	2200      	movs	r2, #0
 8005642:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005644:	4b10      	ldr	r3, [pc, #64]	; (8005688 <xTaskResumeAll+0x130>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d009      	beq.n	8005660 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800564c:	2301      	movs	r3, #1
 800564e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005650:	4b0f      	ldr	r3, [pc, #60]	; (8005690 <xTaskResumeAll+0x138>)
 8005652:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005656:	601a      	str	r2, [r3, #0]
 8005658:	f3bf 8f4f 	dsb	sy
 800565c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005660:	f001 f900 	bl	8006864 <vPortExitCritical>

	return xAlreadyYielded;
 8005664:	68bb      	ldr	r3, [r7, #8]
}
 8005666:	4618      	mov	r0, r3
 8005668:	3710      	adds	r7, #16
 800566a:	46bd      	mov	sp, r7
 800566c:	bd80      	pop	{r7, pc}
 800566e:	bf00      	nop
 8005670:	2000199c 	.word	0x2000199c
 8005674:	20001974 	.word	0x20001974
 8005678:	20001934 	.word	0x20001934
 800567c:	2000197c 	.word	0x2000197c
 8005680:	200014a4 	.word	0x200014a4
 8005684:	200014a0 	.word	0x200014a0
 8005688:	20001988 	.word	0x20001988
 800568c:	20001984 	.word	0x20001984
 8005690:	e000ed04 	.word	0xe000ed04

08005694 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005694:	b480      	push	{r7}
 8005696:	b083      	sub	sp, #12
 8005698:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800569a:	4b05      	ldr	r3, [pc, #20]	; (80056b0 <xTaskGetTickCount+0x1c>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80056a0:	687b      	ldr	r3, [r7, #4]
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	370c      	adds	r7, #12
 80056a6:	46bd      	mov	sp, r7
 80056a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ac:	4770      	bx	lr
 80056ae:	bf00      	nop
 80056b0:	20001978 	.word	0x20001978

080056b4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b086      	sub	sp, #24
 80056b8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80056ba:	2300      	movs	r3, #0
 80056bc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80056be:	4b4f      	ldr	r3, [pc, #316]	; (80057fc <xTaskIncrementTick+0x148>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	f040 808f 	bne.w	80057e6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80056c8:	4b4d      	ldr	r3, [pc, #308]	; (8005800 <xTaskIncrementTick+0x14c>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	3301      	adds	r3, #1
 80056ce:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80056d0:	4a4b      	ldr	r2, [pc, #300]	; (8005800 <xTaskIncrementTick+0x14c>)
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d120      	bne.n	800571e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80056dc:	4b49      	ldr	r3, [pc, #292]	; (8005804 <xTaskIncrementTick+0x150>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d00a      	beq.n	80056fc <xTaskIncrementTick+0x48>
	__asm volatile
 80056e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ea:	f383 8811 	msr	BASEPRI, r3
 80056ee:	f3bf 8f6f 	isb	sy
 80056f2:	f3bf 8f4f 	dsb	sy
 80056f6:	603b      	str	r3, [r7, #0]
}
 80056f8:	bf00      	nop
 80056fa:	e7fe      	b.n	80056fa <xTaskIncrementTick+0x46>
 80056fc:	4b41      	ldr	r3, [pc, #260]	; (8005804 <xTaskIncrementTick+0x150>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	60fb      	str	r3, [r7, #12]
 8005702:	4b41      	ldr	r3, [pc, #260]	; (8005808 <xTaskIncrementTick+0x154>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a3f      	ldr	r2, [pc, #252]	; (8005804 <xTaskIncrementTick+0x150>)
 8005708:	6013      	str	r3, [r2, #0]
 800570a:	4a3f      	ldr	r2, [pc, #252]	; (8005808 <xTaskIncrementTick+0x154>)
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	6013      	str	r3, [r2, #0]
 8005710:	4b3e      	ldr	r3, [pc, #248]	; (800580c <xTaskIncrementTick+0x158>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	3301      	adds	r3, #1
 8005716:	4a3d      	ldr	r2, [pc, #244]	; (800580c <xTaskIncrementTick+0x158>)
 8005718:	6013      	str	r3, [r2, #0]
 800571a:	f000 faf7 	bl	8005d0c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800571e:	4b3c      	ldr	r3, [pc, #240]	; (8005810 <xTaskIncrementTick+0x15c>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	693a      	ldr	r2, [r7, #16]
 8005724:	429a      	cmp	r2, r3
 8005726:	d349      	bcc.n	80057bc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005728:	4b36      	ldr	r3, [pc, #216]	; (8005804 <xTaskIncrementTick+0x150>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d104      	bne.n	800573c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005732:	4b37      	ldr	r3, [pc, #220]	; (8005810 <xTaskIncrementTick+0x15c>)
 8005734:	f04f 32ff 	mov.w	r2, #4294967295
 8005738:	601a      	str	r2, [r3, #0]
					break;
 800573a:	e03f      	b.n	80057bc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800573c:	4b31      	ldr	r3, [pc, #196]	; (8005804 <xTaskIncrementTick+0x150>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	68db      	ldr	r3, [r3, #12]
 8005742:	68db      	ldr	r3, [r3, #12]
 8005744:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800574c:	693a      	ldr	r2, [r7, #16]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	429a      	cmp	r2, r3
 8005752:	d203      	bcs.n	800575c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005754:	4a2e      	ldr	r2, [pc, #184]	; (8005810 <xTaskIncrementTick+0x15c>)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800575a:	e02f      	b.n	80057bc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	3304      	adds	r3, #4
 8005760:	4618      	mov	r0, r3
 8005762:	f7fe ff39 	bl	80045d8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800576a:	2b00      	cmp	r3, #0
 800576c:	d004      	beq.n	8005778 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	3318      	adds	r3, #24
 8005772:	4618      	mov	r0, r3
 8005774:	f7fe ff30 	bl	80045d8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800577c:	4b25      	ldr	r3, [pc, #148]	; (8005814 <xTaskIncrementTick+0x160>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	429a      	cmp	r2, r3
 8005782:	d903      	bls.n	800578c <xTaskIncrementTick+0xd8>
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005788:	4a22      	ldr	r2, [pc, #136]	; (8005814 <xTaskIncrementTick+0x160>)
 800578a:	6013      	str	r3, [r2, #0]
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005790:	4613      	mov	r3, r2
 8005792:	009b      	lsls	r3, r3, #2
 8005794:	4413      	add	r3, r2
 8005796:	009b      	lsls	r3, r3, #2
 8005798:	4a1f      	ldr	r2, [pc, #124]	; (8005818 <xTaskIncrementTick+0x164>)
 800579a:	441a      	add	r2, r3
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	3304      	adds	r3, #4
 80057a0:	4619      	mov	r1, r3
 80057a2:	4610      	mov	r0, r2
 80057a4:	f7fe febb 	bl	800451e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057ac:	4b1b      	ldr	r3, [pc, #108]	; (800581c <xTaskIncrementTick+0x168>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057b2:	429a      	cmp	r2, r3
 80057b4:	d3b8      	bcc.n	8005728 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80057b6:	2301      	movs	r3, #1
 80057b8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80057ba:	e7b5      	b.n	8005728 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80057bc:	4b17      	ldr	r3, [pc, #92]	; (800581c <xTaskIncrementTick+0x168>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057c2:	4915      	ldr	r1, [pc, #84]	; (8005818 <xTaskIncrementTick+0x164>)
 80057c4:	4613      	mov	r3, r2
 80057c6:	009b      	lsls	r3, r3, #2
 80057c8:	4413      	add	r3, r2
 80057ca:	009b      	lsls	r3, r3, #2
 80057cc:	440b      	add	r3, r1
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	2b01      	cmp	r3, #1
 80057d2:	d901      	bls.n	80057d8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80057d4:	2301      	movs	r3, #1
 80057d6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80057d8:	4b11      	ldr	r3, [pc, #68]	; (8005820 <xTaskIncrementTick+0x16c>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d007      	beq.n	80057f0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80057e0:	2301      	movs	r3, #1
 80057e2:	617b      	str	r3, [r7, #20]
 80057e4:	e004      	b.n	80057f0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80057e6:	4b0f      	ldr	r3, [pc, #60]	; (8005824 <xTaskIncrementTick+0x170>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	3301      	adds	r3, #1
 80057ec:	4a0d      	ldr	r2, [pc, #52]	; (8005824 <xTaskIncrementTick+0x170>)
 80057ee:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80057f0:	697b      	ldr	r3, [r7, #20]
}
 80057f2:	4618      	mov	r0, r3
 80057f4:	3718      	adds	r7, #24
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}
 80057fa:	bf00      	nop
 80057fc:	2000199c 	.word	0x2000199c
 8005800:	20001978 	.word	0x20001978
 8005804:	2000192c 	.word	0x2000192c
 8005808:	20001930 	.word	0x20001930
 800580c:	2000198c 	.word	0x2000198c
 8005810:	20001994 	.word	0x20001994
 8005814:	2000197c 	.word	0x2000197c
 8005818:	200014a4 	.word	0x200014a4
 800581c:	200014a0 	.word	0x200014a0
 8005820:	20001988 	.word	0x20001988
 8005824:	20001984 	.word	0x20001984

08005828 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b084      	sub	sp, #16
 800582c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800582e:	4b36      	ldr	r3, [pc, #216]	; (8005908 <vTaskSwitchContext+0xe0>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d003      	beq.n	800583e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005836:	4b35      	ldr	r3, [pc, #212]	; (800590c <vTaskSwitchContext+0xe4>)
 8005838:	2201      	movs	r2, #1
 800583a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800583c:	e05f      	b.n	80058fe <vTaskSwitchContext+0xd6>
		xYieldPending = pdFALSE;
 800583e:	4b33      	ldr	r3, [pc, #204]	; (800590c <vTaskSwitchContext+0xe4>)
 8005840:	2200      	movs	r2, #0
 8005842:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8005844:	f7fb fbb7 	bl	8000fb6 <getRunTimeCounterValue>
 8005848:	4603      	mov	r3, r0
 800584a:	4a31      	ldr	r2, [pc, #196]	; (8005910 <vTaskSwitchContext+0xe8>)
 800584c:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800584e:	4b30      	ldr	r3, [pc, #192]	; (8005910 <vTaskSwitchContext+0xe8>)
 8005850:	681a      	ldr	r2, [r3, #0]
 8005852:	4b30      	ldr	r3, [pc, #192]	; (8005914 <vTaskSwitchContext+0xec>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	429a      	cmp	r2, r3
 8005858:	d909      	bls.n	800586e <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800585a:	4b2f      	ldr	r3, [pc, #188]	; (8005918 <vTaskSwitchContext+0xf0>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005860:	4a2b      	ldr	r2, [pc, #172]	; (8005910 <vTaskSwitchContext+0xe8>)
 8005862:	6810      	ldr	r0, [r2, #0]
 8005864:	4a2b      	ldr	r2, [pc, #172]	; (8005914 <vTaskSwitchContext+0xec>)
 8005866:	6812      	ldr	r2, [r2, #0]
 8005868:	1a82      	subs	r2, r0, r2
 800586a:	440a      	add	r2, r1
 800586c:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 800586e:	4b28      	ldr	r3, [pc, #160]	; (8005910 <vTaskSwitchContext+0xe8>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a28      	ldr	r2, [pc, #160]	; (8005914 <vTaskSwitchContext+0xec>)
 8005874:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005876:	4b29      	ldr	r3, [pc, #164]	; (800591c <vTaskSwitchContext+0xf4>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	60fb      	str	r3, [r7, #12]
 800587c:	e010      	b.n	80058a0 <vTaskSwitchContext+0x78>
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d10a      	bne.n	800589a <vTaskSwitchContext+0x72>
	__asm volatile
 8005884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005888:	f383 8811 	msr	BASEPRI, r3
 800588c:	f3bf 8f6f 	isb	sy
 8005890:	f3bf 8f4f 	dsb	sy
 8005894:	607b      	str	r3, [r7, #4]
}
 8005896:	bf00      	nop
 8005898:	e7fe      	b.n	8005898 <vTaskSwitchContext+0x70>
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	3b01      	subs	r3, #1
 800589e:	60fb      	str	r3, [r7, #12]
 80058a0:	491f      	ldr	r1, [pc, #124]	; (8005920 <vTaskSwitchContext+0xf8>)
 80058a2:	68fa      	ldr	r2, [r7, #12]
 80058a4:	4613      	mov	r3, r2
 80058a6:	009b      	lsls	r3, r3, #2
 80058a8:	4413      	add	r3, r2
 80058aa:	009b      	lsls	r3, r3, #2
 80058ac:	440b      	add	r3, r1
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d0e4      	beq.n	800587e <vTaskSwitchContext+0x56>
 80058b4:	68fa      	ldr	r2, [r7, #12]
 80058b6:	4613      	mov	r3, r2
 80058b8:	009b      	lsls	r3, r3, #2
 80058ba:	4413      	add	r3, r2
 80058bc:	009b      	lsls	r3, r3, #2
 80058be:	4a18      	ldr	r2, [pc, #96]	; (8005920 <vTaskSwitchContext+0xf8>)
 80058c0:	4413      	add	r3, r2
 80058c2:	60bb      	str	r3, [r7, #8]
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	685b      	ldr	r3, [r3, #4]
 80058c8:	685a      	ldr	r2, [r3, #4]
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	605a      	str	r2, [r3, #4]
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	685a      	ldr	r2, [r3, #4]
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	3308      	adds	r3, #8
 80058d6:	429a      	cmp	r2, r3
 80058d8:	d104      	bne.n	80058e4 <vTaskSwitchContext+0xbc>
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	685a      	ldr	r2, [r3, #4]
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	605a      	str	r2, [r3, #4]
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	685b      	ldr	r3, [r3, #4]
 80058e8:	68db      	ldr	r3, [r3, #12]
 80058ea:	4a0b      	ldr	r2, [pc, #44]	; (8005918 <vTaskSwitchContext+0xf0>)
 80058ec:	6013      	str	r3, [r2, #0]
 80058ee:	4a0b      	ldr	r2, [pc, #44]	; (800591c <vTaskSwitchContext+0xf4>)
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80058f4:	4b08      	ldr	r3, [pc, #32]	; (8005918 <vTaskSwitchContext+0xf0>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	3358      	adds	r3, #88	; 0x58
 80058fa:	4a0a      	ldr	r2, [pc, #40]	; (8005924 <vTaskSwitchContext+0xfc>)
 80058fc:	6013      	str	r3, [r2, #0]
}
 80058fe:	bf00      	nop
 8005900:	3710      	adds	r7, #16
 8005902:	46bd      	mov	sp, r7
 8005904:	bd80      	pop	{r7, pc}
 8005906:	bf00      	nop
 8005908:	2000199c 	.word	0x2000199c
 800590c:	20001988 	.word	0x20001988
 8005910:	200019a4 	.word	0x200019a4
 8005914:	200019a0 	.word	0x200019a0
 8005918:	200014a0 	.word	0x200014a0
 800591c:	2000197c 	.word	0x2000197c
 8005920:	200014a4 	.word	0x200014a4
 8005924:	2000005c 	.word	0x2000005c

08005928 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b084      	sub	sp, #16
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
 8005930:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d10a      	bne.n	800594e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800593c:	f383 8811 	msr	BASEPRI, r3
 8005940:	f3bf 8f6f 	isb	sy
 8005944:	f3bf 8f4f 	dsb	sy
 8005948:	60fb      	str	r3, [r7, #12]
}
 800594a:	bf00      	nop
 800594c:	e7fe      	b.n	800594c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800594e:	4b07      	ldr	r3, [pc, #28]	; (800596c <vTaskPlaceOnEventList+0x44>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	3318      	adds	r3, #24
 8005954:	4619      	mov	r1, r3
 8005956:	6878      	ldr	r0, [r7, #4]
 8005958:	f7fe fe05 	bl	8004566 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800595c:	2101      	movs	r1, #1
 800595e:	6838      	ldr	r0, [r7, #0]
 8005960:	f000 fa80 	bl	8005e64 <prvAddCurrentTaskToDelayedList>
}
 8005964:	bf00      	nop
 8005966:	3710      	adds	r7, #16
 8005968:	46bd      	mov	sp, r7
 800596a:	bd80      	pop	{r7, pc}
 800596c:	200014a0 	.word	0x200014a0

08005970 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005970:	b580      	push	{r7, lr}
 8005972:	b086      	sub	sp, #24
 8005974:	af00      	add	r7, sp, #0
 8005976:	60f8      	str	r0, [r7, #12]
 8005978:	60b9      	str	r1, [r7, #8]
 800597a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d10a      	bne.n	8005998 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005986:	f383 8811 	msr	BASEPRI, r3
 800598a:	f3bf 8f6f 	isb	sy
 800598e:	f3bf 8f4f 	dsb	sy
 8005992:	617b      	str	r3, [r7, #20]
}
 8005994:	bf00      	nop
 8005996:	e7fe      	b.n	8005996 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005998:	4b0a      	ldr	r3, [pc, #40]	; (80059c4 <vTaskPlaceOnEventListRestricted+0x54>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	3318      	adds	r3, #24
 800599e:	4619      	mov	r1, r3
 80059a0:	68f8      	ldr	r0, [r7, #12]
 80059a2:	f7fe fdbc 	bl	800451e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d002      	beq.n	80059b2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80059ac:	f04f 33ff 	mov.w	r3, #4294967295
 80059b0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80059b2:	6879      	ldr	r1, [r7, #4]
 80059b4:	68b8      	ldr	r0, [r7, #8]
 80059b6:	f000 fa55 	bl	8005e64 <prvAddCurrentTaskToDelayedList>
	}
 80059ba:	bf00      	nop
 80059bc:	3718      	adds	r7, #24
 80059be:	46bd      	mov	sp, r7
 80059c0:	bd80      	pop	{r7, pc}
 80059c2:	bf00      	nop
 80059c4:	200014a0 	.word	0x200014a0

080059c8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b086      	sub	sp, #24
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	68db      	ldr	r3, [r3, #12]
 80059d4:	68db      	ldr	r3, [r3, #12]
 80059d6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d10a      	bne.n	80059f4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80059de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059e2:	f383 8811 	msr	BASEPRI, r3
 80059e6:	f3bf 8f6f 	isb	sy
 80059ea:	f3bf 8f4f 	dsb	sy
 80059ee:	60fb      	str	r3, [r7, #12]
}
 80059f0:	bf00      	nop
 80059f2:	e7fe      	b.n	80059f2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80059f4:	693b      	ldr	r3, [r7, #16]
 80059f6:	3318      	adds	r3, #24
 80059f8:	4618      	mov	r0, r3
 80059fa:	f7fe fded 	bl	80045d8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80059fe:	4b1e      	ldr	r3, [pc, #120]	; (8005a78 <xTaskRemoveFromEventList+0xb0>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d11d      	bne.n	8005a42 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005a06:	693b      	ldr	r3, [r7, #16]
 8005a08:	3304      	adds	r3, #4
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	f7fe fde4 	bl	80045d8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005a10:	693b      	ldr	r3, [r7, #16]
 8005a12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a14:	4b19      	ldr	r3, [pc, #100]	; (8005a7c <xTaskRemoveFromEventList+0xb4>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	429a      	cmp	r2, r3
 8005a1a:	d903      	bls.n	8005a24 <xTaskRemoveFromEventList+0x5c>
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a20:	4a16      	ldr	r2, [pc, #88]	; (8005a7c <xTaskRemoveFromEventList+0xb4>)
 8005a22:	6013      	str	r3, [r2, #0]
 8005a24:	693b      	ldr	r3, [r7, #16]
 8005a26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a28:	4613      	mov	r3, r2
 8005a2a:	009b      	lsls	r3, r3, #2
 8005a2c:	4413      	add	r3, r2
 8005a2e:	009b      	lsls	r3, r3, #2
 8005a30:	4a13      	ldr	r2, [pc, #76]	; (8005a80 <xTaskRemoveFromEventList+0xb8>)
 8005a32:	441a      	add	r2, r3
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	3304      	adds	r3, #4
 8005a38:	4619      	mov	r1, r3
 8005a3a:	4610      	mov	r0, r2
 8005a3c:	f7fe fd6f 	bl	800451e <vListInsertEnd>
 8005a40:	e005      	b.n	8005a4e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005a42:	693b      	ldr	r3, [r7, #16]
 8005a44:	3318      	adds	r3, #24
 8005a46:	4619      	mov	r1, r3
 8005a48:	480e      	ldr	r0, [pc, #56]	; (8005a84 <xTaskRemoveFromEventList+0xbc>)
 8005a4a:	f7fe fd68 	bl	800451e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a52:	4b0d      	ldr	r3, [pc, #52]	; (8005a88 <xTaskRemoveFromEventList+0xc0>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a58:	429a      	cmp	r2, r3
 8005a5a:	d905      	bls.n	8005a68 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005a60:	4b0a      	ldr	r3, [pc, #40]	; (8005a8c <xTaskRemoveFromEventList+0xc4>)
 8005a62:	2201      	movs	r2, #1
 8005a64:	601a      	str	r2, [r3, #0]
 8005a66:	e001      	b.n	8005a6c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005a68:	2300      	movs	r3, #0
 8005a6a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005a6c:	697b      	ldr	r3, [r7, #20]
}
 8005a6e:	4618      	mov	r0, r3
 8005a70:	3718      	adds	r7, #24
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}
 8005a76:	bf00      	nop
 8005a78:	2000199c 	.word	0x2000199c
 8005a7c:	2000197c 	.word	0x2000197c
 8005a80:	200014a4 	.word	0x200014a4
 8005a84:	20001934 	.word	0x20001934
 8005a88:	200014a0 	.word	0x200014a0
 8005a8c:	20001988 	.word	0x20001988

08005a90 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005a90:	b480      	push	{r7}
 8005a92:	b083      	sub	sp, #12
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005a98:	4b06      	ldr	r3, [pc, #24]	; (8005ab4 <vTaskInternalSetTimeOutState+0x24>)
 8005a9a:	681a      	ldr	r2, [r3, #0]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005aa0:	4b05      	ldr	r3, [pc, #20]	; (8005ab8 <vTaskInternalSetTimeOutState+0x28>)
 8005aa2:	681a      	ldr	r2, [r3, #0]
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	605a      	str	r2, [r3, #4]
}
 8005aa8:	bf00      	nop
 8005aaa:	370c      	adds	r7, #12
 8005aac:	46bd      	mov	sp, r7
 8005aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab2:	4770      	bx	lr
 8005ab4:	2000198c 	.word	0x2000198c
 8005ab8:	20001978 	.word	0x20001978

08005abc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b088      	sub	sp, #32
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
 8005ac4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d10a      	bne.n	8005ae2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ad0:	f383 8811 	msr	BASEPRI, r3
 8005ad4:	f3bf 8f6f 	isb	sy
 8005ad8:	f3bf 8f4f 	dsb	sy
 8005adc:	613b      	str	r3, [r7, #16]
}
 8005ade:	bf00      	nop
 8005ae0:	e7fe      	b.n	8005ae0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d10a      	bne.n	8005afe <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aec:	f383 8811 	msr	BASEPRI, r3
 8005af0:	f3bf 8f6f 	isb	sy
 8005af4:	f3bf 8f4f 	dsb	sy
 8005af8:	60fb      	str	r3, [r7, #12]
}
 8005afa:	bf00      	nop
 8005afc:	e7fe      	b.n	8005afc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005afe:	f000 fe81 	bl	8006804 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005b02:	4b1d      	ldr	r3, [pc, #116]	; (8005b78 <xTaskCheckForTimeOut+0xbc>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	685b      	ldr	r3, [r3, #4]
 8005b0c:	69ba      	ldr	r2, [r7, #24]
 8005b0e:	1ad3      	subs	r3, r2, r3
 8005b10:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b1a:	d102      	bne.n	8005b22 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	61fb      	str	r3, [r7, #28]
 8005b20:	e023      	b.n	8005b6a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681a      	ldr	r2, [r3, #0]
 8005b26:	4b15      	ldr	r3, [pc, #84]	; (8005b7c <xTaskCheckForTimeOut+0xc0>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	429a      	cmp	r2, r3
 8005b2c:	d007      	beq.n	8005b3e <xTaskCheckForTimeOut+0x82>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	69ba      	ldr	r2, [r7, #24]
 8005b34:	429a      	cmp	r2, r3
 8005b36:	d302      	bcc.n	8005b3e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005b38:	2301      	movs	r3, #1
 8005b3a:	61fb      	str	r3, [r7, #28]
 8005b3c:	e015      	b.n	8005b6a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	697a      	ldr	r2, [r7, #20]
 8005b44:	429a      	cmp	r2, r3
 8005b46:	d20b      	bcs.n	8005b60 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	681a      	ldr	r2, [r3, #0]
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	1ad2      	subs	r2, r2, r3
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005b54:	6878      	ldr	r0, [r7, #4]
 8005b56:	f7ff ff9b 	bl	8005a90 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	61fb      	str	r3, [r7, #28]
 8005b5e:	e004      	b.n	8005b6a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	2200      	movs	r2, #0
 8005b64:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005b66:	2301      	movs	r3, #1
 8005b68:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005b6a:	f000 fe7b 	bl	8006864 <vPortExitCritical>

	return xReturn;
 8005b6e:	69fb      	ldr	r3, [r7, #28]
}
 8005b70:	4618      	mov	r0, r3
 8005b72:	3720      	adds	r7, #32
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bd80      	pop	{r7, pc}
 8005b78:	20001978 	.word	0x20001978
 8005b7c:	2000198c 	.word	0x2000198c

08005b80 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005b80:	b480      	push	{r7}
 8005b82:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005b84:	4b03      	ldr	r3, [pc, #12]	; (8005b94 <vTaskMissedYield+0x14>)
 8005b86:	2201      	movs	r2, #1
 8005b88:	601a      	str	r2, [r3, #0]
}
 8005b8a:	bf00      	nop
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b92:	4770      	bx	lr
 8005b94:	20001988 	.word	0x20001988

08005b98 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b082      	sub	sp, #8
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005ba0:	f000 f852 	bl	8005c48 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005ba4:	4b06      	ldr	r3, [pc, #24]	; (8005bc0 <prvIdleTask+0x28>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	2b01      	cmp	r3, #1
 8005baa:	d9f9      	bls.n	8005ba0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005bac:	4b05      	ldr	r3, [pc, #20]	; (8005bc4 <prvIdleTask+0x2c>)
 8005bae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bb2:	601a      	str	r2, [r3, #0]
 8005bb4:	f3bf 8f4f 	dsb	sy
 8005bb8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005bbc:	e7f0      	b.n	8005ba0 <prvIdleTask+0x8>
 8005bbe:	bf00      	nop
 8005bc0:	200014a4 	.word	0x200014a4
 8005bc4:	e000ed04 	.word	0xe000ed04

08005bc8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b082      	sub	sp, #8
 8005bcc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005bce:	2300      	movs	r3, #0
 8005bd0:	607b      	str	r3, [r7, #4]
 8005bd2:	e00c      	b.n	8005bee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005bd4:	687a      	ldr	r2, [r7, #4]
 8005bd6:	4613      	mov	r3, r2
 8005bd8:	009b      	lsls	r3, r3, #2
 8005bda:	4413      	add	r3, r2
 8005bdc:	009b      	lsls	r3, r3, #2
 8005bde:	4a12      	ldr	r2, [pc, #72]	; (8005c28 <prvInitialiseTaskLists+0x60>)
 8005be0:	4413      	add	r3, r2
 8005be2:	4618      	mov	r0, r3
 8005be4:	f7fe fc6e 	bl	80044c4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	3301      	adds	r3, #1
 8005bec:	607b      	str	r3, [r7, #4]
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2b37      	cmp	r3, #55	; 0x37
 8005bf2:	d9ef      	bls.n	8005bd4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005bf4:	480d      	ldr	r0, [pc, #52]	; (8005c2c <prvInitialiseTaskLists+0x64>)
 8005bf6:	f7fe fc65 	bl	80044c4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005bfa:	480d      	ldr	r0, [pc, #52]	; (8005c30 <prvInitialiseTaskLists+0x68>)
 8005bfc:	f7fe fc62 	bl	80044c4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005c00:	480c      	ldr	r0, [pc, #48]	; (8005c34 <prvInitialiseTaskLists+0x6c>)
 8005c02:	f7fe fc5f 	bl	80044c4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005c06:	480c      	ldr	r0, [pc, #48]	; (8005c38 <prvInitialiseTaskLists+0x70>)
 8005c08:	f7fe fc5c 	bl	80044c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005c0c:	480b      	ldr	r0, [pc, #44]	; (8005c3c <prvInitialiseTaskLists+0x74>)
 8005c0e:	f7fe fc59 	bl	80044c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005c12:	4b0b      	ldr	r3, [pc, #44]	; (8005c40 <prvInitialiseTaskLists+0x78>)
 8005c14:	4a05      	ldr	r2, [pc, #20]	; (8005c2c <prvInitialiseTaskLists+0x64>)
 8005c16:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005c18:	4b0a      	ldr	r3, [pc, #40]	; (8005c44 <prvInitialiseTaskLists+0x7c>)
 8005c1a:	4a05      	ldr	r2, [pc, #20]	; (8005c30 <prvInitialiseTaskLists+0x68>)
 8005c1c:	601a      	str	r2, [r3, #0]
}
 8005c1e:	bf00      	nop
 8005c20:	3708      	adds	r7, #8
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}
 8005c26:	bf00      	nop
 8005c28:	200014a4 	.word	0x200014a4
 8005c2c:	20001904 	.word	0x20001904
 8005c30:	20001918 	.word	0x20001918
 8005c34:	20001934 	.word	0x20001934
 8005c38:	20001948 	.word	0x20001948
 8005c3c:	20001960 	.word	0x20001960
 8005c40:	2000192c 	.word	0x2000192c
 8005c44:	20001930 	.word	0x20001930

08005c48 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b082      	sub	sp, #8
 8005c4c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005c4e:	e019      	b.n	8005c84 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005c50:	f000 fdd8 	bl	8006804 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c54:	4b10      	ldr	r3, [pc, #64]	; (8005c98 <prvCheckTasksWaitingTermination+0x50>)
 8005c56:	68db      	ldr	r3, [r3, #12]
 8005c58:	68db      	ldr	r3, [r3, #12]
 8005c5a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	3304      	adds	r3, #4
 8005c60:	4618      	mov	r0, r3
 8005c62:	f7fe fcb9 	bl	80045d8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005c66:	4b0d      	ldr	r3, [pc, #52]	; (8005c9c <prvCheckTasksWaitingTermination+0x54>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	3b01      	subs	r3, #1
 8005c6c:	4a0b      	ldr	r2, [pc, #44]	; (8005c9c <prvCheckTasksWaitingTermination+0x54>)
 8005c6e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005c70:	4b0b      	ldr	r3, [pc, #44]	; (8005ca0 <prvCheckTasksWaitingTermination+0x58>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	3b01      	subs	r3, #1
 8005c76:	4a0a      	ldr	r2, [pc, #40]	; (8005ca0 <prvCheckTasksWaitingTermination+0x58>)
 8005c78:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005c7a:	f000 fdf3 	bl	8006864 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	f000 f810 	bl	8005ca4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005c84:	4b06      	ldr	r3, [pc, #24]	; (8005ca0 <prvCheckTasksWaitingTermination+0x58>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d1e1      	bne.n	8005c50 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005c8c:	bf00      	nop
 8005c8e:	bf00      	nop
 8005c90:	3708      	adds	r7, #8
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}
 8005c96:	bf00      	nop
 8005c98:	20001948 	.word	0x20001948
 8005c9c:	20001974 	.word	0x20001974
 8005ca0:	2000195c 	.word	0x2000195c

08005ca4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b084      	sub	sp, #16
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	3358      	adds	r3, #88	; 0x58
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	f001 f8bb 	bl	8006e2c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d108      	bne.n	8005cd2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	f000 ff8b 	bl	8006be0 <vPortFree>
				vPortFree( pxTCB );
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	f000 ff88 	bl	8006be0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005cd0:	e018      	b.n	8005d04 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8005cd8:	2b01      	cmp	r3, #1
 8005cda:	d103      	bne.n	8005ce4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005cdc:	6878      	ldr	r0, [r7, #4]
 8005cde:	f000 ff7f 	bl	8006be0 <vPortFree>
	}
 8005ce2:	e00f      	b.n	8005d04 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8005cea:	2b02      	cmp	r3, #2
 8005cec:	d00a      	beq.n	8005d04 <prvDeleteTCB+0x60>
	__asm volatile
 8005cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cf2:	f383 8811 	msr	BASEPRI, r3
 8005cf6:	f3bf 8f6f 	isb	sy
 8005cfa:	f3bf 8f4f 	dsb	sy
 8005cfe:	60fb      	str	r3, [r7, #12]
}
 8005d00:	bf00      	nop
 8005d02:	e7fe      	b.n	8005d02 <prvDeleteTCB+0x5e>
	}
 8005d04:	bf00      	nop
 8005d06:	3710      	adds	r7, #16
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bd80      	pop	{r7, pc}

08005d0c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b083      	sub	sp, #12
 8005d10:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d12:	4b0c      	ldr	r3, [pc, #48]	; (8005d44 <prvResetNextTaskUnblockTime+0x38>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d104      	bne.n	8005d26 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005d1c:	4b0a      	ldr	r3, [pc, #40]	; (8005d48 <prvResetNextTaskUnblockTime+0x3c>)
 8005d1e:	f04f 32ff 	mov.w	r2, #4294967295
 8005d22:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005d24:	e008      	b.n	8005d38 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d26:	4b07      	ldr	r3, [pc, #28]	; (8005d44 <prvResetNextTaskUnblockTime+0x38>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	68db      	ldr	r3, [r3, #12]
 8005d2c:	68db      	ldr	r3, [r3, #12]
 8005d2e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	4a04      	ldr	r2, [pc, #16]	; (8005d48 <prvResetNextTaskUnblockTime+0x3c>)
 8005d36:	6013      	str	r3, [r2, #0]
}
 8005d38:	bf00      	nop
 8005d3a:	370c      	adds	r7, #12
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d42:	4770      	bx	lr
 8005d44:	2000192c 	.word	0x2000192c
 8005d48:	20001994 	.word	0x20001994

08005d4c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b083      	sub	sp, #12
 8005d50:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005d52:	4b0b      	ldr	r3, [pc, #44]	; (8005d80 <xTaskGetSchedulerState+0x34>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d102      	bne.n	8005d60 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	607b      	str	r3, [r7, #4]
 8005d5e:	e008      	b.n	8005d72 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d60:	4b08      	ldr	r3, [pc, #32]	; (8005d84 <xTaskGetSchedulerState+0x38>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d102      	bne.n	8005d6e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005d68:	2302      	movs	r3, #2
 8005d6a:	607b      	str	r3, [r7, #4]
 8005d6c:	e001      	b.n	8005d72 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005d6e:	2300      	movs	r3, #0
 8005d70:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005d72:	687b      	ldr	r3, [r7, #4]
	}
 8005d74:	4618      	mov	r0, r3
 8005d76:	370c      	adds	r7, #12
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7e:	4770      	bx	lr
 8005d80:	20001980 	.word	0x20001980
 8005d84:	2000199c 	.word	0x2000199c

08005d88 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b086      	sub	sp, #24
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005d94:	2300      	movs	r3, #0
 8005d96:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d056      	beq.n	8005e4c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005d9e:	4b2e      	ldr	r3, [pc, #184]	; (8005e58 <xTaskPriorityDisinherit+0xd0>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	693a      	ldr	r2, [r7, #16]
 8005da4:	429a      	cmp	r2, r3
 8005da6:	d00a      	beq.n	8005dbe <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dac:	f383 8811 	msr	BASEPRI, r3
 8005db0:	f3bf 8f6f 	isb	sy
 8005db4:	f3bf 8f4f 	dsb	sy
 8005db8:	60fb      	str	r3, [r7, #12]
}
 8005dba:	bf00      	nop
 8005dbc:	e7fe      	b.n	8005dbc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d10a      	bne.n	8005ddc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dca:	f383 8811 	msr	BASEPRI, r3
 8005dce:	f3bf 8f6f 	isb	sy
 8005dd2:	f3bf 8f4f 	dsb	sy
 8005dd6:	60bb      	str	r3, [r7, #8]
}
 8005dd8:	bf00      	nop
 8005dda:	e7fe      	b.n	8005dda <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005de0:	1e5a      	subs	r2, r3, #1
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dee:	429a      	cmp	r2, r3
 8005df0:	d02c      	beq.n	8005e4c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d128      	bne.n	8005e4c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	3304      	adds	r3, #4
 8005dfe:	4618      	mov	r0, r3
 8005e00:	f7fe fbea 	bl	80045d8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e0c:	693b      	ldr	r3, [r7, #16]
 8005e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e10:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005e14:	693b      	ldr	r3, [r7, #16]
 8005e16:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005e18:	693b      	ldr	r3, [r7, #16]
 8005e1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e1c:	4b0f      	ldr	r3, [pc, #60]	; (8005e5c <xTaskPriorityDisinherit+0xd4>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	429a      	cmp	r2, r3
 8005e22:	d903      	bls.n	8005e2c <xTaskPriorityDisinherit+0xa4>
 8005e24:	693b      	ldr	r3, [r7, #16]
 8005e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e28:	4a0c      	ldr	r2, [pc, #48]	; (8005e5c <xTaskPriorityDisinherit+0xd4>)
 8005e2a:	6013      	str	r3, [r2, #0]
 8005e2c:	693b      	ldr	r3, [r7, #16]
 8005e2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e30:	4613      	mov	r3, r2
 8005e32:	009b      	lsls	r3, r3, #2
 8005e34:	4413      	add	r3, r2
 8005e36:	009b      	lsls	r3, r3, #2
 8005e38:	4a09      	ldr	r2, [pc, #36]	; (8005e60 <xTaskPriorityDisinherit+0xd8>)
 8005e3a:	441a      	add	r2, r3
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	3304      	adds	r3, #4
 8005e40:	4619      	mov	r1, r3
 8005e42:	4610      	mov	r0, r2
 8005e44:	f7fe fb6b 	bl	800451e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005e48:	2301      	movs	r3, #1
 8005e4a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005e4c:	697b      	ldr	r3, [r7, #20]
	}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	3718      	adds	r7, #24
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bd80      	pop	{r7, pc}
 8005e56:	bf00      	nop
 8005e58:	200014a0 	.word	0x200014a0
 8005e5c:	2000197c 	.word	0x2000197c
 8005e60:	200014a4 	.word	0x200014a4

08005e64 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b084      	sub	sp, #16
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
 8005e6c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005e6e:	4b21      	ldr	r3, [pc, #132]	; (8005ef4 <prvAddCurrentTaskToDelayedList+0x90>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e74:	4b20      	ldr	r3, [pc, #128]	; (8005ef8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	3304      	adds	r3, #4
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	f7fe fbac 	bl	80045d8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e86:	d10a      	bne.n	8005e9e <prvAddCurrentTaskToDelayedList+0x3a>
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d007      	beq.n	8005e9e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e8e:	4b1a      	ldr	r3, [pc, #104]	; (8005ef8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	3304      	adds	r3, #4
 8005e94:	4619      	mov	r1, r3
 8005e96:	4819      	ldr	r0, [pc, #100]	; (8005efc <prvAddCurrentTaskToDelayedList+0x98>)
 8005e98:	f7fe fb41 	bl	800451e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005e9c:	e026      	b.n	8005eec <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005e9e:	68fa      	ldr	r2, [r7, #12]
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	4413      	add	r3, r2
 8005ea4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005ea6:	4b14      	ldr	r3, [pc, #80]	; (8005ef8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	68ba      	ldr	r2, [r7, #8]
 8005eac:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005eae:	68ba      	ldr	r2, [r7, #8]
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	429a      	cmp	r2, r3
 8005eb4:	d209      	bcs.n	8005eca <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005eb6:	4b12      	ldr	r3, [pc, #72]	; (8005f00 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005eb8:	681a      	ldr	r2, [r3, #0]
 8005eba:	4b0f      	ldr	r3, [pc, #60]	; (8005ef8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	3304      	adds	r3, #4
 8005ec0:	4619      	mov	r1, r3
 8005ec2:	4610      	mov	r0, r2
 8005ec4:	f7fe fb4f 	bl	8004566 <vListInsert>
}
 8005ec8:	e010      	b.n	8005eec <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005eca:	4b0e      	ldr	r3, [pc, #56]	; (8005f04 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005ecc:	681a      	ldr	r2, [r3, #0]
 8005ece:	4b0a      	ldr	r3, [pc, #40]	; (8005ef8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	3304      	adds	r3, #4
 8005ed4:	4619      	mov	r1, r3
 8005ed6:	4610      	mov	r0, r2
 8005ed8:	f7fe fb45 	bl	8004566 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005edc:	4b0a      	ldr	r3, [pc, #40]	; (8005f08 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	68ba      	ldr	r2, [r7, #8]
 8005ee2:	429a      	cmp	r2, r3
 8005ee4:	d202      	bcs.n	8005eec <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005ee6:	4a08      	ldr	r2, [pc, #32]	; (8005f08 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	6013      	str	r3, [r2, #0]
}
 8005eec:	bf00      	nop
 8005eee:	3710      	adds	r7, #16
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd80      	pop	{r7, pc}
 8005ef4:	20001978 	.word	0x20001978
 8005ef8:	200014a0 	.word	0x200014a0
 8005efc:	20001960 	.word	0x20001960
 8005f00:	20001930 	.word	0x20001930
 8005f04:	2000192c 	.word	0x2000192c
 8005f08:	20001994 	.word	0x20001994

08005f0c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b08a      	sub	sp, #40	; 0x28
 8005f10:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005f12:	2300      	movs	r3, #0
 8005f14:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005f16:	f000 fb07 	bl	8006528 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005f1a:	4b1c      	ldr	r3, [pc, #112]	; (8005f8c <xTimerCreateTimerTask+0x80>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d021      	beq.n	8005f66 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005f22:	2300      	movs	r3, #0
 8005f24:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005f26:	2300      	movs	r3, #0
 8005f28:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005f2a:	1d3a      	adds	r2, r7, #4
 8005f2c:	f107 0108 	add.w	r1, r7, #8
 8005f30:	f107 030c 	add.w	r3, r7, #12
 8005f34:	4618      	mov	r0, r3
 8005f36:	f7fe faab 	bl	8004490 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005f3a:	6879      	ldr	r1, [r7, #4]
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	68fa      	ldr	r2, [r7, #12]
 8005f40:	9202      	str	r2, [sp, #8]
 8005f42:	9301      	str	r3, [sp, #4]
 8005f44:	2302      	movs	r3, #2
 8005f46:	9300      	str	r3, [sp, #0]
 8005f48:	2300      	movs	r3, #0
 8005f4a:	460a      	mov	r2, r1
 8005f4c:	4910      	ldr	r1, [pc, #64]	; (8005f90 <xTimerCreateTimerTask+0x84>)
 8005f4e:	4811      	ldr	r0, [pc, #68]	; (8005f94 <xTimerCreateTimerTask+0x88>)
 8005f50:	f7ff f892 	bl	8005078 <xTaskCreateStatic>
 8005f54:	4603      	mov	r3, r0
 8005f56:	4a10      	ldr	r2, [pc, #64]	; (8005f98 <xTimerCreateTimerTask+0x8c>)
 8005f58:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005f5a:	4b0f      	ldr	r3, [pc, #60]	; (8005f98 <xTimerCreateTimerTask+0x8c>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d001      	beq.n	8005f66 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005f62:	2301      	movs	r3, #1
 8005f64:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d10a      	bne.n	8005f82 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f70:	f383 8811 	msr	BASEPRI, r3
 8005f74:	f3bf 8f6f 	isb	sy
 8005f78:	f3bf 8f4f 	dsb	sy
 8005f7c:	613b      	str	r3, [r7, #16]
}
 8005f7e:	bf00      	nop
 8005f80:	e7fe      	b.n	8005f80 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005f82:	697b      	ldr	r3, [r7, #20]
}
 8005f84:	4618      	mov	r0, r3
 8005f86:	3718      	adds	r7, #24
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bd80      	pop	{r7, pc}
 8005f8c:	200019d8 	.word	0x200019d8
 8005f90:	08007064 	.word	0x08007064
 8005f94:	080060d1 	.word	0x080060d1
 8005f98:	200019dc 	.word	0x200019dc

08005f9c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b08a      	sub	sp, #40	; 0x28
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	60f8      	str	r0, [r7, #12]
 8005fa4:	60b9      	str	r1, [r7, #8]
 8005fa6:	607a      	str	r2, [r7, #4]
 8005fa8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005faa:	2300      	movs	r3, #0
 8005fac:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d10a      	bne.n	8005fca <xTimerGenericCommand+0x2e>
	__asm volatile
 8005fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fb8:	f383 8811 	msr	BASEPRI, r3
 8005fbc:	f3bf 8f6f 	isb	sy
 8005fc0:	f3bf 8f4f 	dsb	sy
 8005fc4:	623b      	str	r3, [r7, #32]
}
 8005fc6:	bf00      	nop
 8005fc8:	e7fe      	b.n	8005fc8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005fca:	4b1a      	ldr	r3, [pc, #104]	; (8006034 <xTimerGenericCommand+0x98>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d02a      	beq.n	8006028 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	2b05      	cmp	r3, #5
 8005fe2:	dc18      	bgt.n	8006016 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005fe4:	f7ff feb2 	bl	8005d4c <xTaskGetSchedulerState>
 8005fe8:	4603      	mov	r3, r0
 8005fea:	2b02      	cmp	r3, #2
 8005fec:	d109      	bne.n	8006002 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005fee:	4b11      	ldr	r3, [pc, #68]	; (8006034 <xTimerGenericCommand+0x98>)
 8005ff0:	6818      	ldr	r0, [r3, #0]
 8005ff2:	f107 0110 	add.w	r1, r7, #16
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ffa:	f7fe fc55 	bl	80048a8 <xQueueGenericSend>
 8005ffe:	6278      	str	r0, [r7, #36]	; 0x24
 8006000:	e012      	b.n	8006028 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006002:	4b0c      	ldr	r3, [pc, #48]	; (8006034 <xTimerGenericCommand+0x98>)
 8006004:	6818      	ldr	r0, [r3, #0]
 8006006:	f107 0110 	add.w	r1, r7, #16
 800600a:	2300      	movs	r3, #0
 800600c:	2200      	movs	r2, #0
 800600e:	f7fe fc4b 	bl	80048a8 <xQueueGenericSend>
 8006012:	6278      	str	r0, [r7, #36]	; 0x24
 8006014:	e008      	b.n	8006028 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006016:	4b07      	ldr	r3, [pc, #28]	; (8006034 <xTimerGenericCommand+0x98>)
 8006018:	6818      	ldr	r0, [r3, #0]
 800601a:	f107 0110 	add.w	r1, r7, #16
 800601e:	2300      	movs	r3, #0
 8006020:	683a      	ldr	r2, [r7, #0]
 8006022:	f7fe fd3f 	bl	8004aa4 <xQueueGenericSendFromISR>
 8006026:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800602a:	4618      	mov	r0, r3
 800602c:	3728      	adds	r7, #40	; 0x28
 800602e:	46bd      	mov	sp, r7
 8006030:	bd80      	pop	{r7, pc}
 8006032:	bf00      	nop
 8006034:	200019d8 	.word	0x200019d8

08006038 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b088      	sub	sp, #32
 800603c:	af02      	add	r7, sp, #8
 800603e:	6078      	str	r0, [r7, #4]
 8006040:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006042:	4b22      	ldr	r3, [pc, #136]	; (80060cc <prvProcessExpiredTimer+0x94>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	68db      	ldr	r3, [r3, #12]
 8006048:	68db      	ldr	r3, [r3, #12]
 800604a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800604c:	697b      	ldr	r3, [r7, #20]
 800604e:	3304      	adds	r3, #4
 8006050:	4618      	mov	r0, r3
 8006052:	f7fe fac1 	bl	80045d8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006056:	697b      	ldr	r3, [r7, #20]
 8006058:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800605c:	f003 0304 	and.w	r3, r3, #4
 8006060:	2b00      	cmp	r3, #0
 8006062:	d022      	beq.n	80060aa <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006064:	697b      	ldr	r3, [r7, #20]
 8006066:	699a      	ldr	r2, [r3, #24]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	18d1      	adds	r1, r2, r3
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	683a      	ldr	r2, [r7, #0]
 8006070:	6978      	ldr	r0, [r7, #20]
 8006072:	f000 f8d1 	bl	8006218 <prvInsertTimerInActiveList>
 8006076:	4603      	mov	r3, r0
 8006078:	2b00      	cmp	r3, #0
 800607a:	d01f      	beq.n	80060bc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800607c:	2300      	movs	r3, #0
 800607e:	9300      	str	r3, [sp, #0]
 8006080:	2300      	movs	r3, #0
 8006082:	687a      	ldr	r2, [r7, #4]
 8006084:	2100      	movs	r1, #0
 8006086:	6978      	ldr	r0, [r7, #20]
 8006088:	f7ff ff88 	bl	8005f9c <xTimerGenericCommand>
 800608c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800608e:	693b      	ldr	r3, [r7, #16]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d113      	bne.n	80060bc <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006098:	f383 8811 	msr	BASEPRI, r3
 800609c:	f3bf 8f6f 	isb	sy
 80060a0:	f3bf 8f4f 	dsb	sy
 80060a4:	60fb      	str	r3, [r7, #12]
}
 80060a6:	bf00      	nop
 80060a8:	e7fe      	b.n	80060a8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80060aa:	697b      	ldr	r3, [r7, #20]
 80060ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80060b0:	f023 0301 	bic.w	r3, r3, #1
 80060b4:	b2da      	uxtb	r2, r3
 80060b6:	697b      	ldr	r3, [r7, #20]
 80060b8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80060bc:	697b      	ldr	r3, [r7, #20]
 80060be:	6a1b      	ldr	r3, [r3, #32]
 80060c0:	6978      	ldr	r0, [r7, #20]
 80060c2:	4798      	blx	r3
}
 80060c4:	bf00      	nop
 80060c6:	3718      	adds	r7, #24
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bd80      	pop	{r7, pc}
 80060cc:	200019d0 	.word	0x200019d0

080060d0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b084      	sub	sp, #16
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80060d8:	f107 0308 	add.w	r3, r7, #8
 80060dc:	4618      	mov	r0, r3
 80060de:	f000 f857 	bl	8006190 <prvGetNextExpireTime>
 80060e2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	4619      	mov	r1, r3
 80060e8:	68f8      	ldr	r0, [r7, #12]
 80060ea:	f000 f803 	bl	80060f4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80060ee:	f000 f8d5 	bl	800629c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80060f2:	e7f1      	b.n	80060d8 <prvTimerTask+0x8>

080060f4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b084      	sub	sp, #16
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
 80060fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80060fe:	f7ff fa1d 	bl	800553c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006102:	f107 0308 	add.w	r3, r7, #8
 8006106:	4618      	mov	r0, r3
 8006108:	f000 f866 	bl	80061d8 <prvSampleTimeNow>
 800610c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d130      	bne.n	8006176 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d10a      	bne.n	8006130 <prvProcessTimerOrBlockTask+0x3c>
 800611a:	687a      	ldr	r2, [r7, #4]
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	429a      	cmp	r2, r3
 8006120:	d806      	bhi.n	8006130 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006122:	f7ff fa19 	bl	8005558 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006126:	68f9      	ldr	r1, [r7, #12]
 8006128:	6878      	ldr	r0, [r7, #4]
 800612a:	f7ff ff85 	bl	8006038 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800612e:	e024      	b.n	800617a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d008      	beq.n	8006148 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006136:	4b13      	ldr	r3, [pc, #76]	; (8006184 <prvProcessTimerOrBlockTask+0x90>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d101      	bne.n	8006144 <prvProcessTimerOrBlockTask+0x50>
 8006140:	2301      	movs	r3, #1
 8006142:	e000      	b.n	8006146 <prvProcessTimerOrBlockTask+0x52>
 8006144:	2300      	movs	r3, #0
 8006146:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006148:	4b0f      	ldr	r3, [pc, #60]	; (8006188 <prvProcessTimerOrBlockTask+0x94>)
 800614a:	6818      	ldr	r0, [r3, #0]
 800614c:	687a      	ldr	r2, [r7, #4]
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	1ad3      	subs	r3, r2, r3
 8006152:	683a      	ldr	r2, [r7, #0]
 8006154:	4619      	mov	r1, r3
 8006156:	f7fe ff5b 	bl	8005010 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800615a:	f7ff f9fd 	bl	8005558 <xTaskResumeAll>
 800615e:	4603      	mov	r3, r0
 8006160:	2b00      	cmp	r3, #0
 8006162:	d10a      	bne.n	800617a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006164:	4b09      	ldr	r3, [pc, #36]	; (800618c <prvProcessTimerOrBlockTask+0x98>)
 8006166:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800616a:	601a      	str	r2, [r3, #0]
 800616c:	f3bf 8f4f 	dsb	sy
 8006170:	f3bf 8f6f 	isb	sy
}
 8006174:	e001      	b.n	800617a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006176:	f7ff f9ef 	bl	8005558 <xTaskResumeAll>
}
 800617a:	bf00      	nop
 800617c:	3710      	adds	r7, #16
 800617e:	46bd      	mov	sp, r7
 8006180:	bd80      	pop	{r7, pc}
 8006182:	bf00      	nop
 8006184:	200019d4 	.word	0x200019d4
 8006188:	200019d8 	.word	0x200019d8
 800618c:	e000ed04 	.word	0xe000ed04

08006190 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006190:	b480      	push	{r7}
 8006192:	b085      	sub	sp, #20
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006198:	4b0e      	ldr	r3, [pc, #56]	; (80061d4 <prvGetNextExpireTime+0x44>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d101      	bne.n	80061a6 <prvGetNextExpireTime+0x16>
 80061a2:	2201      	movs	r2, #1
 80061a4:	e000      	b.n	80061a8 <prvGetNextExpireTime+0x18>
 80061a6:	2200      	movs	r2, #0
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d105      	bne.n	80061c0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80061b4:	4b07      	ldr	r3, [pc, #28]	; (80061d4 <prvGetNextExpireTime+0x44>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	68db      	ldr	r3, [r3, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	60fb      	str	r3, [r7, #12]
 80061be:	e001      	b.n	80061c4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80061c0:	2300      	movs	r3, #0
 80061c2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80061c4:	68fb      	ldr	r3, [r7, #12]
}
 80061c6:	4618      	mov	r0, r3
 80061c8:	3714      	adds	r7, #20
 80061ca:	46bd      	mov	sp, r7
 80061cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d0:	4770      	bx	lr
 80061d2:	bf00      	nop
 80061d4:	200019d0 	.word	0x200019d0

080061d8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b084      	sub	sp, #16
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80061e0:	f7ff fa58 	bl	8005694 <xTaskGetTickCount>
 80061e4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80061e6:	4b0b      	ldr	r3, [pc, #44]	; (8006214 <prvSampleTimeNow+0x3c>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	68fa      	ldr	r2, [r7, #12]
 80061ec:	429a      	cmp	r2, r3
 80061ee:	d205      	bcs.n	80061fc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80061f0:	f000 f936 	bl	8006460 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2201      	movs	r2, #1
 80061f8:	601a      	str	r2, [r3, #0]
 80061fa:	e002      	b.n	8006202 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2200      	movs	r2, #0
 8006200:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006202:	4a04      	ldr	r2, [pc, #16]	; (8006214 <prvSampleTimeNow+0x3c>)
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006208:	68fb      	ldr	r3, [r7, #12]
}
 800620a:	4618      	mov	r0, r3
 800620c:	3710      	adds	r7, #16
 800620e:	46bd      	mov	sp, r7
 8006210:	bd80      	pop	{r7, pc}
 8006212:	bf00      	nop
 8006214:	200019e0 	.word	0x200019e0

08006218 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b086      	sub	sp, #24
 800621c:	af00      	add	r7, sp, #0
 800621e:	60f8      	str	r0, [r7, #12]
 8006220:	60b9      	str	r1, [r7, #8]
 8006222:	607a      	str	r2, [r7, #4]
 8006224:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006226:	2300      	movs	r3, #0
 8006228:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	68ba      	ldr	r2, [r7, #8]
 800622e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	68fa      	ldr	r2, [r7, #12]
 8006234:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006236:	68ba      	ldr	r2, [r7, #8]
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	429a      	cmp	r2, r3
 800623c:	d812      	bhi.n	8006264 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800623e:	687a      	ldr	r2, [r7, #4]
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	1ad2      	subs	r2, r2, r3
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	699b      	ldr	r3, [r3, #24]
 8006248:	429a      	cmp	r2, r3
 800624a:	d302      	bcc.n	8006252 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800624c:	2301      	movs	r3, #1
 800624e:	617b      	str	r3, [r7, #20]
 8006250:	e01b      	b.n	800628a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006252:	4b10      	ldr	r3, [pc, #64]	; (8006294 <prvInsertTimerInActiveList+0x7c>)
 8006254:	681a      	ldr	r2, [r3, #0]
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	3304      	adds	r3, #4
 800625a:	4619      	mov	r1, r3
 800625c:	4610      	mov	r0, r2
 800625e:	f7fe f982 	bl	8004566 <vListInsert>
 8006262:	e012      	b.n	800628a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006264:	687a      	ldr	r2, [r7, #4]
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	429a      	cmp	r2, r3
 800626a:	d206      	bcs.n	800627a <prvInsertTimerInActiveList+0x62>
 800626c:	68ba      	ldr	r2, [r7, #8]
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	429a      	cmp	r2, r3
 8006272:	d302      	bcc.n	800627a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006274:	2301      	movs	r3, #1
 8006276:	617b      	str	r3, [r7, #20]
 8006278:	e007      	b.n	800628a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800627a:	4b07      	ldr	r3, [pc, #28]	; (8006298 <prvInsertTimerInActiveList+0x80>)
 800627c:	681a      	ldr	r2, [r3, #0]
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	3304      	adds	r3, #4
 8006282:	4619      	mov	r1, r3
 8006284:	4610      	mov	r0, r2
 8006286:	f7fe f96e 	bl	8004566 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800628a:	697b      	ldr	r3, [r7, #20]
}
 800628c:	4618      	mov	r0, r3
 800628e:	3718      	adds	r7, #24
 8006290:	46bd      	mov	sp, r7
 8006292:	bd80      	pop	{r7, pc}
 8006294:	200019d4 	.word	0x200019d4
 8006298:	200019d0 	.word	0x200019d0

0800629c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b08e      	sub	sp, #56	; 0x38
 80062a0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80062a2:	e0ca      	b.n	800643a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	da18      	bge.n	80062dc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80062aa:	1d3b      	adds	r3, r7, #4
 80062ac:	3304      	adds	r3, #4
 80062ae:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80062b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d10a      	bne.n	80062cc <prvProcessReceivedCommands+0x30>
	__asm volatile
 80062b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ba:	f383 8811 	msr	BASEPRI, r3
 80062be:	f3bf 8f6f 	isb	sy
 80062c2:	f3bf 8f4f 	dsb	sy
 80062c6:	61fb      	str	r3, [r7, #28]
}
 80062c8:	bf00      	nop
 80062ca:	e7fe      	b.n	80062ca <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80062cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80062d2:	6850      	ldr	r0, [r2, #4]
 80062d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80062d6:	6892      	ldr	r2, [r2, #8]
 80062d8:	4611      	mov	r1, r2
 80062da:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	f2c0 80ab 	blt.w	800643a <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80062e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ea:	695b      	ldr	r3, [r3, #20]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d004      	beq.n	80062fa <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80062f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062f2:	3304      	adds	r3, #4
 80062f4:	4618      	mov	r0, r3
 80062f6:	f7fe f96f 	bl	80045d8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80062fa:	463b      	mov	r3, r7
 80062fc:	4618      	mov	r0, r3
 80062fe:	f7ff ff6b 	bl	80061d8 <prvSampleTimeNow>
 8006302:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2b09      	cmp	r3, #9
 8006308:	f200 8096 	bhi.w	8006438 <prvProcessReceivedCommands+0x19c>
 800630c:	a201      	add	r2, pc, #4	; (adr r2, 8006314 <prvProcessReceivedCommands+0x78>)
 800630e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006312:	bf00      	nop
 8006314:	0800633d 	.word	0x0800633d
 8006318:	0800633d 	.word	0x0800633d
 800631c:	0800633d 	.word	0x0800633d
 8006320:	080063b1 	.word	0x080063b1
 8006324:	080063c5 	.word	0x080063c5
 8006328:	0800640f 	.word	0x0800640f
 800632c:	0800633d 	.word	0x0800633d
 8006330:	0800633d 	.word	0x0800633d
 8006334:	080063b1 	.word	0x080063b1
 8006338:	080063c5 	.word	0x080063c5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800633c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800633e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006342:	f043 0301 	orr.w	r3, r3, #1
 8006346:	b2da      	uxtb	r2, r3
 8006348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800634a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800634e:	68ba      	ldr	r2, [r7, #8]
 8006350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006352:	699b      	ldr	r3, [r3, #24]
 8006354:	18d1      	adds	r1, r2, r3
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800635a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800635c:	f7ff ff5c 	bl	8006218 <prvInsertTimerInActiveList>
 8006360:	4603      	mov	r3, r0
 8006362:	2b00      	cmp	r3, #0
 8006364:	d069      	beq.n	800643a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006368:	6a1b      	ldr	r3, [r3, #32]
 800636a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800636c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800636e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006370:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006374:	f003 0304 	and.w	r3, r3, #4
 8006378:	2b00      	cmp	r3, #0
 800637a:	d05e      	beq.n	800643a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800637c:	68ba      	ldr	r2, [r7, #8]
 800637e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006380:	699b      	ldr	r3, [r3, #24]
 8006382:	441a      	add	r2, r3
 8006384:	2300      	movs	r3, #0
 8006386:	9300      	str	r3, [sp, #0]
 8006388:	2300      	movs	r3, #0
 800638a:	2100      	movs	r1, #0
 800638c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800638e:	f7ff fe05 	bl	8005f9c <xTimerGenericCommand>
 8006392:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006394:	6a3b      	ldr	r3, [r7, #32]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d14f      	bne.n	800643a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800639a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800639e:	f383 8811 	msr	BASEPRI, r3
 80063a2:	f3bf 8f6f 	isb	sy
 80063a6:	f3bf 8f4f 	dsb	sy
 80063aa:	61bb      	str	r3, [r7, #24]
}
 80063ac:	bf00      	nop
 80063ae:	e7fe      	b.n	80063ae <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80063b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80063b6:	f023 0301 	bic.w	r3, r3, #1
 80063ba:	b2da      	uxtb	r2, r3
 80063bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80063c2:	e03a      	b.n	800643a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80063c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80063ca:	f043 0301 	orr.w	r3, r3, #1
 80063ce:	b2da      	uxtb	r2, r3
 80063d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80063d6:	68ba      	ldr	r2, [r7, #8]
 80063d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063da:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80063dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063de:	699b      	ldr	r3, [r3, #24]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d10a      	bne.n	80063fa <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80063e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063e8:	f383 8811 	msr	BASEPRI, r3
 80063ec:	f3bf 8f6f 	isb	sy
 80063f0:	f3bf 8f4f 	dsb	sy
 80063f4:	617b      	str	r3, [r7, #20]
}
 80063f6:	bf00      	nop
 80063f8:	e7fe      	b.n	80063f8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80063fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063fc:	699a      	ldr	r2, [r3, #24]
 80063fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006400:	18d1      	adds	r1, r2, r3
 8006402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006404:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006406:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006408:	f7ff ff06 	bl	8006218 <prvInsertTimerInActiveList>
					break;
 800640c:	e015      	b.n	800643a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800640e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006410:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006414:	f003 0302 	and.w	r3, r3, #2
 8006418:	2b00      	cmp	r3, #0
 800641a:	d103      	bne.n	8006424 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800641c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800641e:	f000 fbdf 	bl	8006be0 <vPortFree>
 8006422:	e00a      	b.n	800643a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006426:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800642a:	f023 0301 	bic.w	r3, r3, #1
 800642e:	b2da      	uxtb	r2, r3
 8006430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006432:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006436:	e000      	b.n	800643a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8006438:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800643a:	4b08      	ldr	r3, [pc, #32]	; (800645c <prvProcessReceivedCommands+0x1c0>)
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	1d39      	adds	r1, r7, #4
 8006440:	2200      	movs	r2, #0
 8006442:	4618      	mov	r0, r3
 8006444:	f7fe fbca 	bl	8004bdc <xQueueReceive>
 8006448:	4603      	mov	r3, r0
 800644a:	2b00      	cmp	r3, #0
 800644c:	f47f af2a 	bne.w	80062a4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006450:	bf00      	nop
 8006452:	bf00      	nop
 8006454:	3730      	adds	r7, #48	; 0x30
 8006456:	46bd      	mov	sp, r7
 8006458:	bd80      	pop	{r7, pc}
 800645a:	bf00      	nop
 800645c:	200019d8 	.word	0x200019d8

08006460 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b088      	sub	sp, #32
 8006464:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006466:	e048      	b.n	80064fa <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006468:	4b2d      	ldr	r3, [pc, #180]	; (8006520 <prvSwitchTimerLists+0xc0>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	68db      	ldr	r3, [r3, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006472:	4b2b      	ldr	r3, [pc, #172]	; (8006520 <prvSwitchTimerLists+0xc0>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	68db      	ldr	r3, [r3, #12]
 8006478:	68db      	ldr	r3, [r3, #12]
 800647a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	3304      	adds	r3, #4
 8006480:	4618      	mov	r0, r3
 8006482:	f7fe f8a9 	bl	80045d8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	6a1b      	ldr	r3, [r3, #32]
 800648a:	68f8      	ldr	r0, [r7, #12]
 800648c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006494:	f003 0304 	and.w	r3, r3, #4
 8006498:	2b00      	cmp	r3, #0
 800649a:	d02e      	beq.n	80064fa <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	699b      	ldr	r3, [r3, #24]
 80064a0:	693a      	ldr	r2, [r7, #16]
 80064a2:	4413      	add	r3, r2
 80064a4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80064a6:	68ba      	ldr	r2, [r7, #8]
 80064a8:	693b      	ldr	r3, [r7, #16]
 80064aa:	429a      	cmp	r2, r3
 80064ac:	d90e      	bls.n	80064cc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	68ba      	ldr	r2, [r7, #8]
 80064b2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	68fa      	ldr	r2, [r7, #12]
 80064b8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80064ba:	4b19      	ldr	r3, [pc, #100]	; (8006520 <prvSwitchTimerLists+0xc0>)
 80064bc:	681a      	ldr	r2, [r3, #0]
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	3304      	adds	r3, #4
 80064c2:	4619      	mov	r1, r3
 80064c4:	4610      	mov	r0, r2
 80064c6:	f7fe f84e 	bl	8004566 <vListInsert>
 80064ca:	e016      	b.n	80064fa <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80064cc:	2300      	movs	r3, #0
 80064ce:	9300      	str	r3, [sp, #0]
 80064d0:	2300      	movs	r3, #0
 80064d2:	693a      	ldr	r2, [r7, #16]
 80064d4:	2100      	movs	r1, #0
 80064d6:	68f8      	ldr	r0, [r7, #12]
 80064d8:	f7ff fd60 	bl	8005f9c <xTimerGenericCommand>
 80064dc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d10a      	bne.n	80064fa <prvSwitchTimerLists+0x9a>
	__asm volatile
 80064e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064e8:	f383 8811 	msr	BASEPRI, r3
 80064ec:	f3bf 8f6f 	isb	sy
 80064f0:	f3bf 8f4f 	dsb	sy
 80064f4:	603b      	str	r3, [r7, #0]
}
 80064f6:	bf00      	nop
 80064f8:	e7fe      	b.n	80064f8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80064fa:	4b09      	ldr	r3, [pc, #36]	; (8006520 <prvSwitchTimerLists+0xc0>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d1b1      	bne.n	8006468 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006504:	4b06      	ldr	r3, [pc, #24]	; (8006520 <prvSwitchTimerLists+0xc0>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800650a:	4b06      	ldr	r3, [pc, #24]	; (8006524 <prvSwitchTimerLists+0xc4>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4a04      	ldr	r2, [pc, #16]	; (8006520 <prvSwitchTimerLists+0xc0>)
 8006510:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006512:	4a04      	ldr	r2, [pc, #16]	; (8006524 <prvSwitchTimerLists+0xc4>)
 8006514:	697b      	ldr	r3, [r7, #20]
 8006516:	6013      	str	r3, [r2, #0]
}
 8006518:	bf00      	nop
 800651a:	3718      	adds	r7, #24
 800651c:	46bd      	mov	sp, r7
 800651e:	bd80      	pop	{r7, pc}
 8006520:	200019d0 	.word	0x200019d0
 8006524:	200019d4 	.word	0x200019d4

08006528 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b082      	sub	sp, #8
 800652c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800652e:	f000 f969 	bl	8006804 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006532:	4b15      	ldr	r3, [pc, #84]	; (8006588 <prvCheckForValidListAndQueue+0x60>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d120      	bne.n	800657c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800653a:	4814      	ldr	r0, [pc, #80]	; (800658c <prvCheckForValidListAndQueue+0x64>)
 800653c:	f7fd ffc2 	bl	80044c4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006540:	4813      	ldr	r0, [pc, #76]	; (8006590 <prvCheckForValidListAndQueue+0x68>)
 8006542:	f7fd ffbf 	bl	80044c4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006546:	4b13      	ldr	r3, [pc, #76]	; (8006594 <prvCheckForValidListAndQueue+0x6c>)
 8006548:	4a10      	ldr	r2, [pc, #64]	; (800658c <prvCheckForValidListAndQueue+0x64>)
 800654a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800654c:	4b12      	ldr	r3, [pc, #72]	; (8006598 <prvCheckForValidListAndQueue+0x70>)
 800654e:	4a10      	ldr	r2, [pc, #64]	; (8006590 <prvCheckForValidListAndQueue+0x68>)
 8006550:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006552:	2300      	movs	r3, #0
 8006554:	9300      	str	r3, [sp, #0]
 8006556:	4b11      	ldr	r3, [pc, #68]	; (800659c <prvCheckForValidListAndQueue+0x74>)
 8006558:	4a11      	ldr	r2, [pc, #68]	; (80065a0 <prvCheckForValidListAndQueue+0x78>)
 800655a:	2110      	movs	r1, #16
 800655c:	200a      	movs	r0, #10
 800655e:	f7fe f8cd 	bl	80046fc <xQueueGenericCreateStatic>
 8006562:	4603      	mov	r3, r0
 8006564:	4a08      	ldr	r2, [pc, #32]	; (8006588 <prvCheckForValidListAndQueue+0x60>)
 8006566:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006568:	4b07      	ldr	r3, [pc, #28]	; (8006588 <prvCheckForValidListAndQueue+0x60>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d005      	beq.n	800657c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006570:	4b05      	ldr	r3, [pc, #20]	; (8006588 <prvCheckForValidListAndQueue+0x60>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	490b      	ldr	r1, [pc, #44]	; (80065a4 <prvCheckForValidListAndQueue+0x7c>)
 8006576:	4618      	mov	r0, r3
 8006578:	f7fe fd20 	bl	8004fbc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800657c:	f000 f972 	bl	8006864 <vPortExitCritical>
}
 8006580:	bf00      	nop
 8006582:	46bd      	mov	sp, r7
 8006584:	bd80      	pop	{r7, pc}
 8006586:	bf00      	nop
 8006588:	200019d8 	.word	0x200019d8
 800658c:	200019a8 	.word	0x200019a8
 8006590:	200019bc 	.word	0x200019bc
 8006594:	200019d0 	.word	0x200019d0
 8006598:	200019d4 	.word	0x200019d4
 800659c:	20001a84 	.word	0x20001a84
 80065a0:	200019e4 	.word	0x200019e4
 80065a4:	0800706c 	.word	0x0800706c

080065a8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80065a8:	b480      	push	{r7}
 80065aa:	b085      	sub	sp, #20
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	60f8      	str	r0, [r7, #12]
 80065b0:	60b9      	str	r1, [r7, #8]
 80065b2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	3b04      	subs	r3, #4
 80065b8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80065c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	3b04      	subs	r3, #4
 80065c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	f023 0201 	bic.w	r2, r3, #1
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	3b04      	subs	r3, #4
 80065d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80065d8:	4a0c      	ldr	r2, [pc, #48]	; (800660c <pxPortInitialiseStack+0x64>)
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	3b14      	subs	r3, #20
 80065e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80065e4:	687a      	ldr	r2, [r7, #4]
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	3b04      	subs	r3, #4
 80065ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	f06f 0202 	mvn.w	r2, #2
 80065f6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	3b20      	subs	r3, #32
 80065fc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80065fe:	68fb      	ldr	r3, [r7, #12]
}
 8006600:	4618      	mov	r0, r3
 8006602:	3714      	adds	r7, #20
 8006604:	46bd      	mov	sp, r7
 8006606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660a:	4770      	bx	lr
 800660c:	08006611 	.word	0x08006611

08006610 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006610:	b480      	push	{r7}
 8006612:	b085      	sub	sp, #20
 8006614:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006616:	2300      	movs	r3, #0
 8006618:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800661a:	4b12      	ldr	r3, [pc, #72]	; (8006664 <prvTaskExitError+0x54>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006622:	d00a      	beq.n	800663a <prvTaskExitError+0x2a>
	__asm volatile
 8006624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006628:	f383 8811 	msr	BASEPRI, r3
 800662c:	f3bf 8f6f 	isb	sy
 8006630:	f3bf 8f4f 	dsb	sy
 8006634:	60fb      	str	r3, [r7, #12]
}
 8006636:	bf00      	nop
 8006638:	e7fe      	b.n	8006638 <prvTaskExitError+0x28>
	__asm volatile
 800663a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800663e:	f383 8811 	msr	BASEPRI, r3
 8006642:	f3bf 8f6f 	isb	sy
 8006646:	f3bf 8f4f 	dsb	sy
 800664a:	60bb      	str	r3, [r7, #8]
}
 800664c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800664e:	bf00      	nop
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d0fc      	beq.n	8006650 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006656:	bf00      	nop
 8006658:	bf00      	nop
 800665a:	3714      	adds	r7, #20
 800665c:	46bd      	mov	sp, r7
 800665e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006662:	4770      	bx	lr
 8006664:	2000000c 	.word	0x2000000c
	...

08006670 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006670:	4b07      	ldr	r3, [pc, #28]	; (8006690 <pxCurrentTCBConst2>)
 8006672:	6819      	ldr	r1, [r3, #0]
 8006674:	6808      	ldr	r0, [r1, #0]
 8006676:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800667a:	f380 8809 	msr	PSP, r0
 800667e:	f3bf 8f6f 	isb	sy
 8006682:	f04f 0000 	mov.w	r0, #0
 8006686:	f380 8811 	msr	BASEPRI, r0
 800668a:	4770      	bx	lr
 800668c:	f3af 8000 	nop.w

08006690 <pxCurrentTCBConst2>:
 8006690:	200014a0 	.word	0x200014a0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006694:	bf00      	nop
 8006696:	bf00      	nop

08006698 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006698:	4808      	ldr	r0, [pc, #32]	; (80066bc <prvPortStartFirstTask+0x24>)
 800669a:	6800      	ldr	r0, [r0, #0]
 800669c:	6800      	ldr	r0, [r0, #0]
 800669e:	f380 8808 	msr	MSP, r0
 80066a2:	f04f 0000 	mov.w	r0, #0
 80066a6:	f380 8814 	msr	CONTROL, r0
 80066aa:	b662      	cpsie	i
 80066ac:	b661      	cpsie	f
 80066ae:	f3bf 8f4f 	dsb	sy
 80066b2:	f3bf 8f6f 	isb	sy
 80066b6:	df00      	svc	0
 80066b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80066ba:	bf00      	nop
 80066bc:	e000ed08 	.word	0xe000ed08

080066c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b086      	sub	sp, #24
 80066c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80066c6:	4b46      	ldr	r3, [pc, #280]	; (80067e0 <xPortStartScheduler+0x120>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4a46      	ldr	r2, [pc, #280]	; (80067e4 <xPortStartScheduler+0x124>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d10a      	bne.n	80066e6 <xPortStartScheduler+0x26>
	__asm volatile
 80066d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066d4:	f383 8811 	msr	BASEPRI, r3
 80066d8:	f3bf 8f6f 	isb	sy
 80066dc:	f3bf 8f4f 	dsb	sy
 80066e0:	613b      	str	r3, [r7, #16]
}
 80066e2:	bf00      	nop
 80066e4:	e7fe      	b.n	80066e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80066e6:	4b3e      	ldr	r3, [pc, #248]	; (80067e0 <xPortStartScheduler+0x120>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4a3f      	ldr	r2, [pc, #252]	; (80067e8 <xPortStartScheduler+0x128>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d10a      	bne.n	8006706 <xPortStartScheduler+0x46>
	__asm volatile
 80066f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066f4:	f383 8811 	msr	BASEPRI, r3
 80066f8:	f3bf 8f6f 	isb	sy
 80066fc:	f3bf 8f4f 	dsb	sy
 8006700:	60fb      	str	r3, [r7, #12]
}
 8006702:	bf00      	nop
 8006704:	e7fe      	b.n	8006704 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006706:	4b39      	ldr	r3, [pc, #228]	; (80067ec <xPortStartScheduler+0x12c>)
 8006708:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800670a:	697b      	ldr	r3, [r7, #20]
 800670c:	781b      	ldrb	r3, [r3, #0]
 800670e:	b2db      	uxtb	r3, r3
 8006710:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006712:	697b      	ldr	r3, [r7, #20]
 8006714:	22ff      	movs	r2, #255	; 0xff
 8006716:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006718:	697b      	ldr	r3, [r7, #20]
 800671a:	781b      	ldrb	r3, [r3, #0]
 800671c:	b2db      	uxtb	r3, r3
 800671e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006720:	78fb      	ldrb	r3, [r7, #3]
 8006722:	b2db      	uxtb	r3, r3
 8006724:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006728:	b2da      	uxtb	r2, r3
 800672a:	4b31      	ldr	r3, [pc, #196]	; (80067f0 <xPortStartScheduler+0x130>)
 800672c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800672e:	4b31      	ldr	r3, [pc, #196]	; (80067f4 <xPortStartScheduler+0x134>)
 8006730:	2207      	movs	r2, #7
 8006732:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006734:	e009      	b.n	800674a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006736:	4b2f      	ldr	r3, [pc, #188]	; (80067f4 <xPortStartScheduler+0x134>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	3b01      	subs	r3, #1
 800673c:	4a2d      	ldr	r2, [pc, #180]	; (80067f4 <xPortStartScheduler+0x134>)
 800673e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006740:	78fb      	ldrb	r3, [r7, #3]
 8006742:	b2db      	uxtb	r3, r3
 8006744:	005b      	lsls	r3, r3, #1
 8006746:	b2db      	uxtb	r3, r3
 8006748:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800674a:	78fb      	ldrb	r3, [r7, #3]
 800674c:	b2db      	uxtb	r3, r3
 800674e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006752:	2b80      	cmp	r3, #128	; 0x80
 8006754:	d0ef      	beq.n	8006736 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006756:	4b27      	ldr	r3, [pc, #156]	; (80067f4 <xPortStartScheduler+0x134>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f1c3 0307 	rsb	r3, r3, #7
 800675e:	2b04      	cmp	r3, #4
 8006760:	d00a      	beq.n	8006778 <xPortStartScheduler+0xb8>
	__asm volatile
 8006762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006766:	f383 8811 	msr	BASEPRI, r3
 800676a:	f3bf 8f6f 	isb	sy
 800676e:	f3bf 8f4f 	dsb	sy
 8006772:	60bb      	str	r3, [r7, #8]
}
 8006774:	bf00      	nop
 8006776:	e7fe      	b.n	8006776 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006778:	4b1e      	ldr	r3, [pc, #120]	; (80067f4 <xPortStartScheduler+0x134>)
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	021b      	lsls	r3, r3, #8
 800677e:	4a1d      	ldr	r2, [pc, #116]	; (80067f4 <xPortStartScheduler+0x134>)
 8006780:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006782:	4b1c      	ldr	r3, [pc, #112]	; (80067f4 <xPortStartScheduler+0x134>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800678a:	4a1a      	ldr	r2, [pc, #104]	; (80067f4 <xPortStartScheduler+0x134>)
 800678c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	b2da      	uxtb	r2, r3
 8006792:	697b      	ldr	r3, [r7, #20]
 8006794:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006796:	4b18      	ldr	r3, [pc, #96]	; (80067f8 <xPortStartScheduler+0x138>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4a17      	ldr	r2, [pc, #92]	; (80067f8 <xPortStartScheduler+0x138>)
 800679c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80067a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80067a2:	4b15      	ldr	r3, [pc, #84]	; (80067f8 <xPortStartScheduler+0x138>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	4a14      	ldr	r2, [pc, #80]	; (80067f8 <xPortStartScheduler+0x138>)
 80067a8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80067ac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80067ae:	f000 f8dd 	bl	800696c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80067b2:	4b12      	ldr	r3, [pc, #72]	; (80067fc <xPortStartScheduler+0x13c>)
 80067b4:	2200      	movs	r2, #0
 80067b6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80067b8:	f000 f8fc 	bl	80069b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80067bc:	4b10      	ldr	r3, [pc, #64]	; (8006800 <xPortStartScheduler+0x140>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	4a0f      	ldr	r2, [pc, #60]	; (8006800 <xPortStartScheduler+0x140>)
 80067c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80067c6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80067c8:	f7ff ff66 	bl	8006698 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80067cc:	f7ff f82c 	bl	8005828 <vTaskSwitchContext>
	prvTaskExitError();
 80067d0:	f7ff ff1e 	bl	8006610 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80067d4:	2300      	movs	r3, #0
}
 80067d6:	4618      	mov	r0, r3
 80067d8:	3718      	adds	r7, #24
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}
 80067de:	bf00      	nop
 80067e0:	e000ed00 	.word	0xe000ed00
 80067e4:	410fc271 	.word	0x410fc271
 80067e8:	410fc270 	.word	0x410fc270
 80067ec:	e000e400 	.word	0xe000e400
 80067f0:	20001ad4 	.word	0x20001ad4
 80067f4:	20001ad8 	.word	0x20001ad8
 80067f8:	e000ed20 	.word	0xe000ed20
 80067fc:	2000000c 	.word	0x2000000c
 8006800:	e000ef34 	.word	0xe000ef34

08006804 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006804:	b480      	push	{r7}
 8006806:	b083      	sub	sp, #12
 8006808:	af00      	add	r7, sp, #0
	__asm volatile
 800680a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800680e:	f383 8811 	msr	BASEPRI, r3
 8006812:	f3bf 8f6f 	isb	sy
 8006816:	f3bf 8f4f 	dsb	sy
 800681a:	607b      	str	r3, [r7, #4]
}
 800681c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800681e:	4b0f      	ldr	r3, [pc, #60]	; (800685c <vPortEnterCritical+0x58>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	3301      	adds	r3, #1
 8006824:	4a0d      	ldr	r2, [pc, #52]	; (800685c <vPortEnterCritical+0x58>)
 8006826:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006828:	4b0c      	ldr	r3, [pc, #48]	; (800685c <vPortEnterCritical+0x58>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	2b01      	cmp	r3, #1
 800682e:	d10f      	bne.n	8006850 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006830:	4b0b      	ldr	r3, [pc, #44]	; (8006860 <vPortEnterCritical+0x5c>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	b2db      	uxtb	r3, r3
 8006836:	2b00      	cmp	r3, #0
 8006838:	d00a      	beq.n	8006850 <vPortEnterCritical+0x4c>
	__asm volatile
 800683a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800683e:	f383 8811 	msr	BASEPRI, r3
 8006842:	f3bf 8f6f 	isb	sy
 8006846:	f3bf 8f4f 	dsb	sy
 800684a:	603b      	str	r3, [r7, #0]
}
 800684c:	bf00      	nop
 800684e:	e7fe      	b.n	800684e <vPortEnterCritical+0x4a>
	}
}
 8006850:	bf00      	nop
 8006852:	370c      	adds	r7, #12
 8006854:	46bd      	mov	sp, r7
 8006856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685a:	4770      	bx	lr
 800685c:	2000000c 	.word	0x2000000c
 8006860:	e000ed04 	.word	0xe000ed04

08006864 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006864:	b480      	push	{r7}
 8006866:	b083      	sub	sp, #12
 8006868:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800686a:	4b12      	ldr	r3, [pc, #72]	; (80068b4 <vPortExitCritical+0x50>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d10a      	bne.n	8006888 <vPortExitCritical+0x24>
	__asm volatile
 8006872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006876:	f383 8811 	msr	BASEPRI, r3
 800687a:	f3bf 8f6f 	isb	sy
 800687e:	f3bf 8f4f 	dsb	sy
 8006882:	607b      	str	r3, [r7, #4]
}
 8006884:	bf00      	nop
 8006886:	e7fe      	b.n	8006886 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006888:	4b0a      	ldr	r3, [pc, #40]	; (80068b4 <vPortExitCritical+0x50>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	3b01      	subs	r3, #1
 800688e:	4a09      	ldr	r2, [pc, #36]	; (80068b4 <vPortExitCritical+0x50>)
 8006890:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006892:	4b08      	ldr	r3, [pc, #32]	; (80068b4 <vPortExitCritical+0x50>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d105      	bne.n	80068a6 <vPortExitCritical+0x42>
 800689a:	2300      	movs	r3, #0
 800689c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	f383 8811 	msr	BASEPRI, r3
}
 80068a4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80068a6:	bf00      	nop
 80068a8:	370c      	adds	r7, #12
 80068aa:	46bd      	mov	sp, r7
 80068ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b0:	4770      	bx	lr
 80068b2:	bf00      	nop
 80068b4:	2000000c 	.word	0x2000000c
	...

080068c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80068c0:	f3ef 8009 	mrs	r0, PSP
 80068c4:	f3bf 8f6f 	isb	sy
 80068c8:	4b15      	ldr	r3, [pc, #84]	; (8006920 <pxCurrentTCBConst>)
 80068ca:	681a      	ldr	r2, [r3, #0]
 80068cc:	f01e 0f10 	tst.w	lr, #16
 80068d0:	bf08      	it	eq
 80068d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80068d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068da:	6010      	str	r0, [r2, #0]
 80068dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80068e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80068e4:	f380 8811 	msr	BASEPRI, r0
 80068e8:	f3bf 8f4f 	dsb	sy
 80068ec:	f3bf 8f6f 	isb	sy
 80068f0:	f7fe ff9a 	bl	8005828 <vTaskSwitchContext>
 80068f4:	f04f 0000 	mov.w	r0, #0
 80068f8:	f380 8811 	msr	BASEPRI, r0
 80068fc:	bc09      	pop	{r0, r3}
 80068fe:	6819      	ldr	r1, [r3, #0]
 8006900:	6808      	ldr	r0, [r1, #0]
 8006902:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006906:	f01e 0f10 	tst.w	lr, #16
 800690a:	bf08      	it	eq
 800690c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006910:	f380 8809 	msr	PSP, r0
 8006914:	f3bf 8f6f 	isb	sy
 8006918:	4770      	bx	lr
 800691a:	bf00      	nop
 800691c:	f3af 8000 	nop.w

08006920 <pxCurrentTCBConst>:
 8006920:	200014a0 	.word	0x200014a0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006924:	bf00      	nop
 8006926:	bf00      	nop

08006928 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b082      	sub	sp, #8
 800692c:	af00      	add	r7, sp, #0
	__asm volatile
 800692e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006932:	f383 8811 	msr	BASEPRI, r3
 8006936:	f3bf 8f6f 	isb	sy
 800693a:	f3bf 8f4f 	dsb	sy
 800693e:	607b      	str	r3, [r7, #4]
}
 8006940:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006942:	f7fe feb7 	bl	80056b4 <xTaskIncrementTick>
 8006946:	4603      	mov	r3, r0
 8006948:	2b00      	cmp	r3, #0
 800694a:	d003      	beq.n	8006954 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800694c:	4b06      	ldr	r3, [pc, #24]	; (8006968 <xPortSysTickHandler+0x40>)
 800694e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006952:	601a      	str	r2, [r3, #0]
 8006954:	2300      	movs	r3, #0
 8006956:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	f383 8811 	msr	BASEPRI, r3
}
 800695e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006960:	bf00      	nop
 8006962:	3708      	adds	r7, #8
 8006964:	46bd      	mov	sp, r7
 8006966:	bd80      	pop	{r7, pc}
 8006968:	e000ed04 	.word	0xe000ed04

0800696c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800696c:	b480      	push	{r7}
 800696e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006970:	4b0b      	ldr	r3, [pc, #44]	; (80069a0 <vPortSetupTimerInterrupt+0x34>)
 8006972:	2200      	movs	r2, #0
 8006974:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006976:	4b0b      	ldr	r3, [pc, #44]	; (80069a4 <vPortSetupTimerInterrupt+0x38>)
 8006978:	2200      	movs	r2, #0
 800697a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800697c:	4b0a      	ldr	r3, [pc, #40]	; (80069a8 <vPortSetupTimerInterrupt+0x3c>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4a0a      	ldr	r2, [pc, #40]	; (80069ac <vPortSetupTimerInterrupt+0x40>)
 8006982:	fba2 2303 	umull	r2, r3, r2, r3
 8006986:	099b      	lsrs	r3, r3, #6
 8006988:	4a09      	ldr	r2, [pc, #36]	; (80069b0 <vPortSetupTimerInterrupt+0x44>)
 800698a:	3b01      	subs	r3, #1
 800698c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800698e:	4b04      	ldr	r3, [pc, #16]	; (80069a0 <vPortSetupTimerInterrupt+0x34>)
 8006990:	2207      	movs	r2, #7
 8006992:	601a      	str	r2, [r3, #0]
}
 8006994:	bf00      	nop
 8006996:	46bd      	mov	sp, r7
 8006998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699c:	4770      	bx	lr
 800699e:	bf00      	nop
 80069a0:	e000e010 	.word	0xe000e010
 80069a4:	e000e018 	.word	0xe000e018
 80069a8:	20000000 	.word	0x20000000
 80069ac:	10624dd3 	.word	0x10624dd3
 80069b0:	e000e014 	.word	0xe000e014

080069b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80069b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80069c4 <vPortEnableVFP+0x10>
 80069b8:	6801      	ldr	r1, [r0, #0]
 80069ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80069be:	6001      	str	r1, [r0, #0]
 80069c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80069c2:	bf00      	nop
 80069c4:	e000ed88 	.word	0xe000ed88

080069c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80069c8:	b480      	push	{r7}
 80069ca:	b085      	sub	sp, #20
 80069cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80069ce:	f3ef 8305 	mrs	r3, IPSR
 80069d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	2b0f      	cmp	r3, #15
 80069d8:	d914      	bls.n	8006a04 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80069da:	4a17      	ldr	r2, [pc, #92]	; (8006a38 <vPortValidateInterruptPriority+0x70>)
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	4413      	add	r3, r2
 80069e0:	781b      	ldrb	r3, [r3, #0]
 80069e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80069e4:	4b15      	ldr	r3, [pc, #84]	; (8006a3c <vPortValidateInterruptPriority+0x74>)
 80069e6:	781b      	ldrb	r3, [r3, #0]
 80069e8:	7afa      	ldrb	r2, [r7, #11]
 80069ea:	429a      	cmp	r2, r3
 80069ec:	d20a      	bcs.n	8006a04 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80069ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069f2:	f383 8811 	msr	BASEPRI, r3
 80069f6:	f3bf 8f6f 	isb	sy
 80069fa:	f3bf 8f4f 	dsb	sy
 80069fe:	607b      	str	r3, [r7, #4]
}
 8006a00:	bf00      	nop
 8006a02:	e7fe      	b.n	8006a02 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006a04:	4b0e      	ldr	r3, [pc, #56]	; (8006a40 <vPortValidateInterruptPriority+0x78>)
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006a0c:	4b0d      	ldr	r3, [pc, #52]	; (8006a44 <vPortValidateInterruptPriority+0x7c>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	429a      	cmp	r2, r3
 8006a12:	d90a      	bls.n	8006a2a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a18:	f383 8811 	msr	BASEPRI, r3
 8006a1c:	f3bf 8f6f 	isb	sy
 8006a20:	f3bf 8f4f 	dsb	sy
 8006a24:	603b      	str	r3, [r7, #0]
}
 8006a26:	bf00      	nop
 8006a28:	e7fe      	b.n	8006a28 <vPortValidateInterruptPriority+0x60>
	}
 8006a2a:	bf00      	nop
 8006a2c:	3714      	adds	r7, #20
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a34:	4770      	bx	lr
 8006a36:	bf00      	nop
 8006a38:	e000e3f0 	.word	0xe000e3f0
 8006a3c:	20001ad4 	.word	0x20001ad4
 8006a40:	e000ed0c 	.word	0xe000ed0c
 8006a44:	20001ad8 	.word	0x20001ad8

08006a48 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b08a      	sub	sp, #40	; 0x28
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006a50:	2300      	movs	r3, #0
 8006a52:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006a54:	f7fe fd72 	bl	800553c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006a58:	4b5b      	ldr	r3, [pc, #364]	; (8006bc8 <pvPortMalloc+0x180>)
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d101      	bne.n	8006a64 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006a60:	f000 f920 	bl	8006ca4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006a64:	4b59      	ldr	r3, [pc, #356]	; (8006bcc <pvPortMalloc+0x184>)
 8006a66:	681a      	ldr	r2, [r3, #0]
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	4013      	ands	r3, r2
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	f040 8093 	bne.w	8006b98 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d01d      	beq.n	8006ab4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006a78:	2208      	movs	r2, #8
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	4413      	add	r3, r2
 8006a7e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	f003 0307 	and.w	r3, r3, #7
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d014      	beq.n	8006ab4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	f023 0307 	bic.w	r3, r3, #7
 8006a90:	3308      	adds	r3, #8
 8006a92:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	f003 0307 	and.w	r3, r3, #7
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d00a      	beq.n	8006ab4 <pvPortMalloc+0x6c>
	__asm volatile
 8006a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aa2:	f383 8811 	msr	BASEPRI, r3
 8006aa6:	f3bf 8f6f 	isb	sy
 8006aaa:	f3bf 8f4f 	dsb	sy
 8006aae:	617b      	str	r3, [r7, #20]
}
 8006ab0:	bf00      	nop
 8006ab2:	e7fe      	b.n	8006ab2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d06e      	beq.n	8006b98 <pvPortMalloc+0x150>
 8006aba:	4b45      	ldr	r3, [pc, #276]	; (8006bd0 <pvPortMalloc+0x188>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	687a      	ldr	r2, [r7, #4]
 8006ac0:	429a      	cmp	r2, r3
 8006ac2:	d869      	bhi.n	8006b98 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006ac4:	4b43      	ldr	r3, [pc, #268]	; (8006bd4 <pvPortMalloc+0x18c>)
 8006ac6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006ac8:	4b42      	ldr	r3, [pc, #264]	; (8006bd4 <pvPortMalloc+0x18c>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006ace:	e004      	b.n	8006ada <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006adc:	685b      	ldr	r3, [r3, #4]
 8006ade:	687a      	ldr	r2, [r7, #4]
 8006ae0:	429a      	cmp	r2, r3
 8006ae2:	d903      	bls.n	8006aec <pvPortMalloc+0xa4>
 8006ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d1f1      	bne.n	8006ad0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006aec:	4b36      	ldr	r3, [pc, #216]	; (8006bc8 <pvPortMalloc+0x180>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006af2:	429a      	cmp	r2, r3
 8006af4:	d050      	beq.n	8006b98 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006af6:	6a3b      	ldr	r3, [r7, #32]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	2208      	movs	r2, #8
 8006afc:	4413      	add	r3, r2
 8006afe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b02:	681a      	ldr	r2, [r3, #0]
 8006b04:	6a3b      	ldr	r3, [r7, #32]
 8006b06:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b0a:	685a      	ldr	r2, [r3, #4]
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	1ad2      	subs	r2, r2, r3
 8006b10:	2308      	movs	r3, #8
 8006b12:	005b      	lsls	r3, r3, #1
 8006b14:	429a      	cmp	r2, r3
 8006b16:	d91f      	bls.n	8006b58 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006b18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	4413      	add	r3, r2
 8006b1e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006b20:	69bb      	ldr	r3, [r7, #24]
 8006b22:	f003 0307 	and.w	r3, r3, #7
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d00a      	beq.n	8006b40 <pvPortMalloc+0xf8>
	__asm volatile
 8006b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b2e:	f383 8811 	msr	BASEPRI, r3
 8006b32:	f3bf 8f6f 	isb	sy
 8006b36:	f3bf 8f4f 	dsb	sy
 8006b3a:	613b      	str	r3, [r7, #16]
}
 8006b3c:	bf00      	nop
 8006b3e:	e7fe      	b.n	8006b3e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b42:	685a      	ldr	r2, [r3, #4]
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	1ad2      	subs	r2, r2, r3
 8006b48:	69bb      	ldr	r3, [r7, #24]
 8006b4a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b4e:	687a      	ldr	r2, [r7, #4]
 8006b50:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006b52:	69b8      	ldr	r0, [r7, #24]
 8006b54:	f000 f908 	bl	8006d68 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006b58:	4b1d      	ldr	r3, [pc, #116]	; (8006bd0 <pvPortMalloc+0x188>)
 8006b5a:	681a      	ldr	r2, [r3, #0]
 8006b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b5e:	685b      	ldr	r3, [r3, #4]
 8006b60:	1ad3      	subs	r3, r2, r3
 8006b62:	4a1b      	ldr	r2, [pc, #108]	; (8006bd0 <pvPortMalloc+0x188>)
 8006b64:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006b66:	4b1a      	ldr	r3, [pc, #104]	; (8006bd0 <pvPortMalloc+0x188>)
 8006b68:	681a      	ldr	r2, [r3, #0]
 8006b6a:	4b1b      	ldr	r3, [pc, #108]	; (8006bd8 <pvPortMalloc+0x190>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	429a      	cmp	r2, r3
 8006b70:	d203      	bcs.n	8006b7a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006b72:	4b17      	ldr	r3, [pc, #92]	; (8006bd0 <pvPortMalloc+0x188>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	4a18      	ldr	r2, [pc, #96]	; (8006bd8 <pvPortMalloc+0x190>)
 8006b78:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b7c:	685a      	ldr	r2, [r3, #4]
 8006b7e:	4b13      	ldr	r3, [pc, #76]	; (8006bcc <pvPortMalloc+0x184>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	431a      	orrs	r2, r3
 8006b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b86:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006b8e:	4b13      	ldr	r3, [pc, #76]	; (8006bdc <pvPortMalloc+0x194>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	3301      	adds	r3, #1
 8006b94:	4a11      	ldr	r2, [pc, #68]	; (8006bdc <pvPortMalloc+0x194>)
 8006b96:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006b98:	f7fe fcde 	bl	8005558 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006b9c:	69fb      	ldr	r3, [r7, #28]
 8006b9e:	f003 0307 	and.w	r3, r3, #7
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d00a      	beq.n	8006bbc <pvPortMalloc+0x174>
	__asm volatile
 8006ba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006baa:	f383 8811 	msr	BASEPRI, r3
 8006bae:	f3bf 8f6f 	isb	sy
 8006bb2:	f3bf 8f4f 	dsb	sy
 8006bb6:	60fb      	str	r3, [r7, #12]
}
 8006bb8:	bf00      	nop
 8006bba:	e7fe      	b.n	8006bba <pvPortMalloc+0x172>
	return pvReturn;
 8006bbc:	69fb      	ldr	r3, [r7, #28]
}
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	3728      	adds	r7, #40	; 0x28
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd80      	pop	{r7, pc}
 8006bc6:	bf00      	nop
 8006bc8:	200056e4 	.word	0x200056e4
 8006bcc:	200056f8 	.word	0x200056f8
 8006bd0:	200056e8 	.word	0x200056e8
 8006bd4:	200056dc 	.word	0x200056dc
 8006bd8:	200056ec 	.word	0x200056ec
 8006bdc:	200056f0 	.word	0x200056f0

08006be0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b086      	sub	sp, #24
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d04d      	beq.n	8006c8e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006bf2:	2308      	movs	r3, #8
 8006bf4:	425b      	negs	r3, r3
 8006bf6:	697a      	ldr	r2, [r7, #20]
 8006bf8:	4413      	add	r3, r2
 8006bfa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006bfc:	697b      	ldr	r3, [r7, #20]
 8006bfe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006c00:	693b      	ldr	r3, [r7, #16]
 8006c02:	685a      	ldr	r2, [r3, #4]
 8006c04:	4b24      	ldr	r3, [pc, #144]	; (8006c98 <vPortFree+0xb8>)
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	4013      	ands	r3, r2
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d10a      	bne.n	8006c24 <vPortFree+0x44>
	__asm volatile
 8006c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c12:	f383 8811 	msr	BASEPRI, r3
 8006c16:	f3bf 8f6f 	isb	sy
 8006c1a:	f3bf 8f4f 	dsb	sy
 8006c1e:	60fb      	str	r3, [r7, #12]
}
 8006c20:	bf00      	nop
 8006c22:	e7fe      	b.n	8006c22 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006c24:	693b      	ldr	r3, [r7, #16]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d00a      	beq.n	8006c42 <vPortFree+0x62>
	__asm volatile
 8006c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c30:	f383 8811 	msr	BASEPRI, r3
 8006c34:	f3bf 8f6f 	isb	sy
 8006c38:	f3bf 8f4f 	dsb	sy
 8006c3c:	60bb      	str	r3, [r7, #8]
}
 8006c3e:	bf00      	nop
 8006c40:	e7fe      	b.n	8006c40 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006c42:	693b      	ldr	r3, [r7, #16]
 8006c44:	685a      	ldr	r2, [r3, #4]
 8006c46:	4b14      	ldr	r3, [pc, #80]	; (8006c98 <vPortFree+0xb8>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4013      	ands	r3, r2
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d01e      	beq.n	8006c8e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006c50:	693b      	ldr	r3, [r7, #16]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d11a      	bne.n	8006c8e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006c58:	693b      	ldr	r3, [r7, #16]
 8006c5a:	685a      	ldr	r2, [r3, #4]
 8006c5c:	4b0e      	ldr	r3, [pc, #56]	; (8006c98 <vPortFree+0xb8>)
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	43db      	mvns	r3, r3
 8006c62:	401a      	ands	r2, r3
 8006c64:	693b      	ldr	r3, [r7, #16]
 8006c66:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006c68:	f7fe fc68 	bl	800553c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006c6c:	693b      	ldr	r3, [r7, #16]
 8006c6e:	685a      	ldr	r2, [r3, #4]
 8006c70:	4b0a      	ldr	r3, [pc, #40]	; (8006c9c <vPortFree+0xbc>)
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	4413      	add	r3, r2
 8006c76:	4a09      	ldr	r2, [pc, #36]	; (8006c9c <vPortFree+0xbc>)
 8006c78:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006c7a:	6938      	ldr	r0, [r7, #16]
 8006c7c:	f000 f874 	bl	8006d68 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006c80:	4b07      	ldr	r3, [pc, #28]	; (8006ca0 <vPortFree+0xc0>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	3301      	adds	r3, #1
 8006c86:	4a06      	ldr	r2, [pc, #24]	; (8006ca0 <vPortFree+0xc0>)
 8006c88:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006c8a:	f7fe fc65 	bl	8005558 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006c8e:	bf00      	nop
 8006c90:	3718      	adds	r7, #24
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bd80      	pop	{r7, pc}
 8006c96:	bf00      	nop
 8006c98:	200056f8 	.word	0x200056f8
 8006c9c:	200056e8 	.word	0x200056e8
 8006ca0:	200056f4 	.word	0x200056f4

08006ca4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	b085      	sub	sp, #20
 8006ca8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006caa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006cae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006cb0:	4b27      	ldr	r3, [pc, #156]	; (8006d50 <prvHeapInit+0xac>)
 8006cb2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	f003 0307 	and.w	r3, r3, #7
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d00c      	beq.n	8006cd8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	3307      	adds	r3, #7
 8006cc2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	f023 0307 	bic.w	r3, r3, #7
 8006cca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006ccc:	68ba      	ldr	r2, [r7, #8]
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	1ad3      	subs	r3, r2, r3
 8006cd2:	4a1f      	ldr	r2, [pc, #124]	; (8006d50 <prvHeapInit+0xac>)
 8006cd4:	4413      	add	r3, r2
 8006cd6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006cdc:	4a1d      	ldr	r2, [pc, #116]	; (8006d54 <prvHeapInit+0xb0>)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006ce2:	4b1c      	ldr	r3, [pc, #112]	; (8006d54 <prvHeapInit+0xb0>)
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	68ba      	ldr	r2, [r7, #8]
 8006cec:	4413      	add	r3, r2
 8006cee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006cf0:	2208      	movs	r2, #8
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	1a9b      	subs	r3, r3, r2
 8006cf6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	f023 0307 	bic.w	r3, r3, #7
 8006cfe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	4a15      	ldr	r2, [pc, #84]	; (8006d58 <prvHeapInit+0xb4>)
 8006d04:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006d06:	4b14      	ldr	r3, [pc, #80]	; (8006d58 <prvHeapInit+0xb4>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006d0e:	4b12      	ldr	r3, [pc, #72]	; (8006d58 <prvHeapInit+0xb4>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	2200      	movs	r2, #0
 8006d14:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	68fa      	ldr	r2, [r7, #12]
 8006d1e:	1ad2      	subs	r2, r2, r3
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006d24:	4b0c      	ldr	r3, [pc, #48]	; (8006d58 <prvHeapInit+0xb4>)
 8006d26:	681a      	ldr	r2, [r3, #0]
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	685b      	ldr	r3, [r3, #4]
 8006d30:	4a0a      	ldr	r2, [pc, #40]	; (8006d5c <prvHeapInit+0xb8>)
 8006d32:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	685b      	ldr	r3, [r3, #4]
 8006d38:	4a09      	ldr	r2, [pc, #36]	; (8006d60 <prvHeapInit+0xbc>)
 8006d3a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006d3c:	4b09      	ldr	r3, [pc, #36]	; (8006d64 <prvHeapInit+0xc0>)
 8006d3e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006d42:	601a      	str	r2, [r3, #0]
}
 8006d44:	bf00      	nop
 8006d46:	3714      	adds	r7, #20
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4e:	4770      	bx	lr
 8006d50:	20001adc 	.word	0x20001adc
 8006d54:	200056dc 	.word	0x200056dc
 8006d58:	200056e4 	.word	0x200056e4
 8006d5c:	200056ec 	.word	0x200056ec
 8006d60:	200056e8 	.word	0x200056e8
 8006d64:	200056f8 	.word	0x200056f8

08006d68 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006d68:	b480      	push	{r7}
 8006d6a:	b085      	sub	sp, #20
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006d70:	4b28      	ldr	r3, [pc, #160]	; (8006e14 <prvInsertBlockIntoFreeList+0xac>)
 8006d72:	60fb      	str	r3, [r7, #12]
 8006d74:	e002      	b.n	8006d7c <prvInsertBlockIntoFreeList+0x14>
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	60fb      	str	r3, [r7, #12]
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	687a      	ldr	r2, [r7, #4]
 8006d82:	429a      	cmp	r2, r3
 8006d84:	d8f7      	bhi.n	8006d76 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	685b      	ldr	r3, [r3, #4]
 8006d8e:	68ba      	ldr	r2, [r7, #8]
 8006d90:	4413      	add	r3, r2
 8006d92:	687a      	ldr	r2, [r7, #4]
 8006d94:	429a      	cmp	r2, r3
 8006d96:	d108      	bne.n	8006daa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	685a      	ldr	r2, [r3, #4]
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	685b      	ldr	r3, [r3, #4]
 8006da0:	441a      	add	r2, r3
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	685b      	ldr	r3, [r3, #4]
 8006db2:	68ba      	ldr	r2, [r7, #8]
 8006db4:	441a      	add	r2, r3
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	429a      	cmp	r2, r3
 8006dbc:	d118      	bne.n	8006df0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681a      	ldr	r2, [r3, #0]
 8006dc2:	4b15      	ldr	r3, [pc, #84]	; (8006e18 <prvInsertBlockIntoFreeList+0xb0>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	429a      	cmp	r2, r3
 8006dc8:	d00d      	beq.n	8006de6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	685a      	ldr	r2, [r3, #4]
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	685b      	ldr	r3, [r3, #4]
 8006dd4:	441a      	add	r2, r3
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	681a      	ldr	r2, [r3, #0]
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	601a      	str	r2, [r3, #0]
 8006de4:	e008      	b.n	8006df8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006de6:	4b0c      	ldr	r3, [pc, #48]	; (8006e18 <prvInsertBlockIntoFreeList+0xb0>)
 8006de8:	681a      	ldr	r2, [r3, #0]
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	601a      	str	r2, [r3, #0]
 8006dee:	e003      	b.n	8006df8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681a      	ldr	r2, [r3, #0]
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006df8:	68fa      	ldr	r2, [r7, #12]
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	429a      	cmp	r2, r3
 8006dfe:	d002      	beq.n	8006e06 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	687a      	ldr	r2, [r7, #4]
 8006e04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006e06:	bf00      	nop
 8006e08:	3714      	adds	r7, #20
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e10:	4770      	bx	lr
 8006e12:	bf00      	nop
 8006e14:	200056dc 	.word	0x200056dc
 8006e18:	200056e4 	.word	0x200056e4

08006e1c <memset>:
 8006e1c:	4402      	add	r2, r0
 8006e1e:	4603      	mov	r3, r0
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d100      	bne.n	8006e26 <memset+0xa>
 8006e24:	4770      	bx	lr
 8006e26:	f803 1b01 	strb.w	r1, [r3], #1
 8006e2a:	e7f9      	b.n	8006e20 <memset+0x4>

08006e2c <_reclaim_reent>:
 8006e2c:	4b29      	ldr	r3, [pc, #164]	; (8006ed4 <_reclaim_reent+0xa8>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4283      	cmp	r3, r0
 8006e32:	b570      	push	{r4, r5, r6, lr}
 8006e34:	4604      	mov	r4, r0
 8006e36:	d04b      	beq.n	8006ed0 <_reclaim_reent+0xa4>
 8006e38:	69c3      	ldr	r3, [r0, #28]
 8006e3a:	b143      	cbz	r3, 8006e4e <_reclaim_reent+0x22>
 8006e3c:	68db      	ldr	r3, [r3, #12]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d144      	bne.n	8006ecc <_reclaim_reent+0xa0>
 8006e42:	69e3      	ldr	r3, [r4, #28]
 8006e44:	6819      	ldr	r1, [r3, #0]
 8006e46:	b111      	cbz	r1, 8006e4e <_reclaim_reent+0x22>
 8006e48:	4620      	mov	r0, r4
 8006e4a:	f000 f879 	bl	8006f40 <_free_r>
 8006e4e:	6961      	ldr	r1, [r4, #20]
 8006e50:	b111      	cbz	r1, 8006e58 <_reclaim_reent+0x2c>
 8006e52:	4620      	mov	r0, r4
 8006e54:	f000 f874 	bl	8006f40 <_free_r>
 8006e58:	69e1      	ldr	r1, [r4, #28]
 8006e5a:	b111      	cbz	r1, 8006e62 <_reclaim_reent+0x36>
 8006e5c:	4620      	mov	r0, r4
 8006e5e:	f000 f86f 	bl	8006f40 <_free_r>
 8006e62:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006e64:	b111      	cbz	r1, 8006e6c <_reclaim_reent+0x40>
 8006e66:	4620      	mov	r0, r4
 8006e68:	f000 f86a 	bl	8006f40 <_free_r>
 8006e6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006e6e:	b111      	cbz	r1, 8006e76 <_reclaim_reent+0x4a>
 8006e70:	4620      	mov	r0, r4
 8006e72:	f000 f865 	bl	8006f40 <_free_r>
 8006e76:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006e78:	b111      	cbz	r1, 8006e80 <_reclaim_reent+0x54>
 8006e7a:	4620      	mov	r0, r4
 8006e7c:	f000 f860 	bl	8006f40 <_free_r>
 8006e80:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006e82:	b111      	cbz	r1, 8006e8a <_reclaim_reent+0x5e>
 8006e84:	4620      	mov	r0, r4
 8006e86:	f000 f85b 	bl	8006f40 <_free_r>
 8006e8a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8006e8c:	b111      	cbz	r1, 8006e94 <_reclaim_reent+0x68>
 8006e8e:	4620      	mov	r0, r4
 8006e90:	f000 f856 	bl	8006f40 <_free_r>
 8006e94:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006e96:	b111      	cbz	r1, 8006e9e <_reclaim_reent+0x72>
 8006e98:	4620      	mov	r0, r4
 8006e9a:	f000 f851 	bl	8006f40 <_free_r>
 8006e9e:	6a23      	ldr	r3, [r4, #32]
 8006ea0:	b1b3      	cbz	r3, 8006ed0 <_reclaim_reent+0xa4>
 8006ea2:	4620      	mov	r0, r4
 8006ea4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006ea8:	4718      	bx	r3
 8006eaa:	5949      	ldr	r1, [r1, r5]
 8006eac:	b941      	cbnz	r1, 8006ec0 <_reclaim_reent+0x94>
 8006eae:	3504      	adds	r5, #4
 8006eb0:	69e3      	ldr	r3, [r4, #28]
 8006eb2:	2d80      	cmp	r5, #128	; 0x80
 8006eb4:	68d9      	ldr	r1, [r3, #12]
 8006eb6:	d1f8      	bne.n	8006eaa <_reclaim_reent+0x7e>
 8006eb8:	4620      	mov	r0, r4
 8006eba:	f000 f841 	bl	8006f40 <_free_r>
 8006ebe:	e7c0      	b.n	8006e42 <_reclaim_reent+0x16>
 8006ec0:	680e      	ldr	r6, [r1, #0]
 8006ec2:	4620      	mov	r0, r4
 8006ec4:	f000 f83c 	bl	8006f40 <_free_r>
 8006ec8:	4631      	mov	r1, r6
 8006eca:	e7ef      	b.n	8006eac <_reclaim_reent+0x80>
 8006ecc:	2500      	movs	r5, #0
 8006ece:	e7ef      	b.n	8006eb0 <_reclaim_reent+0x84>
 8006ed0:	bd70      	pop	{r4, r5, r6, pc}
 8006ed2:	bf00      	nop
 8006ed4:	2000005c 	.word	0x2000005c

08006ed8 <__libc_init_array>:
 8006ed8:	b570      	push	{r4, r5, r6, lr}
 8006eda:	4d0d      	ldr	r5, [pc, #52]	; (8006f10 <__libc_init_array+0x38>)
 8006edc:	4c0d      	ldr	r4, [pc, #52]	; (8006f14 <__libc_init_array+0x3c>)
 8006ede:	1b64      	subs	r4, r4, r5
 8006ee0:	10a4      	asrs	r4, r4, #2
 8006ee2:	2600      	movs	r6, #0
 8006ee4:	42a6      	cmp	r6, r4
 8006ee6:	d109      	bne.n	8006efc <__libc_init_array+0x24>
 8006ee8:	4d0b      	ldr	r5, [pc, #44]	; (8006f18 <__libc_init_array+0x40>)
 8006eea:	4c0c      	ldr	r4, [pc, #48]	; (8006f1c <__libc_init_array+0x44>)
 8006eec:	f000 f880 	bl	8006ff0 <_init>
 8006ef0:	1b64      	subs	r4, r4, r5
 8006ef2:	10a4      	asrs	r4, r4, #2
 8006ef4:	2600      	movs	r6, #0
 8006ef6:	42a6      	cmp	r6, r4
 8006ef8:	d105      	bne.n	8006f06 <__libc_init_array+0x2e>
 8006efa:	bd70      	pop	{r4, r5, r6, pc}
 8006efc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f00:	4798      	blx	r3
 8006f02:	3601      	adds	r6, #1
 8006f04:	e7ee      	b.n	8006ee4 <__libc_init_array+0xc>
 8006f06:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f0a:	4798      	blx	r3
 8006f0c:	3601      	adds	r6, #1
 8006f0e:	e7f2      	b.n	8006ef6 <__libc_init_array+0x1e>
 8006f10:	080070dc 	.word	0x080070dc
 8006f14:	080070dc 	.word	0x080070dc
 8006f18:	080070dc 	.word	0x080070dc
 8006f1c:	080070e0 	.word	0x080070e0

08006f20 <__retarget_lock_acquire_recursive>:
 8006f20:	4770      	bx	lr

08006f22 <__retarget_lock_release_recursive>:
 8006f22:	4770      	bx	lr

08006f24 <memcpy>:
 8006f24:	440a      	add	r2, r1
 8006f26:	4291      	cmp	r1, r2
 8006f28:	f100 33ff 	add.w	r3, r0, #4294967295
 8006f2c:	d100      	bne.n	8006f30 <memcpy+0xc>
 8006f2e:	4770      	bx	lr
 8006f30:	b510      	push	{r4, lr}
 8006f32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f36:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f3a:	4291      	cmp	r1, r2
 8006f3c:	d1f9      	bne.n	8006f32 <memcpy+0xe>
 8006f3e:	bd10      	pop	{r4, pc}

08006f40 <_free_r>:
 8006f40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006f42:	2900      	cmp	r1, #0
 8006f44:	d044      	beq.n	8006fd0 <_free_r+0x90>
 8006f46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f4a:	9001      	str	r0, [sp, #4]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	f1a1 0404 	sub.w	r4, r1, #4
 8006f52:	bfb8      	it	lt
 8006f54:	18e4      	addlt	r4, r4, r3
 8006f56:	f000 f83f 	bl	8006fd8 <__malloc_lock>
 8006f5a:	4a1e      	ldr	r2, [pc, #120]	; (8006fd4 <_free_r+0x94>)
 8006f5c:	9801      	ldr	r0, [sp, #4]
 8006f5e:	6813      	ldr	r3, [r2, #0]
 8006f60:	b933      	cbnz	r3, 8006f70 <_free_r+0x30>
 8006f62:	6063      	str	r3, [r4, #4]
 8006f64:	6014      	str	r4, [r2, #0]
 8006f66:	b003      	add	sp, #12
 8006f68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006f6c:	f000 b83a 	b.w	8006fe4 <__malloc_unlock>
 8006f70:	42a3      	cmp	r3, r4
 8006f72:	d908      	bls.n	8006f86 <_free_r+0x46>
 8006f74:	6825      	ldr	r5, [r4, #0]
 8006f76:	1961      	adds	r1, r4, r5
 8006f78:	428b      	cmp	r3, r1
 8006f7a:	bf01      	itttt	eq
 8006f7c:	6819      	ldreq	r1, [r3, #0]
 8006f7e:	685b      	ldreq	r3, [r3, #4]
 8006f80:	1949      	addeq	r1, r1, r5
 8006f82:	6021      	streq	r1, [r4, #0]
 8006f84:	e7ed      	b.n	8006f62 <_free_r+0x22>
 8006f86:	461a      	mov	r2, r3
 8006f88:	685b      	ldr	r3, [r3, #4]
 8006f8a:	b10b      	cbz	r3, 8006f90 <_free_r+0x50>
 8006f8c:	42a3      	cmp	r3, r4
 8006f8e:	d9fa      	bls.n	8006f86 <_free_r+0x46>
 8006f90:	6811      	ldr	r1, [r2, #0]
 8006f92:	1855      	adds	r5, r2, r1
 8006f94:	42a5      	cmp	r5, r4
 8006f96:	d10b      	bne.n	8006fb0 <_free_r+0x70>
 8006f98:	6824      	ldr	r4, [r4, #0]
 8006f9a:	4421      	add	r1, r4
 8006f9c:	1854      	adds	r4, r2, r1
 8006f9e:	42a3      	cmp	r3, r4
 8006fa0:	6011      	str	r1, [r2, #0]
 8006fa2:	d1e0      	bne.n	8006f66 <_free_r+0x26>
 8006fa4:	681c      	ldr	r4, [r3, #0]
 8006fa6:	685b      	ldr	r3, [r3, #4]
 8006fa8:	6053      	str	r3, [r2, #4]
 8006faa:	440c      	add	r4, r1
 8006fac:	6014      	str	r4, [r2, #0]
 8006fae:	e7da      	b.n	8006f66 <_free_r+0x26>
 8006fb0:	d902      	bls.n	8006fb8 <_free_r+0x78>
 8006fb2:	230c      	movs	r3, #12
 8006fb4:	6003      	str	r3, [r0, #0]
 8006fb6:	e7d6      	b.n	8006f66 <_free_r+0x26>
 8006fb8:	6825      	ldr	r5, [r4, #0]
 8006fba:	1961      	adds	r1, r4, r5
 8006fbc:	428b      	cmp	r3, r1
 8006fbe:	bf04      	itt	eq
 8006fc0:	6819      	ldreq	r1, [r3, #0]
 8006fc2:	685b      	ldreq	r3, [r3, #4]
 8006fc4:	6063      	str	r3, [r4, #4]
 8006fc6:	bf04      	itt	eq
 8006fc8:	1949      	addeq	r1, r1, r5
 8006fca:	6021      	streq	r1, [r4, #0]
 8006fcc:	6054      	str	r4, [r2, #4]
 8006fce:	e7ca      	b.n	8006f66 <_free_r+0x26>
 8006fd0:	b003      	add	sp, #12
 8006fd2:	bd30      	pop	{r4, r5, pc}
 8006fd4:	20005838 	.word	0x20005838

08006fd8 <__malloc_lock>:
 8006fd8:	4801      	ldr	r0, [pc, #4]	; (8006fe0 <__malloc_lock+0x8>)
 8006fda:	f7ff bfa1 	b.w	8006f20 <__retarget_lock_acquire_recursive>
 8006fde:	bf00      	nop
 8006fe0:	20005834 	.word	0x20005834

08006fe4 <__malloc_unlock>:
 8006fe4:	4801      	ldr	r0, [pc, #4]	; (8006fec <__malloc_unlock+0x8>)
 8006fe6:	f7ff bf9c 	b.w	8006f22 <__retarget_lock_release_recursive>
 8006fea:	bf00      	nop
 8006fec:	20005834 	.word	0x20005834

08006ff0 <_init>:
 8006ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ff2:	bf00      	nop
 8006ff4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ff6:	bc08      	pop	{r3}
 8006ff8:	469e      	mov	lr, r3
 8006ffa:	4770      	bx	lr

08006ffc <_fini>:
 8006ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ffe:	bf00      	nop
 8007000:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007002:	bc08      	pop	{r3}
 8007004:	469e      	mov	lr, r3
 8007006:	4770      	bx	lr

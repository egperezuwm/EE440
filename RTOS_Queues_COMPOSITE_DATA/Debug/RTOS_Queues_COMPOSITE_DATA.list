
RTOS_Queues_COMPOSITE_DATA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000072c8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000250  08007478  08007478  00017478  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080076c8  080076c8  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  080076c8  080076c8  000176c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080076d0  080076d0  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080076d0  080076d0  000176d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080076d4  080076d4  000176d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  080076d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020060  2**0
                  CONTENTS
 10 .bss          000057f8  20000060  20000060  00020060  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20005858  20005858  00020060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 14 .debug_info   000208f4  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000040c6  00000000  00000000  000409c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001b00  00000000  00000000  00044a90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001511  00000000  00000000  00046590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00027caa  00000000  00000000  00047aa1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001d178  00000000  00000000  0006f74b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000eee02  00000000  00000000  0008c8c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00007670  00000000  00000000  0017b6c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006d  00000000  00000000  00182d38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000060 	.word	0x20000060
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08007460 	.word	0x08007460

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000064 	.word	0x20000064
 80001ec:	08007460 	.word	0x08007460

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000200:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000204:	f000 b970 	b.w	80004e8 <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9e08      	ldr	r6, [sp, #32]
 8000226:	460d      	mov	r5, r1
 8000228:	4604      	mov	r4, r0
 800022a:	460f      	mov	r7, r1
 800022c:	2b00      	cmp	r3, #0
 800022e:	d14a      	bne.n	80002c6 <__udivmoddi4+0xa6>
 8000230:	428a      	cmp	r2, r1
 8000232:	4694      	mov	ip, r2
 8000234:	d965      	bls.n	8000302 <__udivmoddi4+0xe2>
 8000236:	fab2 f382 	clz	r3, r2
 800023a:	b143      	cbz	r3, 800024e <__udivmoddi4+0x2e>
 800023c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000240:	f1c3 0220 	rsb	r2, r3, #32
 8000244:	409f      	lsls	r7, r3
 8000246:	fa20 f202 	lsr.w	r2, r0, r2
 800024a:	4317      	orrs	r7, r2
 800024c:	409c      	lsls	r4, r3
 800024e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000252:	fa1f f58c 	uxth.w	r5, ip
 8000256:	fbb7 f1fe 	udiv	r1, r7, lr
 800025a:	0c22      	lsrs	r2, r4, #16
 800025c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000260:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000264:	fb01 f005 	mul.w	r0, r1, r5
 8000268:	4290      	cmp	r0, r2
 800026a:	d90a      	bls.n	8000282 <__udivmoddi4+0x62>
 800026c:	eb1c 0202 	adds.w	r2, ip, r2
 8000270:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000274:	f080 811c 	bcs.w	80004b0 <__udivmoddi4+0x290>
 8000278:	4290      	cmp	r0, r2
 800027a:	f240 8119 	bls.w	80004b0 <__udivmoddi4+0x290>
 800027e:	3902      	subs	r1, #2
 8000280:	4462      	add	r2, ip
 8000282:	1a12      	subs	r2, r2, r0
 8000284:	b2a4      	uxth	r4, r4
 8000286:	fbb2 f0fe 	udiv	r0, r2, lr
 800028a:	fb0e 2210 	mls	r2, lr, r0, r2
 800028e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000292:	fb00 f505 	mul.w	r5, r0, r5
 8000296:	42a5      	cmp	r5, r4
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x90>
 800029a:	eb1c 0404 	adds.w	r4, ip, r4
 800029e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002a2:	f080 8107 	bcs.w	80004b4 <__udivmoddi4+0x294>
 80002a6:	42a5      	cmp	r5, r4
 80002a8:	f240 8104 	bls.w	80004b4 <__udivmoddi4+0x294>
 80002ac:	4464      	add	r4, ip
 80002ae:	3802      	subs	r0, #2
 80002b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002b4:	1b64      	subs	r4, r4, r5
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11e      	cbz	r6, 80002c2 <__udivmoddi4+0xa2>
 80002ba:	40dc      	lsrs	r4, r3
 80002bc:	2300      	movs	r3, #0
 80002be:	e9c6 4300 	strd	r4, r3, [r6]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d908      	bls.n	80002dc <__udivmoddi4+0xbc>
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	f000 80ed 	beq.w	80004aa <__udivmoddi4+0x28a>
 80002d0:	2100      	movs	r1, #0
 80002d2:	e9c6 0500 	strd	r0, r5, [r6]
 80002d6:	4608      	mov	r0, r1
 80002d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002dc:	fab3 f183 	clz	r1, r3
 80002e0:	2900      	cmp	r1, #0
 80002e2:	d149      	bne.n	8000378 <__udivmoddi4+0x158>
 80002e4:	42ab      	cmp	r3, r5
 80002e6:	d302      	bcc.n	80002ee <__udivmoddi4+0xce>
 80002e8:	4282      	cmp	r2, r0
 80002ea:	f200 80f8 	bhi.w	80004de <__udivmoddi4+0x2be>
 80002ee:	1a84      	subs	r4, r0, r2
 80002f0:	eb65 0203 	sbc.w	r2, r5, r3
 80002f4:	2001      	movs	r0, #1
 80002f6:	4617      	mov	r7, r2
 80002f8:	2e00      	cmp	r6, #0
 80002fa:	d0e2      	beq.n	80002c2 <__udivmoddi4+0xa2>
 80002fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000300:	e7df      	b.n	80002c2 <__udivmoddi4+0xa2>
 8000302:	b902      	cbnz	r2, 8000306 <__udivmoddi4+0xe6>
 8000304:	deff      	udf	#255	; 0xff
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	2b00      	cmp	r3, #0
 800030c:	f040 8090 	bne.w	8000430 <__udivmoddi4+0x210>
 8000310:	1a8a      	subs	r2, r1, r2
 8000312:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000316:	fa1f fe8c 	uxth.w	lr, ip
 800031a:	2101      	movs	r1, #1
 800031c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000320:	fb07 2015 	mls	r0, r7, r5, r2
 8000324:	0c22      	lsrs	r2, r4, #16
 8000326:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800032a:	fb0e f005 	mul.w	r0, lr, r5
 800032e:	4290      	cmp	r0, r2
 8000330:	d908      	bls.n	8000344 <__udivmoddi4+0x124>
 8000332:	eb1c 0202 	adds.w	r2, ip, r2
 8000336:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x122>
 800033c:	4290      	cmp	r0, r2
 800033e:	f200 80cb 	bhi.w	80004d8 <__udivmoddi4+0x2b8>
 8000342:	4645      	mov	r5, r8
 8000344:	1a12      	subs	r2, r2, r0
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb2 f0f7 	udiv	r0, r2, r7
 800034c:	fb07 2210 	mls	r2, r7, r0, r2
 8000350:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000354:	fb0e fe00 	mul.w	lr, lr, r0
 8000358:	45a6      	cmp	lr, r4
 800035a:	d908      	bls.n	800036e <__udivmoddi4+0x14e>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000364:	d202      	bcs.n	800036c <__udivmoddi4+0x14c>
 8000366:	45a6      	cmp	lr, r4
 8000368:	f200 80bb 	bhi.w	80004e2 <__udivmoddi4+0x2c2>
 800036c:	4610      	mov	r0, r2
 800036e:	eba4 040e 	sub.w	r4, r4, lr
 8000372:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000376:	e79f      	b.n	80002b8 <__udivmoddi4+0x98>
 8000378:	f1c1 0720 	rsb	r7, r1, #32
 800037c:	408b      	lsls	r3, r1
 800037e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000382:	ea4c 0c03 	orr.w	ip, ip, r3
 8000386:	fa05 f401 	lsl.w	r4, r5, r1
 800038a:	fa20 f307 	lsr.w	r3, r0, r7
 800038e:	40fd      	lsrs	r5, r7
 8000390:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000394:	4323      	orrs	r3, r4
 8000396:	fbb5 f8f9 	udiv	r8, r5, r9
 800039a:	fa1f fe8c 	uxth.w	lr, ip
 800039e:	fb09 5518 	mls	r5, r9, r8, r5
 80003a2:	0c1c      	lsrs	r4, r3, #16
 80003a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003a8:	fb08 f50e 	mul.w	r5, r8, lr
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	fa02 f201 	lsl.w	r2, r2, r1
 80003b2:	fa00 f001 	lsl.w	r0, r0, r1
 80003b6:	d90b      	bls.n	80003d0 <__udivmoddi4+0x1b0>
 80003b8:	eb1c 0404 	adds.w	r4, ip, r4
 80003bc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003c0:	f080 8088 	bcs.w	80004d4 <__udivmoddi4+0x2b4>
 80003c4:	42a5      	cmp	r5, r4
 80003c6:	f240 8085 	bls.w	80004d4 <__udivmoddi4+0x2b4>
 80003ca:	f1a8 0802 	sub.w	r8, r8, #2
 80003ce:	4464      	add	r4, ip
 80003d0:	1b64      	subs	r4, r4, r5
 80003d2:	b29d      	uxth	r5, r3
 80003d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003d8:	fb09 4413 	mls	r4, r9, r3, r4
 80003dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003e4:	45a6      	cmp	lr, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x1da>
 80003e8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ec:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003f0:	d26c      	bcs.n	80004cc <__udivmoddi4+0x2ac>
 80003f2:	45a6      	cmp	lr, r4
 80003f4:	d96a      	bls.n	80004cc <__udivmoddi4+0x2ac>
 80003f6:	3b02      	subs	r3, #2
 80003f8:	4464      	add	r4, ip
 80003fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000402:	eba4 040e 	sub.w	r4, r4, lr
 8000406:	42ac      	cmp	r4, r5
 8000408:	46c8      	mov	r8, r9
 800040a:	46ae      	mov	lr, r5
 800040c:	d356      	bcc.n	80004bc <__udivmoddi4+0x29c>
 800040e:	d053      	beq.n	80004b8 <__udivmoddi4+0x298>
 8000410:	b156      	cbz	r6, 8000428 <__udivmoddi4+0x208>
 8000412:	ebb0 0208 	subs.w	r2, r0, r8
 8000416:	eb64 040e 	sbc.w	r4, r4, lr
 800041a:	fa04 f707 	lsl.w	r7, r4, r7
 800041e:	40ca      	lsrs	r2, r1
 8000420:	40cc      	lsrs	r4, r1
 8000422:	4317      	orrs	r7, r2
 8000424:	e9c6 7400 	strd	r7, r4, [r6]
 8000428:	4618      	mov	r0, r3
 800042a:	2100      	movs	r1, #0
 800042c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000430:	f1c3 0120 	rsb	r1, r3, #32
 8000434:	fa02 fc03 	lsl.w	ip, r2, r3
 8000438:	fa20 f201 	lsr.w	r2, r0, r1
 800043c:	fa25 f101 	lsr.w	r1, r5, r1
 8000440:	409d      	lsls	r5, r3
 8000442:	432a      	orrs	r2, r5
 8000444:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000450:	fb07 1510 	mls	r5, r7, r0, r1
 8000454:	0c11      	lsrs	r1, r2, #16
 8000456:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800045a:	fb00 f50e 	mul.w	r5, r0, lr
 800045e:	428d      	cmp	r5, r1
 8000460:	fa04 f403 	lsl.w	r4, r4, r3
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x258>
 8000466:	eb1c 0101 	adds.w	r1, ip, r1
 800046a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800046e:	d22f      	bcs.n	80004d0 <__udivmoddi4+0x2b0>
 8000470:	428d      	cmp	r5, r1
 8000472:	d92d      	bls.n	80004d0 <__udivmoddi4+0x2b0>
 8000474:	3802      	subs	r0, #2
 8000476:	4461      	add	r1, ip
 8000478:	1b49      	subs	r1, r1, r5
 800047a:	b292      	uxth	r2, r2
 800047c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000480:	fb07 1115 	mls	r1, r7, r5, r1
 8000484:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000488:	fb05 f10e 	mul.w	r1, r5, lr
 800048c:	4291      	cmp	r1, r2
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x282>
 8000490:	eb1c 0202 	adds.w	r2, ip, r2
 8000494:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000498:	d216      	bcs.n	80004c8 <__udivmoddi4+0x2a8>
 800049a:	4291      	cmp	r1, r2
 800049c:	d914      	bls.n	80004c8 <__udivmoddi4+0x2a8>
 800049e:	3d02      	subs	r5, #2
 80004a0:	4462      	add	r2, ip
 80004a2:	1a52      	subs	r2, r2, r1
 80004a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004a8:	e738      	b.n	800031c <__udivmoddi4+0xfc>
 80004aa:	4631      	mov	r1, r6
 80004ac:	4630      	mov	r0, r6
 80004ae:	e708      	b.n	80002c2 <__udivmoddi4+0xa2>
 80004b0:	4639      	mov	r1, r7
 80004b2:	e6e6      	b.n	8000282 <__udivmoddi4+0x62>
 80004b4:	4610      	mov	r0, r2
 80004b6:	e6fb      	b.n	80002b0 <__udivmoddi4+0x90>
 80004b8:	4548      	cmp	r0, r9
 80004ba:	d2a9      	bcs.n	8000410 <__udivmoddi4+0x1f0>
 80004bc:	ebb9 0802 	subs.w	r8, r9, r2
 80004c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004c4:	3b01      	subs	r3, #1
 80004c6:	e7a3      	b.n	8000410 <__udivmoddi4+0x1f0>
 80004c8:	4645      	mov	r5, r8
 80004ca:	e7ea      	b.n	80004a2 <__udivmoddi4+0x282>
 80004cc:	462b      	mov	r3, r5
 80004ce:	e794      	b.n	80003fa <__udivmoddi4+0x1da>
 80004d0:	4640      	mov	r0, r8
 80004d2:	e7d1      	b.n	8000478 <__udivmoddi4+0x258>
 80004d4:	46d0      	mov	r8, sl
 80004d6:	e77b      	b.n	80003d0 <__udivmoddi4+0x1b0>
 80004d8:	3d02      	subs	r5, #2
 80004da:	4462      	add	r2, ip
 80004dc:	e732      	b.n	8000344 <__udivmoddi4+0x124>
 80004de:	4608      	mov	r0, r1
 80004e0:	e70a      	b.n	80002f8 <__udivmoddi4+0xd8>
 80004e2:	4464      	add	r4, ip
 80004e4:	3802      	subs	r0, #2
 80004e6:	e742      	b.n	800036e <__udivmoddi4+0x14e>

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 80004ec:	b480      	push	{r7}
 80004ee:	b083      	sub	sp, #12
 80004f0:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80004f2:	4b25      	ldr	r3, [pc, #148]	; (8000588 <_DoInit+0x9c>)
 80004f4:	603b      	str	r3, [r7, #0]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80004f6:	683b      	ldr	r3, [r7, #0]
 80004f8:	2203      	movs	r2, #3
 80004fa:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80004fc:	683b      	ldr	r3, [r7, #0]
 80004fe:	2203      	movs	r2, #3
 8000500:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8000502:	683b      	ldr	r3, [r7, #0]
 8000504:	4a21      	ldr	r2, [pc, #132]	; (800058c <_DoInit+0xa0>)
 8000506:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8000508:	683b      	ldr	r3, [r7, #0]
 800050a:	4a21      	ldr	r2, [pc, #132]	; (8000590 <_DoInit+0xa4>)
 800050c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800050e:	683b      	ldr	r3, [r7, #0]
 8000510:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000514:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8000516:	683b      	ldr	r3, [r7, #0]
 8000518:	2200      	movs	r2, #0
 800051a:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800051c:	683b      	ldr	r3, [r7, #0]
 800051e:	2200      	movs	r2, #0
 8000520:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8000522:	683b      	ldr	r3, [r7, #0]
 8000524:	2200      	movs	r2, #0
 8000526:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8000528:	683b      	ldr	r3, [r7, #0]
 800052a:	4a18      	ldr	r2, [pc, #96]	; (800058c <_DoInit+0xa0>)
 800052c:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800052e:	683b      	ldr	r3, [r7, #0]
 8000530:	4a18      	ldr	r2, [pc, #96]	; (8000594 <_DoInit+0xa8>)
 8000532:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8000534:	683b      	ldr	r3, [r7, #0]
 8000536:	2210      	movs	r2, #16
 8000538:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800053a:	683b      	ldr	r3, [r7, #0]
 800053c:	2200      	movs	r2, #0
 800053e:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8000540:	683b      	ldr	r3, [r7, #0]
 8000542:	2200      	movs	r2, #0
 8000544:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8000546:	683b      	ldr	r3, [r7, #0]
 8000548:	2200      	movs	r2, #0
 800054a:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 800054c:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8000550:	2300      	movs	r3, #0
 8000552:	607b      	str	r3, [r7, #4]
 8000554:	e00c      	b.n	8000570 <_DoInit+0x84>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	f1c3 030f 	rsb	r3, r3, #15
 800055c:	4a0e      	ldr	r2, [pc, #56]	; (8000598 <_DoInit+0xac>)
 800055e:	5cd1      	ldrb	r1, [r2, r3]
 8000560:	683a      	ldr	r2, [r7, #0]
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	4413      	add	r3, r2
 8000566:	460a      	mov	r2, r1
 8000568:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	3301      	adds	r3, #1
 800056e:	607b      	str	r3, [r7, #4]
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	2b0f      	cmp	r3, #15
 8000574:	d9ef      	bls.n	8000556 <_DoInit+0x6a>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8000576:	f3bf 8f5f 	dmb	sy
}
 800057a:	bf00      	nop
 800057c:	370c      	adds	r7, #12
 800057e:	46bd      	mov	sp, r7
 8000580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop
 8000588:	2000007c 	.word	0x2000007c
 800058c:	08007478 	.word	0x08007478
 8000590:	20000124 	.word	0x20000124
 8000594:	20000524 	.word	0x20000524
 8000598:	08007620 	.word	0x08007620

0800059c <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 800059c:	b580      	push	{r7, lr}
 800059e:	b08a      	sub	sp, #40	; 0x28
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	60f8      	str	r0, [r7, #12]
 80005a4:	60b9      	str	r1, [r7, #8]
 80005a6:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 80005a8:	2300      	movs	r3, #0
 80005aa:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 80005ac:	68fb      	ldr	r3, [r7, #12]
 80005ae:	68db      	ldr	r3, [r3, #12]
 80005b0:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	691b      	ldr	r3, [r3, #16]
 80005b6:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 80005b8:	69ba      	ldr	r2, [r7, #24]
 80005ba:	69fb      	ldr	r3, [r7, #28]
 80005bc:	429a      	cmp	r2, r3
 80005be:	d905      	bls.n	80005cc <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 80005c0:	69ba      	ldr	r2, [r7, #24]
 80005c2:	69fb      	ldr	r3, [r7, #28]
 80005c4:	1ad3      	subs	r3, r2, r3
 80005c6:	3b01      	subs	r3, #1
 80005c8:	627b      	str	r3, [r7, #36]	; 0x24
 80005ca:	e007      	b.n	80005dc <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	689a      	ldr	r2, [r3, #8]
 80005d0:	69b9      	ldr	r1, [r7, #24]
 80005d2:	69fb      	ldr	r3, [r7, #28]
 80005d4:	1acb      	subs	r3, r1, r3
 80005d6:	4413      	add	r3, r2
 80005d8:	3b01      	subs	r3, #1
 80005da:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	689a      	ldr	r2, [r3, #8]
 80005e0:	69fb      	ldr	r3, [r7, #28]
 80005e2:	1ad3      	subs	r3, r2, r3
 80005e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80005e6:	4293      	cmp	r3, r2
 80005e8:	bf28      	it	cs
 80005ea:	4613      	movcs	r3, r2
 80005ec:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 80005ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	4293      	cmp	r3, r2
 80005f4:	bf28      	it	cs
 80005f6:	4613      	movcs	r3, r2
 80005f8:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	685a      	ldr	r2, [r3, #4]
 80005fe:	69fb      	ldr	r3, [r7, #28]
 8000600:	4413      	add	r3, r2
 8000602:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8000604:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000606:	68b9      	ldr	r1, [r7, #8]
 8000608:	6978      	ldr	r0, [r7, #20]
 800060a:	f006 fec3 	bl	8007394 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 800060e:	6a3a      	ldr	r2, [r7, #32]
 8000610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000612:	4413      	add	r3, r2
 8000614:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8000616:	68ba      	ldr	r2, [r7, #8]
 8000618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800061a:	4413      	add	r3, r2
 800061c:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 800061e:	687a      	ldr	r2, [r7, #4]
 8000620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000622:	1ad3      	subs	r3, r2, r3
 8000624:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8000626:	69fa      	ldr	r2, [r7, #28]
 8000628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800062a:	4413      	add	r3, r2
 800062c:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	689b      	ldr	r3, [r3, #8]
 8000632:	69fa      	ldr	r2, [r7, #28]
 8000634:	429a      	cmp	r2, r3
 8000636:	d101      	bne.n	800063c <_WriteBlocking+0xa0>
      WrOff = 0u;
 8000638:	2300      	movs	r3, #0
 800063a:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800063c:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	69fa      	ldr	r2, [r7, #28]
 8000644:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	2b00      	cmp	r3, #0
 800064a:	d1b2      	bne.n	80005b2 <_WriteBlocking+0x16>
  return NumBytesWritten;
 800064c:	6a3b      	ldr	r3, [r7, #32]
}
 800064e:	4618      	mov	r0, r3
 8000650:	3728      	adds	r7, #40	; 0x28
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}

08000656 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8000656:	b580      	push	{r7, lr}
 8000658:	b088      	sub	sp, #32
 800065a:	af00      	add	r7, sp, #0
 800065c:	60f8      	str	r0, [r7, #12]
 800065e:	60b9      	str	r1, [r7, #8]
 8000660:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8000662:	68fb      	ldr	r3, [r7, #12]
 8000664:	68db      	ldr	r3, [r3, #12]
 8000666:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8000668:	68fb      	ldr	r3, [r7, #12]
 800066a:	689a      	ldr	r2, [r3, #8]
 800066c:	69fb      	ldr	r3, [r7, #28]
 800066e:	1ad3      	subs	r3, r2, r3
 8000670:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8000672:	69ba      	ldr	r2, [r7, #24]
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	429a      	cmp	r2, r3
 8000678:	d911      	bls.n	800069e <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800067a:	68fb      	ldr	r3, [r7, #12]
 800067c:	685a      	ldr	r2, [r3, #4]
 800067e:	69fb      	ldr	r3, [r7, #28]
 8000680:	4413      	add	r3, r2
 8000682:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8000684:	687a      	ldr	r2, [r7, #4]
 8000686:	68b9      	ldr	r1, [r7, #8]
 8000688:	6938      	ldr	r0, [r7, #16]
 800068a:	f006 fe83 	bl	8007394 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800068e:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8000692:	69fa      	ldr	r2, [r7, #28]
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	441a      	add	r2, r3
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 800069c:	e01f      	b.n	80006de <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 800069e:	69bb      	ldr	r3, [r7, #24]
 80006a0:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	685a      	ldr	r2, [r3, #4]
 80006a6:	69fb      	ldr	r3, [r7, #28]
 80006a8:	4413      	add	r3, r2
 80006aa:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 80006ac:	697a      	ldr	r2, [r7, #20]
 80006ae:	68b9      	ldr	r1, [r7, #8]
 80006b0:	6938      	ldr	r0, [r7, #16]
 80006b2:	f006 fe6f 	bl	8007394 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 80006b6:	687a      	ldr	r2, [r7, #4]
 80006b8:	69bb      	ldr	r3, [r7, #24]
 80006ba:	1ad3      	subs	r3, r2, r3
 80006bc:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	685b      	ldr	r3, [r3, #4]
 80006c2:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 80006c4:	68ba      	ldr	r2, [r7, #8]
 80006c6:	69bb      	ldr	r3, [r7, #24]
 80006c8:	4413      	add	r3, r2
 80006ca:	697a      	ldr	r2, [r7, #20]
 80006cc:	4619      	mov	r1, r3
 80006ce:	6938      	ldr	r0, [r7, #16]
 80006d0:	f006 fe60 	bl	8007394 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80006d4:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	697a      	ldr	r2, [r7, #20]
 80006dc:	60da      	str	r2, [r3, #12]
}
 80006de:	bf00      	nop
 80006e0:	3720      	adds	r7, #32
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}

080006e6 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 80006e6:	b480      	push	{r7}
 80006e8:	b087      	sub	sp, #28
 80006ea:	af00      	add	r7, sp, #0
 80006ec:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	691b      	ldr	r3, [r3, #16]
 80006f2:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	68db      	ldr	r3, [r3, #12]
 80006f8:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 80006fa:	693a      	ldr	r2, [r7, #16]
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	429a      	cmp	r2, r3
 8000700:	d808      	bhi.n	8000714 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	689a      	ldr	r2, [r3, #8]
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	1ad2      	subs	r2, r2, r3
 800070a:	693b      	ldr	r3, [r7, #16]
 800070c:	4413      	add	r3, r2
 800070e:	3b01      	subs	r3, #1
 8000710:	617b      	str	r3, [r7, #20]
 8000712:	e004      	b.n	800071e <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8000714:	693a      	ldr	r2, [r7, #16]
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	1ad3      	subs	r3, r2, r3
 800071a:	3b01      	subs	r3, #1
 800071c:	617b      	str	r3, [r7, #20]
  }
  return r;
 800071e:	697b      	ldr	r3, [r7, #20]
}
 8000720:	4618      	mov	r0, r3
 8000722:	371c      	adds	r7, #28
 8000724:	46bd      	mov	sp, r7
 8000726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072a:	4770      	bx	lr

0800072c <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800072c:	b580      	push	{r7, lr}
 800072e:	b088      	sub	sp, #32
 8000730:	af00      	add	r7, sp, #0
 8000732:	60f8      	str	r0, [r7, #12]
 8000734:	60b9      	str	r1, [r7, #8]
 8000736:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 8000738:	68bb      	ldr	r3, [r7, #8]
 800073a:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	1c5a      	adds	r2, r3, #1
 8000740:	4613      	mov	r3, r2
 8000742:	005b      	lsls	r3, r3, #1
 8000744:	4413      	add	r3, r2
 8000746:	00db      	lsls	r3, r3, #3
 8000748:	4a1f      	ldr	r2, [pc, #124]	; (80007c8 <SEGGER_RTT_WriteNoLock+0x9c>)
 800074a:	4413      	add	r3, r2
 800074c:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 800074e:	697b      	ldr	r3, [r7, #20]
 8000750:	695b      	ldr	r3, [r3, #20]
 8000752:	2b02      	cmp	r3, #2
 8000754:	d029      	beq.n	80007aa <SEGGER_RTT_WriteNoLock+0x7e>
 8000756:	2b02      	cmp	r3, #2
 8000758:	d82e      	bhi.n	80007b8 <SEGGER_RTT_WriteNoLock+0x8c>
 800075a:	2b00      	cmp	r3, #0
 800075c:	d002      	beq.n	8000764 <SEGGER_RTT_WriteNoLock+0x38>
 800075e:	2b01      	cmp	r3, #1
 8000760:	d013      	beq.n	800078a <SEGGER_RTT_WriteNoLock+0x5e>
 8000762:	e029      	b.n	80007b8 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8000764:	6978      	ldr	r0, [r7, #20]
 8000766:	f7ff ffbe 	bl	80006e6 <_GetAvailWriteSpace>
 800076a:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 800076c:	693a      	ldr	r2, [r7, #16]
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	429a      	cmp	r2, r3
 8000772:	d202      	bcs.n	800077a <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 8000774:	2300      	movs	r3, #0
 8000776:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8000778:	e021      	b.n	80007be <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 800077e:	687a      	ldr	r2, [r7, #4]
 8000780:	69b9      	ldr	r1, [r7, #24]
 8000782:	6978      	ldr	r0, [r7, #20]
 8000784:	f7ff ff67 	bl	8000656 <_WriteNoCheck>
    break;
 8000788:	e019      	b.n	80007be <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800078a:	6978      	ldr	r0, [r7, #20]
 800078c:	f7ff ffab 	bl	80006e6 <_GetAvailWriteSpace>
 8000790:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8000792:	687a      	ldr	r2, [r7, #4]
 8000794:	693b      	ldr	r3, [r7, #16]
 8000796:	4293      	cmp	r3, r2
 8000798:	bf28      	it	cs
 800079a:	4613      	movcs	r3, r2
 800079c:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 800079e:	69fa      	ldr	r2, [r7, #28]
 80007a0:	69b9      	ldr	r1, [r7, #24]
 80007a2:	6978      	ldr	r0, [r7, #20]
 80007a4:	f7ff ff57 	bl	8000656 <_WriteNoCheck>
    break;
 80007a8:	e009      	b.n	80007be <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 80007aa:	687a      	ldr	r2, [r7, #4]
 80007ac:	69b9      	ldr	r1, [r7, #24]
 80007ae:	6978      	ldr	r0, [r7, #20]
 80007b0:	f7ff fef4 	bl	800059c <_WriteBlocking>
 80007b4:	61f8      	str	r0, [r7, #28]
    break;
 80007b6:	e002      	b.n	80007be <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 80007b8:	2300      	movs	r3, #0
 80007ba:	61fb      	str	r3, [r7, #28]
    break;
 80007bc:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 80007be:	69fb      	ldr	r3, [r7, #28]
}
 80007c0:	4618      	mov	r0, r3
 80007c2:	3720      	adds	r7, #32
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	2000007c 	.word	0x2000007c

080007cc <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b088      	sub	sp, #32
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	60f8      	str	r0, [r7, #12]
 80007d4:	60b9      	str	r1, [r7, #8]
 80007d6:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 80007d8:	4b0e      	ldr	r3, [pc, #56]	; (8000814 <SEGGER_RTT_Write+0x48>)
 80007da:	61fb      	str	r3, [r7, #28]
 80007dc:	69fb      	ldr	r3, [r7, #28]
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	b2db      	uxtb	r3, r3
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d101      	bne.n	80007ea <SEGGER_RTT_Write+0x1e>
 80007e6:	f7ff fe81 	bl	80004ec <_DoInit>
  SEGGER_RTT_LOCK();
 80007ea:	f3ef 8311 	mrs	r3, BASEPRI
 80007ee:	f04f 0120 	mov.w	r1, #32
 80007f2:	f381 8811 	msr	BASEPRI, r1
 80007f6:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 80007f8:	687a      	ldr	r2, [r7, #4]
 80007fa:	68b9      	ldr	r1, [r7, #8]
 80007fc:	68f8      	ldr	r0, [r7, #12]
 80007fe:	f7ff ff95 	bl	800072c <SEGGER_RTT_WriteNoLock>
 8000802:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8000804:	69bb      	ldr	r3, [r7, #24]
 8000806:	f383 8811 	msr	BASEPRI, r3
  return Status;
 800080a:	697b      	ldr	r3, [r7, #20]
}
 800080c:	4618      	mov	r0, r3
 800080e:	3720      	adds	r7, #32
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	2000007c 	.word	0x2000007c

08000818 <SEGGER_RTT_ConfigUpBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigUpBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8000818:	b580      	push	{r7, lr}
 800081a:	b08a      	sub	sp, #40	; 0x28
 800081c:	af00      	add	r7, sp, #0
 800081e:	60f8      	str	r0, [r7, #12]
 8000820:	60b9      	str	r1, [r7, #8]
 8000822:	607a      	str	r2, [r7, #4]
 8000824:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_UP* pUp;

  INIT();
 8000826:	4b20      	ldr	r3, [pc, #128]	; (80008a8 <SEGGER_RTT_ConfigUpBuffer+0x90>)
 8000828:	623b      	str	r3, [r7, #32]
 800082a:	6a3b      	ldr	r3, [r7, #32]
 800082c:	781b      	ldrb	r3, [r3, #0]
 800082e:	b2db      	uxtb	r3, r3
 8000830:	2b00      	cmp	r3, #0
 8000832:	d101      	bne.n	8000838 <SEGGER_RTT_ConfigUpBuffer+0x20>
 8000834:	f7ff fe5a 	bl	80004ec <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8000838:	4b1b      	ldr	r3, [pc, #108]	; (80008a8 <SEGGER_RTT_ConfigUpBuffer+0x90>)
 800083a:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_UP_BUFFERS) {
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	2b02      	cmp	r3, #2
 8000840:	d82a      	bhi.n	8000898 <SEGGER_RTT_ConfigUpBuffer+0x80>
    SEGGER_RTT_LOCK();
 8000842:	f3ef 8311 	mrs	r3, BASEPRI
 8000846:	f04f 0120 	mov.w	r1, #32
 800084a:	f381 8811 	msr	BASEPRI, r1
 800084e:	61bb      	str	r3, [r7, #24]
    pUp = &pRTTCB->aUp[BufferIndex];
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	1c5a      	adds	r2, r3, #1
 8000854:	4613      	mov	r3, r2
 8000856:	005b      	lsls	r3, r3, #1
 8000858:	4413      	add	r3, r2
 800085a:	00db      	lsls	r3, r3, #3
 800085c:	69fa      	ldr	r2, [r7, #28]
 800085e:	4413      	add	r3, r2
 8000860:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8000862:	68fb      	ldr	r3, [r7, #12]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d00e      	beq.n	8000886 <SEGGER_RTT_ConfigUpBuffer+0x6e>
      pUp->sName        = sName;
 8000868:	697b      	ldr	r3, [r7, #20]
 800086a:	68ba      	ldr	r2, [r7, #8]
 800086c:	601a      	str	r2, [r3, #0]
      pUp->pBuffer      = (char*)pBuffer;
 800086e:	697b      	ldr	r3, [r7, #20]
 8000870:	687a      	ldr	r2, [r7, #4]
 8000872:	605a      	str	r2, [r3, #4]
      pUp->SizeOfBuffer = BufferSize;
 8000874:	697b      	ldr	r3, [r7, #20]
 8000876:	683a      	ldr	r2, [r7, #0]
 8000878:	609a      	str	r2, [r3, #8]
      pUp->RdOff        = 0u;
 800087a:	697b      	ldr	r3, [r7, #20]
 800087c:	2200      	movs	r2, #0
 800087e:	611a      	str	r2, [r3, #16]
      pUp->WrOff        = 0u;
 8000880:	697b      	ldr	r3, [r7, #20]
 8000882:	2200      	movs	r2, #0
 8000884:	60da      	str	r2, [r3, #12]
    }
    pUp->Flags          = Flags;
 8000886:	697b      	ldr	r3, [r7, #20]
 8000888:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800088a:	615a      	str	r2, [r3, #20]
    SEGGER_RTT_UNLOCK();
 800088c:	69bb      	ldr	r3, [r7, #24]
 800088e:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8000892:	2300      	movs	r3, #0
 8000894:	627b      	str	r3, [r7, #36]	; 0x24
 8000896:	e002      	b.n	800089e <SEGGER_RTT_ConfigUpBuffer+0x86>
  } else {
    r = -1;
 8000898:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800089c:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 800089e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80008a0:	4618      	mov	r0, r3
 80008a2:	3728      	adds	r7, #40	; 0x28
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	2000007c 	.word	0x2000007c

080008ac <_StoreChar>:
*/
/*********************************************************************
*
*       _StoreChar
*/
static void _StoreChar(SEGGER_RTT_PRINTF_DESC * p, char c) {
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b084      	sub	sp, #16
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
 80008b4:	460b      	mov	r3, r1
 80008b6:	70fb      	strb	r3, [r7, #3]
  unsigned Cnt;

  Cnt = p->Cnt;
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	689b      	ldr	r3, [r3, #8]
 80008bc:	60fb      	str	r3, [r7, #12]
  if ((Cnt + 1u) <= p->BufferSize) {
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	1c5a      	adds	r2, r3, #1
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	685b      	ldr	r3, [r3, #4]
 80008c6:	429a      	cmp	r2, r3
 80008c8:	d80e      	bhi.n	80008e8 <_StoreChar+0x3c>
    *(p->pBuffer + Cnt) = c;
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	681a      	ldr	r2, [r3, #0]
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	4413      	add	r3, r2
 80008d2:	78fa      	ldrb	r2, [r7, #3]
 80008d4:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	1c5a      	adds	r2, r3, #1
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	609a      	str	r2, [r3, #8]
    p->ReturnValue++;
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	68db      	ldr	r3, [r3, #12]
 80008e2:	1c5a      	adds	r2, r3, #1
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	60da      	str	r2, [r3, #12]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == p->BufferSize) {
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	689a      	ldr	r2, [r3, #8]
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	685b      	ldr	r3, [r3, #4]
 80008f0:	429a      	cmp	r2, r3
 80008f2:	d115      	bne.n	8000920 <_StoreChar+0x74>
    if (SEGGER_RTT_Write(p->RTTBufferIndex, p->pBuffer, p->Cnt) != p->Cnt) {
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	6918      	ldr	r0, [r3, #16]
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	6819      	ldr	r1, [r3, #0]
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	689b      	ldr	r3, [r3, #8]
 8000900:	461a      	mov	r2, r3
 8000902:	f7ff ff63 	bl	80007cc <SEGGER_RTT_Write>
 8000906:	4602      	mov	r2, r0
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	689b      	ldr	r3, [r3, #8]
 800090c:	429a      	cmp	r2, r3
 800090e:	d004      	beq.n	800091a <_StoreChar+0x6e>
      p->ReturnValue = -1;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000916:	60da      	str	r2, [r3, #12]
    } else {
      p->Cnt = 0u;
    }
  }
}
 8000918:	e002      	b.n	8000920 <_StoreChar+0x74>
      p->Cnt = 0u;
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	2200      	movs	r2, #0
 800091e:	609a      	str	r2, [r3, #8]
}
 8000920:	bf00      	nop
 8000922:	3710      	adds	r7, #16
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}

08000928 <_PrintUnsigned>:

/*********************************************************************
*
*       _PrintUnsigned
*/
static void _PrintUnsigned(SEGGER_RTT_PRINTF_DESC * pBufferDesc, unsigned v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
 8000928:	b580      	push	{r7, lr}
 800092a:	b08a      	sub	sp, #40	; 0x28
 800092c:	af00      	add	r7, sp, #0
 800092e:	60f8      	str	r0, [r7, #12]
 8000930:	60b9      	str	r1, [r7, #8]
 8000932:	607a      	str	r2, [r7, #4]
 8000934:	603b      	str	r3, [r7, #0]
  unsigned Digit;
  unsigned Number;
  unsigned Width;
  char c;

  Number = v;
 8000936:	68bb      	ldr	r3, [r7, #8]
 8000938:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 800093a:	2301      	movs	r3, #1
 800093c:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 800093e:	2301      	movs	r3, #1
 8000940:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8000942:	e007      	b.n	8000954 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8000944:	6a3a      	ldr	r2, [r7, #32]
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	fbb2 f3f3 	udiv	r3, r2, r3
 800094c:	623b      	str	r3, [r7, #32]
    Width++;
 800094e:	69fb      	ldr	r3, [r7, #28]
 8000950:	3301      	adds	r3, #1
 8000952:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8000954:	6a3a      	ldr	r2, [r7, #32]
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	429a      	cmp	r2, r3
 800095a:	d2f3      	bcs.n	8000944 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 800095c:	683a      	ldr	r2, [r7, #0]
 800095e:	69fb      	ldr	r3, [r7, #28]
 8000960:	429a      	cmp	r2, r3
 8000962:	d901      	bls.n	8000968 <_PrintUnsigned+0x40>
    Width = NumDigits;
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8000968:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800096a:	f003 0301 	and.w	r3, r3, #1
 800096e:	2b00      	cmp	r3, #0
 8000970:	d125      	bne.n	80009be <_PrintUnsigned+0x96>
    if (FieldWidth != 0u) {
 8000972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000974:	2b00      	cmp	r3, #0
 8000976:	d022      	beq.n	80009be <_PrintUnsigned+0x96>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8000978:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800097a:	f003 0302 	and.w	r3, r3, #2
 800097e:	2b00      	cmp	r3, #0
 8000980:	d005      	beq.n	800098e <_PrintUnsigned+0x66>
 8000982:	683b      	ldr	r3, [r7, #0]
 8000984:	2b00      	cmp	r3, #0
 8000986:	d102      	bne.n	800098e <_PrintUnsigned+0x66>
        c = '0';
 8000988:	2330      	movs	r3, #48	; 0x30
 800098a:	76fb      	strb	r3, [r7, #27]
 800098c:	e001      	b.n	8000992 <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 800098e:	2320      	movs	r3, #32
 8000990:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8000992:	e00b      	b.n	80009ac <_PrintUnsigned+0x84>
        FieldWidth--;
 8000994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000996:	3b01      	subs	r3, #1
 8000998:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 800099a:	7efb      	ldrb	r3, [r7, #27]
 800099c:	4619      	mov	r1, r3
 800099e:	68f8      	ldr	r0, [r7, #12]
 80009a0:	f7ff ff84 	bl	80008ac <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	68db      	ldr	r3, [r3, #12]
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	db07      	blt.n	80009bc <_PrintUnsigned+0x94>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80009ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d005      	beq.n	80009be <_PrintUnsigned+0x96>
 80009b2:	69fa      	ldr	r2, [r7, #28]
 80009b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009b6:	429a      	cmp	r2, r3
 80009b8:	d3ec      	bcc.n	8000994 <_PrintUnsigned+0x6c>
 80009ba:	e000      	b.n	80009be <_PrintUnsigned+0x96>
          break;
 80009bc:	bf00      	nop
        }
      }
    }
  }
  if (pBufferDesc->ReturnValue >= 0) {
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	68db      	ldr	r3, [r3, #12]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	db55      	blt.n	8000a72 <_PrintUnsigned+0x14a>
    // Compute Digit.
    // Loop until Digit has the value of the highest digit required.
    // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
    //
    while (1) {
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80009c6:	683b      	ldr	r3, [r7, #0]
 80009c8:	2b01      	cmp	r3, #1
 80009ca:	d903      	bls.n	80009d4 <_PrintUnsigned+0xac>
        NumDigits--;
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	3b01      	subs	r3, #1
 80009d0:	603b      	str	r3, [r7, #0]
 80009d2:	e009      	b.n	80009e8 <_PrintUnsigned+0xc0>
      } else {
        Div = v / Digit;
 80009d4:	68ba      	ldr	r2, [r7, #8]
 80009d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80009dc:	617b      	str	r3, [r7, #20]
        if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 80009de:	697a      	ldr	r2, [r7, #20]
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	429a      	cmp	r2, r3
 80009e4:	d200      	bcs.n	80009e8 <_PrintUnsigned+0xc0>
          break;
 80009e6:	e005      	b.n	80009f4 <_PrintUnsigned+0xcc>
        }
      }
      Digit *= Base;
 80009e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009ea:	687a      	ldr	r2, [r7, #4]
 80009ec:	fb02 f303 	mul.w	r3, r2, r3
 80009f0:	627b      	str	r3, [r7, #36]	; 0x24
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80009f2:	e7e8      	b.n	80009c6 <_PrintUnsigned+0x9e>
    }
    //
    // Output digits
    //
    do {
      Div = v / Digit;
 80009f4:	68ba      	ldr	r2, [r7, #8]
 80009f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80009fc:	617b      	str	r3, [r7, #20]
      v -= Div * Digit;
 80009fe:	697b      	ldr	r3, [r7, #20]
 8000a00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a02:	fb02 f303 	mul.w	r3, r2, r3
 8000a06:	68ba      	ldr	r2, [r7, #8]
 8000a08:	1ad3      	subs	r3, r2, r3
 8000a0a:	60bb      	str	r3, [r7, #8]
      _StoreChar(pBufferDesc, _aV2C[Div]);
 8000a0c:	4a1b      	ldr	r2, [pc, #108]	; (8000a7c <_PrintUnsigned+0x154>)
 8000a0e:	697b      	ldr	r3, [r7, #20]
 8000a10:	4413      	add	r3, r2
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	4619      	mov	r1, r3
 8000a16:	68f8      	ldr	r0, [r7, #12]
 8000a18:	f7ff ff48 	bl	80008ac <_StoreChar>
      if (pBufferDesc->ReturnValue < 0) {
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	68db      	ldr	r3, [r3, #12]
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	db08      	blt.n	8000a36 <_PrintUnsigned+0x10e>
        break;
      }
      Digit /= Base;
 8000a24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a2c:	627b      	str	r3, [r7, #36]	; 0x24
    } while (Digit);
 8000a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d1df      	bne.n	80009f4 <_PrintUnsigned+0xcc>
 8000a34:	e000      	b.n	8000a38 <_PrintUnsigned+0x110>
        break;
 8000a36:	bf00      	nop
    //
    // Print trailing spaces if necessary
    //
    if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8000a38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a3a:	f003 0301 	and.w	r3, r3, #1
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d017      	beq.n	8000a72 <_PrintUnsigned+0x14a>
      if (FieldWidth != 0u) {
 8000a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d014      	beq.n	8000a72 <_PrintUnsigned+0x14a>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8000a48:	e00a      	b.n	8000a60 <_PrintUnsigned+0x138>
          FieldWidth--;
 8000a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a4c:	3b01      	subs	r3, #1
 8000a4e:	633b      	str	r3, [r7, #48]	; 0x30
          _StoreChar(pBufferDesc, ' ');
 8000a50:	2120      	movs	r1, #32
 8000a52:	68f8      	ldr	r0, [r7, #12]
 8000a54:	f7ff ff2a 	bl	80008ac <_StoreChar>
          if (pBufferDesc->ReturnValue < 0) {
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	68db      	ldr	r3, [r3, #12]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	db07      	blt.n	8000a70 <_PrintUnsigned+0x148>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8000a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d005      	beq.n	8000a72 <_PrintUnsigned+0x14a>
 8000a66:	69fa      	ldr	r2, [r7, #28]
 8000a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a6a:	429a      	cmp	r2, r3
 8000a6c:	d3ed      	bcc.n	8000a4a <_PrintUnsigned+0x122>
          }
        }
      }
    }
  }
}
 8000a6e:	e000      	b.n	8000a72 <_PrintUnsigned+0x14a>
            break;
 8000a70:	bf00      	nop
}
 8000a72:	bf00      	nop
 8000a74:	3728      	adds	r7, #40	; 0x28
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	08007634 	.word	0x08007634

08000a80 <_PrintInt>:

/*********************************************************************
*
*       _PrintInt
*/
static void _PrintInt(SEGGER_RTT_PRINTF_DESC * pBufferDesc, int v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b088      	sub	sp, #32
 8000a84:	af02      	add	r7, sp, #8
 8000a86:	60f8      	str	r0, [r7, #12]
 8000a88:	60b9      	str	r1, [r7, #8]
 8000a8a:	607a      	str	r2, [r7, #4]
 8000a8c:	603b      	str	r3, [r7, #0]
  unsigned Width;
  int Number;

  Number = (v < 0) ? -v : v;
 8000a8e:	68bb      	ldr	r3, [r7, #8]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	bfb8      	it	lt
 8000a94:	425b      	neglt	r3, r3
 8000a96:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8000a98:	2301      	movs	r3, #1
 8000a9a:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8000a9c:	e007      	b.n	8000aae <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	693a      	ldr	r2, [r7, #16]
 8000aa2:	fb92 f3f3 	sdiv	r3, r2, r3
 8000aa6:	613b      	str	r3, [r7, #16]
    Width++;
 8000aa8:	697b      	ldr	r3, [r7, #20]
 8000aaa:	3301      	adds	r3, #1
 8000aac:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	693a      	ldr	r2, [r7, #16]
 8000ab2:	429a      	cmp	r2, r3
 8000ab4:	daf3      	bge.n	8000a9e <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8000ab6:	683a      	ldr	r2, [r7, #0]
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	429a      	cmp	r2, r3
 8000abc:	d901      	bls.n	8000ac2 <_PrintInt+0x42>
    Width = NumDigits;
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8000ac2:	6a3b      	ldr	r3, [r7, #32]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d00a      	beq.n	8000ade <_PrintInt+0x5e>
 8000ac8:	68bb      	ldr	r3, [r7, #8]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	db04      	blt.n	8000ad8 <_PrintInt+0x58>
 8000ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ad0:	f003 0304 	and.w	r3, r3, #4
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d002      	beq.n	8000ade <_PrintInt+0x5e>
    FieldWidth--;
 8000ad8:	6a3b      	ldr	r3, [r7, #32]
 8000ada:	3b01      	subs	r3, #1
 8000adc:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8000ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ae0:	f003 0302 	and.w	r3, r3, #2
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d002      	beq.n	8000aee <_PrintInt+0x6e>
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d01c      	beq.n	8000b28 <_PrintInt+0xa8>
 8000aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000af0:	f003 0301 	and.w	r3, r3, #1
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d117      	bne.n	8000b28 <_PrintInt+0xa8>
    if (FieldWidth != 0u) {
 8000af8:	6a3b      	ldr	r3, [r7, #32]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d014      	beq.n	8000b28 <_PrintInt+0xa8>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8000afe:	e00a      	b.n	8000b16 <_PrintInt+0x96>
        FieldWidth--;
 8000b00:	6a3b      	ldr	r3, [r7, #32]
 8000b02:	3b01      	subs	r3, #1
 8000b04:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8000b06:	2120      	movs	r1, #32
 8000b08:	68f8      	ldr	r0, [r7, #12]
 8000b0a:	f7ff fecf 	bl	80008ac <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	68db      	ldr	r3, [r3, #12]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	db07      	blt.n	8000b26 <_PrintInt+0xa6>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8000b16:	6a3b      	ldr	r3, [r7, #32]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d005      	beq.n	8000b28 <_PrintInt+0xa8>
 8000b1c:	697a      	ldr	r2, [r7, #20]
 8000b1e:	6a3b      	ldr	r3, [r7, #32]
 8000b20:	429a      	cmp	r2, r3
 8000b22:	d3ed      	bcc.n	8000b00 <_PrintInt+0x80>
 8000b24:	e000      	b.n	8000b28 <_PrintInt+0xa8>
          break;
 8000b26:	bf00      	nop
    }
  }
  //
  // Print sign if necessary
  //
  if (pBufferDesc->ReturnValue >= 0) {
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	68db      	ldr	r3, [r3, #12]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	db4a      	blt.n	8000bc6 <_PrintInt+0x146>
    if (v < 0) {
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	da07      	bge.n	8000b46 <_PrintInt+0xc6>
      v = -v;
 8000b36:	68bb      	ldr	r3, [r7, #8]
 8000b38:	425b      	negs	r3, r3
 8000b3a:	60bb      	str	r3, [r7, #8]
      _StoreChar(pBufferDesc, '-');
 8000b3c:	212d      	movs	r1, #45	; 0x2d
 8000b3e:	68f8      	ldr	r0, [r7, #12]
 8000b40:	f7ff feb4 	bl	80008ac <_StoreChar>
 8000b44:	e008      	b.n	8000b58 <_PrintInt+0xd8>
    } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8000b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b48:	f003 0304 	and.w	r3, r3, #4
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d003      	beq.n	8000b58 <_PrintInt+0xd8>
      _StoreChar(pBufferDesc, '+');
 8000b50:	212b      	movs	r1, #43	; 0x2b
 8000b52:	68f8      	ldr	r0, [r7, #12]
 8000b54:	f7ff feaa 	bl	80008ac <_StoreChar>
    } else {

    }
    if (pBufferDesc->ReturnValue >= 0) {
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	68db      	ldr	r3, [r3, #12]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	db32      	blt.n	8000bc6 <_PrintInt+0x146>
      //
      // Print leading zeros if necessary
      //
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8000b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b62:	f003 0302 	and.w	r3, r3, #2
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d01f      	beq.n	8000baa <_PrintInt+0x12a>
 8000b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b6c:	f003 0301 	and.w	r3, r3, #1
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d11a      	bne.n	8000baa <_PrintInt+0x12a>
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d117      	bne.n	8000baa <_PrintInt+0x12a>
        if (FieldWidth != 0u) {
 8000b7a:	6a3b      	ldr	r3, [r7, #32]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d014      	beq.n	8000baa <_PrintInt+0x12a>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8000b80:	e00a      	b.n	8000b98 <_PrintInt+0x118>
            FieldWidth--;
 8000b82:	6a3b      	ldr	r3, [r7, #32]
 8000b84:	3b01      	subs	r3, #1
 8000b86:	623b      	str	r3, [r7, #32]
            _StoreChar(pBufferDesc, '0');
 8000b88:	2130      	movs	r1, #48	; 0x30
 8000b8a:	68f8      	ldr	r0, [r7, #12]
 8000b8c:	f7ff fe8e 	bl	80008ac <_StoreChar>
            if (pBufferDesc->ReturnValue < 0) {
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	68db      	ldr	r3, [r3, #12]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	db07      	blt.n	8000ba8 <_PrintInt+0x128>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8000b98:	6a3b      	ldr	r3, [r7, #32]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d005      	beq.n	8000baa <_PrintInt+0x12a>
 8000b9e:	697a      	ldr	r2, [r7, #20]
 8000ba0:	6a3b      	ldr	r3, [r7, #32]
 8000ba2:	429a      	cmp	r2, r3
 8000ba4:	d3ed      	bcc.n	8000b82 <_PrintInt+0x102>
 8000ba6:	e000      	b.n	8000baa <_PrintInt+0x12a>
              break;
 8000ba8:	bf00      	nop
            }
          }
        }
      }
      if (pBufferDesc->ReturnValue >= 0) {
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	68db      	ldr	r3, [r3, #12]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	db09      	blt.n	8000bc6 <_PrintInt+0x146>
        //
        // Print number without sign
        //
        _PrintUnsigned(pBufferDesc, (unsigned)v, Base, NumDigits, FieldWidth, FormatFlags);
 8000bb2:	68b9      	ldr	r1, [r7, #8]
 8000bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bb6:	9301      	str	r3, [sp, #4]
 8000bb8:	6a3b      	ldr	r3, [r7, #32]
 8000bba:	9300      	str	r3, [sp, #0]
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	687a      	ldr	r2, [r7, #4]
 8000bc0:	68f8      	ldr	r0, [r7, #12]
 8000bc2:	f7ff feb1 	bl	8000928 <_PrintUnsigned>
      }
    }
  }
}
 8000bc6:	bf00      	nop
 8000bc8:	3718      	adds	r7, #24
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
	...

08000bd0 <SEGGER_RTT_vprintf>:
*
*  Return values
*    >= 0:  Number of bytes which have been stored in the "Up"-buffer.
*     < 0:  Error
*/
int SEGGER_RTT_vprintf(unsigned BufferIndex, const char * sFormat, va_list * pParamList) {
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b0a2      	sub	sp, #136	; 0x88
 8000bd4:	af02      	add	r7, sp, #8
 8000bd6:	60f8      	str	r0, [r7, #12]
 8000bd8:	60b9      	str	r1, [r7, #8]
 8000bda:	607a      	str	r2, [r7, #4]
  unsigned NumDigits;
  unsigned FormatFlags;
  unsigned FieldWidth;
  char acBuffer[SEGGER_RTT_PRINTF_BUFFER_SIZE];

  BufferDesc.pBuffer        = acBuffer;
 8000bdc:	f107 0310 	add.w	r3, r7, #16
 8000be0:	653b      	str	r3, [r7, #80]	; 0x50
  BufferDesc.BufferSize     = SEGGER_RTT_PRINTF_BUFFER_SIZE;
 8000be2:	2340      	movs	r3, #64	; 0x40
 8000be4:	657b      	str	r3, [r7, #84]	; 0x54
  BufferDesc.Cnt            = 0u;
 8000be6:	2300      	movs	r3, #0
 8000be8:	65bb      	str	r3, [r7, #88]	; 0x58
  BufferDesc.RTTBufferIndex = BufferIndex;
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	663b      	str	r3, [r7, #96]	; 0x60
  BufferDesc.ReturnValue    = 0;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	65fb      	str	r3, [r7, #92]	; 0x5c

  do {
    c = *sFormat;
 8000bf2:	68bb      	ldr	r3, [r7, #8]
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    sFormat++;
 8000bfa:	68bb      	ldr	r3, [r7, #8]
 8000bfc:	3301      	adds	r3, #1
 8000bfe:	60bb      	str	r3, [r7, #8]
    if (c == 0u) {
 8000c00:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	f000 819f 	beq.w	8000f48 <SEGGER_RTT_vprintf+0x378>
      break;
    }
    if (c == '%') {
 8000c0a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8000c0e:	2b25      	cmp	r3, #37	; 0x25
 8000c10:	f040 818d 	bne.w	8000f2e <SEGGER_RTT_vprintf+0x35e>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8000c14:	2300      	movs	r3, #0
 8000c16:	673b      	str	r3, [r7, #112]	; 0x70
      v = 1;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	67bb      	str	r3, [r7, #120]	; 0x78
      do {
        c = *sFormat;
 8000c1c:	68bb      	ldr	r3, [r7, #8]
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
        switch (c) {
 8000c24:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8000c28:	3b23      	subs	r3, #35	; 0x23
 8000c2a:	2b0d      	cmp	r3, #13
 8000c2c:	d83e      	bhi.n	8000cac <SEGGER_RTT_vprintf+0xdc>
 8000c2e:	a201      	add	r2, pc, #4	; (adr r2, 8000c34 <SEGGER_RTT_vprintf+0x64>)
 8000c30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c34:	08000c9d 	.word	0x08000c9d
 8000c38:	08000cad 	.word	0x08000cad
 8000c3c:	08000cad 	.word	0x08000cad
 8000c40:	08000cad 	.word	0x08000cad
 8000c44:	08000cad 	.word	0x08000cad
 8000c48:	08000cad 	.word	0x08000cad
 8000c4c:	08000cad 	.word	0x08000cad
 8000c50:	08000cad 	.word	0x08000cad
 8000c54:	08000c8d 	.word	0x08000c8d
 8000c58:	08000cad 	.word	0x08000cad
 8000c5c:	08000c6d 	.word	0x08000c6d
 8000c60:	08000cad 	.word	0x08000cad
 8000c64:	08000cad 	.word	0x08000cad
 8000c68:	08000c7d 	.word	0x08000c7d
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8000c6c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000c6e:	f043 0301 	orr.w	r3, r3, #1
 8000c72:	673b      	str	r3, [r7, #112]	; 0x70
 8000c74:	68bb      	ldr	r3, [r7, #8]
 8000c76:	3301      	adds	r3, #1
 8000c78:	60bb      	str	r3, [r7, #8]
 8000c7a:	e01a      	b.n	8000cb2 <SEGGER_RTT_vprintf+0xe2>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8000c7c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000c7e:	f043 0302 	orr.w	r3, r3, #2
 8000c82:	673b      	str	r3, [r7, #112]	; 0x70
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	3301      	adds	r3, #1
 8000c88:	60bb      	str	r3, [r7, #8]
 8000c8a:	e012      	b.n	8000cb2 <SEGGER_RTT_vprintf+0xe2>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8000c8c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000c8e:	f043 0304 	orr.w	r3, r3, #4
 8000c92:	673b      	str	r3, [r7, #112]	; 0x70
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	3301      	adds	r3, #1
 8000c98:	60bb      	str	r3, [r7, #8]
 8000c9a:	e00a      	b.n	8000cb2 <SEGGER_RTT_vprintf+0xe2>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8000c9c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000c9e:	f043 0308 	orr.w	r3, r3, #8
 8000ca2:	673b      	str	r3, [r7, #112]	; 0x70
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	3301      	adds	r3, #1
 8000ca8:	60bb      	str	r3, [r7, #8]
 8000caa:	e002      	b.n	8000cb2 <SEGGER_RTT_vprintf+0xe2>
        default:  v = 0; break;
 8000cac:	2300      	movs	r3, #0
 8000cae:	67bb      	str	r3, [r7, #120]	; 0x78
 8000cb0:	bf00      	nop
        }
      } while (v);
 8000cb2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d1b1      	bne.n	8000c1c <SEGGER_RTT_vprintf+0x4c>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	66fb      	str	r3, [r7, #108]	; 0x6c
      do {
        c = *sFormat;
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
        if ((c < '0') || (c > '9')) {
 8000cc4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8000cc8:	2b2f      	cmp	r3, #47	; 0x2f
 8000cca:	d912      	bls.n	8000cf2 <SEGGER_RTT_vprintf+0x122>
 8000ccc:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8000cd0:	2b39      	cmp	r3, #57	; 0x39
 8000cd2:	d80e      	bhi.n	8000cf2 <SEGGER_RTT_vprintf+0x122>
          break;
        }
        sFormat++;
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	3301      	adds	r3, #1
 8000cd8:	60bb      	str	r3, [r7, #8]
        FieldWidth = (FieldWidth * 10u) + ((unsigned)c - '0');
 8000cda:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000cdc:	4613      	mov	r3, r2
 8000cde:	009b      	lsls	r3, r3, #2
 8000ce0:	4413      	add	r3, r2
 8000ce2:	005b      	lsls	r3, r3, #1
 8000ce4:	461a      	mov	r2, r3
 8000ce6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8000cea:	4413      	add	r3, r2
 8000cec:	3b30      	subs	r3, #48	; 0x30
 8000cee:	66fb      	str	r3, [r7, #108]	; 0x6c
        c = *sFormat;
 8000cf0:	e7e4      	b.n	8000cbc <SEGGER_RTT_vprintf+0xec>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	677b      	str	r3, [r7, #116]	; 0x74
      c = *sFormat;
 8000cf6:	68bb      	ldr	r3, [r7, #8]
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
      if (c == '.') {
 8000cfe:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8000d02:	2b2e      	cmp	r3, #46	; 0x2e
 8000d04:	d11d      	bne.n	8000d42 <SEGGER_RTT_vprintf+0x172>
        sFormat++;
 8000d06:	68bb      	ldr	r3, [r7, #8]
 8000d08:	3301      	adds	r3, #1
 8000d0a:	60bb      	str	r3, [r7, #8]
        do {
          c = *sFormat;
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
          if ((c < '0') || (c > '9')) {
 8000d14:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8000d18:	2b2f      	cmp	r3, #47	; 0x2f
 8000d1a:	d912      	bls.n	8000d42 <SEGGER_RTT_vprintf+0x172>
 8000d1c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8000d20:	2b39      	cmp	r3, #57	; 0x39
 8000d22:	d80e      	bhi.n	8000d42 <SEGGER_RTT_vprintf+0x172>
            break;
          }
          sFormat++;
 8000d24:	68bb      	ldr	r3, [r7, #8]
 8000d26:	3301      	adds	r3, #1
 8000d28:	60bb      	str	r3, [r7, #8]
          NumDigits = NumDigits * 10u + ((unsigned)c - '0');
 8000d2a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8000d2c:	4613      	mov	r3, r2
 8000d2e:	009b      	lsls	r3, r3, #2
 8000d30:	4413      	add	r3, r2
 8000d32:	005b      	lsls	r3, r3, #1
 8000d34:	461a      	mov	r2, r3
 8000d36:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8000d3a:	4413      	add	r3, r2
 8000d3c:	3b30      	subs	r3, #48	; 0x30
 8000d3e:	677b      	str	r3, [r7, #116]	; 0x74
          c = *sFormat;
 8000d40:	e7e4      	b.n	8000d0c <SEGGER_RTT_vprintf+0x13c>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8000d42:	68bb      	ldr	r3, [r7, #8]
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
      do {
        if ((c == 'l') || (c == 'h')) {
 8000d4a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8000d4e:	2b6c      	cmp	r3, #108	; 0x6c
 8000d50:	d003      	beq.n	8000d5a <SEGGER_RTT_vprintf+0x18a>
 8000d52:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8000d56:	2b68      	cmp	r3, #104	; 0x68
 8000d58:	d107      	bne.n	8000d6a <SEGGER_RTT_vprintf+0x19a>
          sFormat++;
 8000d5a:	68bb      	ldr	r3, [r7, #8]
 8000d5c:	3301      	adds	r3, #1
 8000d5e:	60bb      	str	r3, [r7, #8]
          c = *sFormat;
 8000d60:	68bb      	ldr	r3, [r7, #8]
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
        if ((c == 'l') || (c == 'h')) {
 8000d68:	e7ef      	b.n	8000d4a <SEGGER_RTT_vprintf+0x17a>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8000d6a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8000d6e:	2b25      	cmp	r3, #37	; 0x25
 8000d70:	f000 80d1 	beq.w	8000f16 <SEGGER_RTT_vprintf+0x346>
 8000d74:	2b25      	cmp	r3, #37	; 0x25
 8000d76:	f2c0 80d5 	blt.w	8000f24 <SEGGER_RTT_vprintf+0x354>
 8000d7a:	2b78      	cmp	r3, #120	; 0x78
 8000d7c:	f300 80d2 	bgt.w	8000f24 <SEGGER_RTT_vprintf+0x354>
 8000d80:	2b58      	cmp	r3, #88	; 0x58
 8000d82:	f2c0 80cf 	blt.w	8000f24 <SEGGER_RTT_vprintf+0x354>
 8000d86:	3b58      	subs	r3, #88	; 0x58
 8000d88:	2b20      	cmp	r3, #32
 8000d8a:	f200 80cb 	bhi.w	8000f24 <SEGGER_RTT_vprintf+0x354>
 8000d8e:	a201      	add	r2, pc, #4	; (adr r2, 8000d94 <SEGGER_RTT_vprintf+0x1c4>)
 8000d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d94:	08000e8b 	.word	0x08000e8b
 8000d98:	08000f25 	.word	0x08000f25
 8000d9c:	08000f25 	.word	0x08000f25
 8000da0:	08000f25 	.word	0x08000f25
 8000da4:	08000f25 	.word	0x08000f25
 8000da8:	08000f25 	.word	0x08000f25
 8000dac:	08000f25 	.word	0x08000f25
 8000db0:	08000f25 	.word	0x08000f25
 8000db4:	08000f25 	.word	0x08000f25
 8000db8:	08000f25 	.word	0x08000f25
 8000dbc:	08000f25 	.word	0x08000f25
 8000dc0:	08000e19 	.word	0x08000e19
 8000dc4:	08000e3f 	.word	0x08000e3f
 8000dc8:	08000f25 	.word	0x08000f25
 8000dcc:	08000f25 	.word	0x08000f25
 8000dd0:	08000f25 	.word	0x08000f25
 8000dd4:	08000f25 	.word	0x08000f25
 8000dd8:	08000f25 	.word	0x08000f25
 8000ddc:	08000f25 	.word	0x08000f25
 8000de0:	08000f25 	.word	0x08000f25
 8000de4:	08000f25 	.word	0x08000f25
 8000de8:	08000f25 	.word	0x08000f25
 8000dec:	08000f25 	.word	0x08000f25
 8000df0:	08000f25 	.word	0x08000f25
 8000df4:	08000ef1 	.word	0x08000ef1
 8000df8:	08000f25 	.word	0x08000f25
 8000dfc:	08000f25 	.word	0x08000f25
 8000e00:	08000eb1 	.word	0x08000eb1
 8000e04:	08000f25 	.word	0x08000f25
 8000e08:	08000e65 	.word	0x08000e65
 8000e0c:	08000f25 	.word	0x08000f25
 8000e10:	08000f25 	.word	0x08000f25
 8000e14:	08000e8b 	.word	0x08000e8b
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	1d19      	adds	r1, r3, #4
 8000e1e:	687a      	ldr	r2, [r7, #4]
 8000e20:	6011      	str	r1, [r2, #0]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	67bb      	str	r3, [r7, #120]	; 0x78
        c0 = (char)v;
 8000e26:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000e28:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        _StoreChar(&BufferDesc, c0);
 8000e2c:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8000e30:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000e34:	4611      	mov	r1, r2
 8000e36:	4618      	mov	r0, r3
 8000e38:	f7ff fd38 	bl	80008ac <_StoreChar>
        break;
 8000e3c:	e073      	b.n	8000f26 <SEGGER_RTT_vprintf+0x356>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	1d19      	adds	r1, r3, #4
 8000e44:	687a      	ldr	r2, [r7, #4]
 8000e46:	6011      	str	r1, [r2, #0]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	67bb      	str	r3, [r7, #120]	; 0x78
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8000e4c:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8000e50:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000e52:	9301      	str	r3, [sp, #4]
 8000e54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000e56:	9300      	str	r3, [sp, #0]
 8000e58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000e5a:	220a      	movs	r2, #10
 8000e5c:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8000e5e:	f7ff fe0f 	bl	8000a80 <_PrintInt>
        break;
 8000e62:	e060      	b.n	8000f26 <SEGGER_RTT_vprintf+0x356>
      case 'u':
        v = va_arg(*pParamList, int);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	1d19      	adds	r1, r3, #4
 8000e6a:	687a      	ldr	r2, [r7, #4]
 8000e6c:	6011      	str	r1, [r2, #0]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	67bb      	str	r3, [r7, #120]	; 0x78
        _PrintUnsigned(&BufferDesc, (unsigned)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8000e72:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8000e74:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8000e78:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000e7a:	9301      	str	r3, [sp, #4]
 8000e7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000e7e:	9300      	str	r3, [sp, #0]
 8000e80:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000e82:	220a      	movs	r2, #10
 8000e84:	f7ff fd50 	bl	8000928 <_PrintUnsigned>
        break;
 8000e88:	e04d      	b.n	8000f26 <SEGGER_RTT_vprintf+0x356>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	1d19      	adds	r1, r3, #4
 8000e90:	687a      	ldr	r2, [r7, #4]
 8000e92:	6011      	str	r1, [r2, #0]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	67bb      	str	r3, [r7, #120]	; 0x78
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8000e98:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8000e9a:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8000e9e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000ea0:	9301      	str	r3, [sp, #4]
 8000ea2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000ea4:	9300      	str	r3, [sp, #0]
 8000ea6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000ea8:	2210      	movs	r2, #16
 8000eaa:	f7ff fd3d 	bl	8000928 <_PrintUnsigned>
        break;
 8000eae:	e03a      	b.n	8000f26 <SEGGER_RTT_vprintf+0x356>
      case 's':
        {
          const char * s = va_arg(*pParamList, const char *);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	1d19      	adds	r1, r3, #4
 8000eb6:	687a      	ldr	r2, [r7, #4]
 8000eb8:	6011      	str	r1, [r2, #0]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	66bb      	str	r3, [r7, #104]	; 0x68
          do {
            c = *s;
 8000ebe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            s++;
 8000ec6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000ec8:	3301      	adds	r3, #1
 8000eca:	66bb      	str	r3, [r7, #104]	; 0x68
            if (c == '\0') {
 8000ecc:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d00b      	beq.n	8000eec <SEGGER_RTT_vprintf+0x31c>
              break;
            }
           _StoreChar(&BufferDesc, c);
 8000ed4:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 8000ed8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000edc:	4611      	mov	r1, r2
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f7ff fce4 	bl	80008ac <_StoreChar>
          } while (BufferDesc.ReturnValue >= 0);
 8000ee4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	dae9      	bge.n	8000ebe <SEGGER_RTT_vprintf+0x2ee>
        }
        break;
 8000eea:	e01c      	b.n	8000f26 <SEGGER_RTT_vprintf+0x356>
              break;
 8000eec:	bf00      	nop
        break;
 8000eee:	e01a      	b.n	8000f26 <SEGGER_RTT_vprintf+0x356>
      case 'p':
        v = va_arg(*pParamList, int);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	1d19      	adds	r1, r3, #4
 8000ef6:	687a      	ldr	r2, [r7, #4]
 8000ef8:	6011      	str	r1, [r2, #0]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	67bb      	str	r3, [r7, #120]	; 0x78
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, 8u, 8u, 0u);
 8000efe:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8000f00:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8000f04:	2300      	movs	r3, #0
 8000f06:	9301      	str	r3, [sp, #4]
 8000f08:	2308      	movs	r3, #8
 8000f0a:	9300      	str	r3, [sp, #0]
 8000f0c:	2308      	movs	r3, #8
 8000f0e:	2210      	movs	r2, #16
 8000f10:	f7ff fd0a 	bl	8000928 <_PrintUnsigned>
        break;
 8000f14:	e007      	b.n	8000f26 <SEGGER_RTT_vprintf+0x356>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8000f16:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000f1a:	2125      	movs	r1, #37	; 0x25
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f7ff fcc5 	bl	80008ac <_StoreChar>
        break;
 8000f22:	e000      	b.n	8000f26 <SEGGER_RTT_vprintf+0x356>
      default:
        break;
 8000f24:	bf00      	nop
      }
      sFormat++;
 8000f26:	68bb      	ldr	r3, [r7, #8]
 8000f28:	3301      	adds	r3, #1
 8000f2a:	60bb      	str	r3, [r7, #8]
 8000f2c:	e007      	b.n	8000f3e <SEGGER_RTT_vprintf+0x36e>
    } else {
      _StoreChar(&BufferDesc, c);
 8000f2e:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 8000f32:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000f36:	4611      	mov	r1, r2
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f7ff fcb7 	bl	80008ac <_StoreChar>
    }
  } while (BufferDesc.ReturnValue >= 0);
 8000f3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	f6bf ae56 	bge.w	8000bf2 <SEGGER_RTT_vprintf+0x22>
 8000f46:	e000      	b.n	8000f4a <SEGGER_RTT_vprintf+0x37a>
      break;
 8000f48:	bf00      	nop

  if (BufferDesc.ReturnValue > 0) {
 8000f4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	dd0d      	ble.n	8000f6c <SEGGER_RTT_vprintf+0x39c>
    //
    // Write remaining data, if any
    //
    if (BufferDesc.Cnt != 0u) {
 8000f50:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d006      	beq.n	8000f64 <SEGGER_RTT_vprintf+0x394>
      SEGGER_RTT_Write(BufferIndex, acBuffer, BufferDesc.Cnt);
 8000f56:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000f58:	f107 0310 	add.w	r3, r7, #16
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	68f8      	ldr	r0, [r7, #12]
 8000f60:	f7ff fc34 	bl	80007cc <SEGGER_RTT_Write>
    }
    BufferDesc.ReturnValue += (int)BufferDesc.Cnt;
 8000f64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000f66:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000f68:	4413      	add	r3, r2
 8000f6a:	65fb      	str	r3, [r7, #92]	; 0x5c
  }
  return BufferDesc.ReturnValue;
 8000f6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3780      	adds	r7, #128	; 0x80
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop

08000f78 <SEGGER_RTT_printf>:
*          u: Print the argument as an unsigned integer
*          x: Print the argument as an hexadecimal integer
*          s: Print the string pointed to by the argument
*          p: Print the argument as an 8-digit hexadecimal integer. (Argument shall be a pointer to void.)
*/
int SEGGER_RTT_printf(unsigned BufferIndex, const char * sFormat, ...) {
 8000f78:	b40e      	push	{r1, r2, r3}
 8000f7a:	b580      	push	{r7, lr}
 8000f7c:	b085      	sub	sp, #20
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	6078      	str	r0, [r7, #4]
  int r;
  va_list ParamList;

  va_start(ParamList, sFormat);
 8000f82:	f107 0320 	add.w	r3, r7, #32
 8000f86:	60bb      	str	r3, [r7, #8]
  r = SEGGER_RTT_vprintf(BufferIndex, sFormat, &ParamList);
 8000f88:	f107 0308 	add.w	r3, r7, #8
 8000f8c:	461a      	mov	r2, r3
 8000f8e:	69f9      	ldr	r1, [r7, #28]
 8000f90:	6878      	ldr	r0, [r7, #4]
 8000f92:	f7ff fe1d 	bl	8000bd0 <SEGGER_RTT_vprintf>
 8000f96:	60f8      	str	r0, [r7, #12]
  va_end(ParamList);
  return r;
 8000f98:	68fb      	ldr	r3, [r7, #12]
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3714      	adds	r7, #20
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000fa4:	b003      	add	sp, #12
 8000fa6:	4770      	bx	lr

08000fa8 <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0

}
 8000fac:	bf00      	nop
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr

08000fb6 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 8000fb6:	b480      	push	{r7}
 8000fb8:	af00      	add	r7, sp, #0
return 0;
 8000fba:	2300      	movs	r3, #0
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
	...

08000fc8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fce:	f000 fe0b 	bl	8001be8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fd2:	f000 f859 	bl	8001088 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fd6:	f000 f97b 	bl	80012d0 <MX_GPIO_Init>
  MX_ETH_Init();
 8000fda:	f000 f8bf 	bl	800115c <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000fde:	f000 f91f 	bl	8001220 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000fe2:	f000 f947 	bl	8001274 <MX_USB_OTG_FS_PCD_Init>
  MX_RNG_Init();
 8000fe6:	f000 f907 	bl	80011f8 <MX_RNG_Init>
  /* USER CODE BEGIN 2 */
	SEGGER_RTT_ConfigUpBuffer(0, NULL, NULL, 0, SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8000fea:	2300      	movs	r3, #0
 8000fec:	9300      	str	r3, [sp, #0]
 8000fee:	2300      	movs	r3, #0
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	2000      	movs	r0, #0
 8000ff6:	f7ff fc0f 	bl	8000818 <SEGGER_RTT_ConfigUpBuffer>
	SEGGER_RTT_printf(0,"Starting... \r\n");
 8000ffa:	4917      	ldr	r1, [pc, #92]	; (8001058 <main+0x90>)
 8000ffc:	2000      	movs	r0, #0
 8000ffe:	f7ff ffbb 	bl	8000f78 <SEGGER_RTT_printf>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001002:	f003 fb43 	bl	800468c <osKernelInitialize>
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
	/* add queues, ... */
  myQueue = xQueueCreate(8, sizeof(queueTask));
 8001006:	2200      	movs	r2, #0
 8001008:	2119      	movs	r1, #25
 800100a:	2008      	movs	r0, #8
 800100c:	f003 fdfe 	bl	8004c0c <xQueueGenericCreate>
 8001010:	4603      	mov	r3, r0
 8001012:	4a12      	ldr	r2, [pc, #72]	; (800105c <main+0x94>)
 8001014:	6013      	str	r3, [r2, #0]
  vQueueAddToRegistry(myQueue, "myQueue");
 8001016:	4b11      	ldr	r3, [pc, #68]	; (800105c <main+0x94>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4911      	ldr	r1, [pc, #68]	; (8001060 <main+0x98>)
 800101c:	4618      	mov	r0, r3
 800101e:	f004 f9dd 	bl	80053dc <vQueueAddToRegistry>

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of TransmitTask1 */
  TransmitTask1Handle = osThreadNew(StartTransmitTask1, NULL, &TransmitTask1_attributes);
 8001022:	4a10      	ldr	r2, [pc, #64]	; (8001064 <main+0x9c>)
 8001024:	2100      	movs	r1, #0
 8001026:	4810      	ldr	r0, [pc, #64]	; (8001068 <main+0xa0>)
 8001028:	f003 fb7a 	bl	8004720 <osThreadNew>
 800102c:	4603      	mov	r3, r0
 800102e:	4a0f      	ldr	r2, [pc, #60]	; (800106c <main+0xa4>)
 8001030:	6013      	str	r3, [r2, #0]

  /* creation of TransmitTask2 */
  TransmitTask2Handle = osThreadNew(StartTransmitTask2, NULL, &TransmitTask2_attributes);
 8001032:	4a0f      	ldr	r2, [pc, #60]	; (8001070 <main+0xa8>)
 8001034:	2100      	movs	r1, #0
 8001036:	480f      	ldr	r0, [pc, #60]	; (8001074 <main+0xac>)
 8001038:	f003 fb72 	bl	8004720 <osThreadNew>
 800103c:	4603      	mov	r3, r0
 800103e:	4a0e      	ldr	r2, [pc, #56]	; (8001078 <main+0xb0>)
 8001040:	6013      	str	r3, [r2, #0]

  /* creation of ReceiveTask */
  ReceiveTaskHandle = osThreadNew(StartReceiveTask, NULL, &ReceiveTask_attributes);
 8001042:	4a0e      	ldr	r2, [pc, #56]	; (800107c <main+0xb4>)
 8001044:	2100      	movs	r1, #0
 8001046:	480e      	ldr	r0, [pc, #56]	; (8001080 <main+0xb8>)
 8001048:	f003 fb6a 	bl	8004720 <osThreadNew>
 800104c:	4603      	mov	r3, r0
 800104e:	4a0d      	ldr	r2, [pc, #52]	; (8001084 <main+0xbc>)
 8001050:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001052:	f003 fb3f 	bl	80046d4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8001056:	e7fe      	b.n	8001056 <main+0x8e>
 8001058:	080074b0 	.word	0x080074b0
 800105c:	20000cbc 	.word	0x20000cbc
 8001060:	080074c0 	.word	0x080074c0
 8001064:	08007644 	.word	0x08007644
 8001068:	0800142d 	.word	0x0800142d
 800106c:	20000cc0 	.word	0x20000cc0
 8001070:	08007668 	.word	0x08007668
 8001074:	08001519 	.word	0x08001519
 8001078:	20000cc4 	.word	0x20000cc4
 800107c:	0800768c 	.word	0x0800768c
 8001080:	08001611 	.word	0x08001611
 8001084:	20000cc8 	.word	0x20000cc8

08001088 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b094      	sub	sp, #80	; 0x50
 800108c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800108e:	f107 0320 	add.w	r3, r7, #32
 8001092:	2230      	movs	r2, #48	; 0x30
 8001094:	2100      	movs	r1, #0
 8001096:	4618      	mov	r0, r3
 8001098:	f006 f8f8 	bl	800728c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800109c:	f107 030c 	add.w	r3, r7, #12
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]
 80010a4:	605a      	str	r2, [r3, #4]
 80010a6:	609a      	str	r2, [r3, #8]
 80010a8:	60da      	str	r2, [r3, #12]
 80010aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010ac:	2300      	movs	r3, #0
 80010ae:	60bb      	str	r3, [r7, #8]
 80010b0:	4b28      	ldr	r3, [pc, #160]	; (8001154 <SystemClock_Config+0xcc>)
 80010b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b4:	4a27      	ldr	r2, [pc, #156]	; (8001154 <SystemClock_Config+0xcc>)
 80010b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010ba:	6413      	str	r3, [r2, #64]	; 0x40
 80010bc:	4b25      	ldr	r3, [pc, #148]	; (8001154 <SystemClock_Config+0xcc>)
 80010be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010c4:	60bb      	str	r3, [r7, #8]
 80010c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010c8:	2300      	movs	r3, #0
 80010ca:	607b      	str	r3, [r7, #4]
 80010cc:	4b22      	ldr	r3, [pc, #136]	; (8001158 <SystemClock_Config+0xd0>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a21      	ldr	r2, [pc, #132]	; (8001158 <SystemClock_Config+0xd0>)
 80010d2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80010d6:	6013      	str	r3, [r2, #0]
 80010d8:	4b1f      	ldr	r3, [pc, #124]	; (8001158 <SystemClock_Config+0xd0>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010e0:	607b      	str	r3, [r7, #4]
 80010e2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010e4:	2301      	movs	r3, #1
 80010e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80010e8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80010ec:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010ee:	2302      	movs	r3, #2
 80010f0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010f2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80010f8:	2304      	movs	r3, #4
 80010fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80010fc:	23a8      	movs	r3, #168	; 0xa8
 80010fe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001100:	2302      	movs	r3, #2
 8001102:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001104:	2307      	movs	r3, #7
 8001106:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001108:	f107 0320 	add.w	r3, r7, #32
 800110c:	4618      	mov	r0, r3
 800110e:	f001 fcbd 	bl	8002a8c <HAL_RCC_OscConfig>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001118:	f000 fad2 	bl	80016c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800111c:	230f      	movs	r3, #15
 800111e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001120:	2302      	movs	r3, #2
 8001122:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001124:	2300      	movs	r3, #0
 8001126:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001128:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800112c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800112e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001132:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001134:	f107 030c 	add.w	r3, r7, #12
 8001138:	2105      	movs	r1, #5
 800113a:	4618      	mov	r0, r3
 800113c:	f001 ff1e 	bl	8002f7c <HAL_RCC_ClockConfig>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001146:	f000 fabb 	bl	80016c0 <Error_Handler>
  }
}
 800114a:	bf00      	nop
 800114c:	3750      	adds	r7, #80	; 0x50
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	40023800 	.word	0x40023800
 8001158:	40007000 	.word	0x40007000

0800115c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001160:	4b1f      	ldr	r3, [pc, #124]	; (80011e0 <MX_ETH_Init+0x84>)
 8001162:	4a20      	ldr	r2, [pc, #128]	; (80011e4 <MX_ETH_Init+0x88>)
 8001164:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8001166:	4b20      	ldr	r3, [pc, #128]	; (80011e8 <MX_ETH_Init+0x8c>)
 8001168:	2200      	movs	r2, #0
 800116a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 800116c:	4b1e      	ldr	r3, [pc, #120]	; (80011e8 <MX_ETH_Init+0x8c>)
 800116e:	2280      	movs	r2, #128	; 0x80
 8001170:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8001172:	4b1d      	ldr	r3, [pc, #116]	; (80011e8 <MX_ETH_Init+0x8c>)
 8001174:	22e1      	movs	r2, #225	; 0xe1
 8001176:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001178:	4b1b      	ldr	r3, [pc, #108]	; (80011e8 <MX_ETH_Init+0x8c>)
 800117a:	2200      	movs	r2, #0
 800117c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800117e:	4b1a      	ldr	r3, [pc, #104]	; (80011e8 <MX_ETH_Init+0x8c>)
 8001180:	2200      	movs	r2, #0
 8001182:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001184:	4b18      	ldr	r3, [pc, #96]	; (80011e8 <MX_ETH_Init+0x8c>)
 8001186:	2200      	movs	r2, #0
 8001188:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800118a:	4b15      	ldr	r3, [pc, #84]	; (80011e0 <MX_ETH_Init+0x84>)
 800118c:	4a16      	ldr	r2, [pc, #88]	; (80011e8 <MX_ETH_Init+0x8c>)
 800118e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001190:	4b13      	ldr	r3, [pc, #76]	; (80011e0 <MX_ETH_Init+0x84>)
 8001192:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001196:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001198:	4b11      	ldr	r3, [pc, #68]	; (80011e0 <MX_ETH_Init+0x84>)
 800119a:	4a14      	ldr	r2, [pc, #80]	; (80011ec <MX_ETH_Init+0x90>)
 800119c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800119e:	4b10      	ldr	r3, [pc, #64]	; (80011e0 <MX_ETH_Init+0x84>)
 80011a0:	4a13      	ldr	r2, [pc, #76]	; (80011f0 <MX_ETH_Init+0x94>)
 80011a2:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80011a4:	4b0e      	ldr	r3, [pc, #56]	; (80011e0 <MX_ETH_Init+0x84>)
 80011a6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80011aa:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80011ac:	480c      	ldr	r0, [pc, #48]	; (80011e0 <MX_ETH_Init+0x84>)
 80011ae:	f000 fe63 	bl	8001e78 <HAL_ETH_Init>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80011b8:	f000 fa82 	bl	80016c0 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80011bc:	2238      	movs	r2, #56	; 0x38
 80011be:	2100      	movs	r1, #0
 80011c0:	480c      	ldr	r0, [pc, #48]	; (80011f4 <MX_ETH_Init+0x98>)
 80011c2:	f006 f863 	bl	800728c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80011c6:	4b0b      	ldr	r3, [pc, #44]	; (80011f4 <MX_ETH_Init+0x98>)
 80011c8:	2221      	movs	r2, #33	; 0x21
 80011ca:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80011cc:	4b09      	ldr	r3, [pc, #36]	; (80011f4 <MX_ETH_Init+0x98>)
 80011ce:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80011d2:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80011d4:	4b07      	ldr	r3, [pc, #28]	; (80011f4 <MX_ETH_Init+0x98>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80011da:	bf00      	nop
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	200006ac 	.word	0x200006ac
 80011e4:	40028000 	.word	0x40028000
 80011e8:	20000ccc 	.word	0x20000ccc
 80011ec:	2000060c 	.word	0x2000060c
 80011f0:	2000056c 	.word	0x2000056c
 80011f4:	20000534 	.word	0x20000534

080011f8 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80011fc:	4b06      	ldr	r3, [pc, #24]	; (8001218 <MX_RNG_Init+0x20>)
 80011fe:	4a07      	ldr	r2, [pc, #28]	; (800121c <MX_RNG_Init+0x24>)
 8001200:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001202:	4805      	ldr	r0, [pc, #20]	; (8001218 <MX_RNG_Init+0x20>)
 8001204:	f002 f90c 	bl	8003420 <HAL_RNG_Init>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 800120e:	f000 fa57 	bl	80016c0 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8001212:	bf00      	nop
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	2000075c 	.word	0x2000075c
 800121c:	50060800 	.word	0x50060800

08001220 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001224:	4b11      	ldr	r3, [pc, #68]	; (800126c <MX_USART3_UART_Init+0x4c>)
 8001226:	4a12      	ldr	r2, [pc, #72]	; (8001270 <MX_USART3_UART_Init+0x50>)
 8001228:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800122a:	4b10      	ldr	r3, [pc, #64]	; (800126c <MX_USART3_UART_Init+0x4c>)
 800122c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001230:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001232:	4b0e      	ldr	r3, [pc, #56]	; (800126c <MX_USART3_UART_Init+0x4c>)
 8001234:	2200      	movs	r2, #0
 8001236:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001238:	4b0c      	ldr	r3, [pc, #48]	; (800126c <MX_USART3_UART_Init+0x4c>)
 800123a:	2200      	movs	r2, #0
 800123c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800123e:	4b0b      	ldr	r3, [pc, #44]	; (800126c <MX_USART3_UART_Init+0x4c>)
 8001240:	2200      	movs	r2, #0
 8001242:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001244:	4b09      	ldr	r3, [pc, #36]	; (800126c <MX_USART3_UART_Init+0x4c>)
 8001246:	220c      	movs	r2, #12
 8001248:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800124a:	4b08      	ldr	r3, [pc, #32]	; (800126c <MX_USART3_UART_Init+0x4c>)
 800124c:	2200      	movs	r2, #0
 800124e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001250:	4b06      	ldr	r3, [pc, #24]	; (800126c <MX_USART3_UART_Init+0x4c>)
 8001252:	2200      	movs	r2, #0
 8001254:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001256:	4805      	ldr	r0, [pc, #20]	; (800126c <MX_USART3_UART_Init+0x4c>)
 8001258:	f002 fc10 	bl	8003a7c <HAL_UART_Init>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001262:	f000 fa2d 	bl	80016c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001266:	bf00      	nop
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	2000076c 	.word	0x2000076c
 8001270:	40004800 	.word	0x40004800

08001274 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001278:	4b14      	ldr	r3, [pc, #80]	; (80012cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800127a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800127e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8001280:	4b12      	ldr	r3, [pc, #72]	; (80012cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001282:	2204      	movs	r2, #4
 8001284:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001286:	4b11      	ldr	r3, [pc, #68]	; (80012cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001288:	2202      	movs	r2, #2
 800128a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800128c:	4b0f      	ldr	r3, [pc, #60]	; (80012cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800128e:	2200      	movs	r2, #0
 8001290:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001292:	4b0e      	ldr	r3, [pc, #56]	; (80012cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001294:	2202      	movs	r2, #2
 8001296:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001298:	4b0c      	ldr	r3, [pc, #48]	; (80012cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800129a:	2201      	movs	r2, #1
 800129c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800129e:	4b0b      	ldr	r3, [pc, #44]	; (80012cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80012a4:	4b09      	ldr	r3, [pc, #36]	; (80012cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80012aa:	4b08      	ldr	r3, [pc, #32]	; (80012cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012ac:	2201      	movs	r2, #1
 80012ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80012b0:	4b06      	ldr	r3, [pc, #24]	; (80012cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80012b6:	4805      	ldr	r0, [pc, #20]	; (80012cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012b8:	f001 facb 	bl	8002852 <HAL_PCD_Init>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80012c2:	f000 f9fd 	bl	80016c0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80012c6:	bf00      	nop
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	200007b0 	.word	0x200007b0

080012d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b08c      	sub	sp, #48	; 0x30
 80012d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d6:	f107 031c 	add.w	r3, r7, #28
 80012da:	2200      	movs	r2, #0
 80012dc:	601a      	str	r2, [r3, #0]
 80012de:	605a      	str	r2, [r3, #4]
 80012e0:	609a      	str	r2, [r3, #8]
 80012e2:	60da      	str	r2, [r3, #12]
 80012e4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012e6:	2300      	movs	r3, #0
 80012e8:	61bb      	str	r3, [r7, #24]
 80012ea:	4b4c      	ldr	r3, [pc, #304]	; (800141c <MX_GPIO_Init+0x14c>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	4a4b      	ldr	r2, [pc, #300]	; (800141c <MX_GPIO_Init+0x14c>)
 80012f0:	f043 0304 	orr.w	r3, r3, #4
 80012f4:	6313      	str	r3, [r2, #48]	; 0x30
 80012f6:	4b49      	ldr	r3, [pc, #292]	; (800141c <MX_GPIO_Init+0x14c>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fa:	f003 0304 	and.w	r3, r3, #4
 80012fe:	61bb      	str	r3, [r7, #24]
 8001300:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001302:	2300      	movs	r3, #0
 8001304:	617b      	str	r3, [r7, #20]
 8001306:	4b45      	ldr	r3, [pc, #276]	; (800141c <MX_GPIO_Init+0x14c>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130a:	4a44      	ldr	r2, [pc, #272]	; (800141c <MX_GPIO_Init+0x14c>)
 800130c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001310:	6313      	str	r3, [r2, #48]	; 0x30
 8001312:	4b42      	ldr	r3, [pc, #264]	; (800141c <MX_GPIO_Init+0x14c>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001316:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800131a:	617b      	str	r3, [r7, #20]
 800131c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800131e:	2300      	movs	r3, #0
 8001320:	613b      	str	r3, [r7, #16]
 8001322:	4b3e      	ldr	r3, [pc, #248]	; (800141c <MX_GPIO_Init+0x14c>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001326:	4a3d      	ldr	r2, [pc, #244]	; (800141c <MX_GPIO_Init+0x14c>)
 8001328:	f043 0301 	orr.w	r3, r3, #1
 800132c:	6313      	str	r3, [r2, #48]	; 0x30
 800132e:	4b3b      	ldr	r3, [pc, #236]	; (800141c <MX_GPIO_Init+0x14c>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001332:	f003 0301 	and.w	r3, r3, #1
 8001336:	613b      	str	r3, [r7, #16]
 8001338:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800133a:	2300      	movs	r3, #0
 800133c:	60fb      	str	r3, [r7, #12]
 800133e:	4b37      	ldr	r3, [pc, #220]	; (800141c <MX_GPIO_Init+0x14c>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001342:	4a36      	ldr	r2, [pc, #216]	; (800141c <MX_GPIO_Init+0x14c>)
 8001344:	f043 0302 	orr.w	r3, r3, #2
 8001348:	6313      	str	r3, [r2, #48]	; 0x30
 800134a:	4b34      	ldr	r3, [pc, #208]	; (800141c <MX_GPIO_Init+0x14c>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134e:	f003 0302 	and.w	r3, r3, #2
 8001352:	60fb      	str	r3, [r7, #12]
 8001354:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001356:	2300      	movs	r3, #0
 8001358:	60bb      	str	r3, [r7, #8]
 800135a:	4b30      	ldr	r3, [pc, #192]	; (800141c <MX_GPIO_Init+0x14c>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135e:	4a2f      	ldr	r2, [pc, #188]	; (800141c <MX_GPIO_Init+0x14c>)
 8001360:	f043 0308 	orr.w	r3, r3, #8
 8001364:	6313      	str	r3, [r2, #48]	; 0x30
 8001366:	4b2d      	ldr	r3, [pc, #180]	; (800141c <MX_GPIO_Init+0x14c>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136a:	f003 0308 	and.w	r3, r3, #8
 800136e:	60bb      	str	r3, [r7, #8]
 8001370:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001372:	2300      	movs	r3, #0
 8001374:	607b      	str	r3, [r7, #4]
 8001376:	4b29      	ldr	r3, [pc, #164]	; (800141c <MX_GPIO_Init+0x14c>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137a:	4a28      	ldr	r2, [pc, #160]	; (800141c <MX_GPIO_Init+0x14c>)
 800137c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001380:	6313      	str	r3, [r2, #48]	; 0x30
 8001382:	4b26      	ldr	r3, [pc, #152]	; (800141c <MX_GPIO_Init+0x14c>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001386:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800138a:	607b      	str	r3, [r7, #4]
 800138c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800138e:	2200      	movs	r2, #0
 8001390:	f244 0181 	movw	r1, #16513	; 0x4081
 8001394:	4822      	ldr	r0, [pc, #136]	; (8001420 <MX_GPIO_Init+0x150>)
 8001396:	f001 fa43 	bl	8002820 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800139a:	2200      	movs	r2, #0
 800139c:	2140      	movs	r1, #64	; 0x40
 800139e:	4821      	ldr	r0, [pc, #132]	; (8001424 <MX_GPIO_Init+0x154>)
 80013a0:	f001 fa3e 	bl	8002820 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80013a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013aa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80013ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b0:	2300      	movs	r3, #0
 80013b2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80013b4:	f107 031c 	add.w	r3, r7, #28
 80013b8:	4619      	mov	r1, r3
 80013ba:	481b      	ldr	r0, [pc, #108]	; (8001428 <MX_GPIO_Init+0x158>)
 80013bc:	f001 f884 	bl	80024c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80013c0:	f244 0381 	movw	r3, #16513	; 0x4081
 80013c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013c6:	2301      	movs	r3, #1
 80013c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ca:	2300      	movs	r3, #0
 80013cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ce:	2300      	movs	r3, #0
 80013d0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013d2:	f107 031c 	add.w	r3, r7, #28
 80013d6:	4619      	mov	r1, r3
 80013d8:	4811      	ldr	r0, [pc, #68]	; (8001420 <MX_GPIO_Init+0x150>)
 80013da:	f001 f875 	bl	80024c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80013de:	2340      	movs	r3, #64	; 0x40
 80013e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013e2:	2301      	movs	r3, #1
 80013e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e6:	2300      	movs	r3, #0
 80013e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ea:	2300      	movs	r3, #0
 80013ec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80013ee:	f107 031c 	add.w	r3, r7, #28
 80013f2:	4619      	mov	r1, r3
 80013f4:	480b      	ldr	r0, [pc, #44]	; (8001424 <MX_GPIO_Init+0x154>)
 80013f6:	f001 f867 	bl	80024c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80013fa:	2380      	movs	r3, #128	; 0x80
 80013fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013fe:	2300      	movs	r3, #0
 8001400:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001402:	2300      	movs	r3, #0
 8001404:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001406:	f107 031c 	add.w	r3, r7, #28
 800140a:	4619      	mov	r1, r3
 800140c:	4805      	ldr	r0, [pc, #20]	; (8001424 <MX_GPIO_Init+0x154>)
 800140e:	f001 f85b 	bl	80024c8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001412:	bf00      	nop
 8001414:	3730      	adds	r7, #48	; 0x30
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	40023800 	.word	0x40023800
 8001420:	40020400 	.word	0x40020400
 8001424:	40021800 	.word	0x40021800
 8001428:	40020800 	.word	0x40020800

0800142c <StartTransmitTask1>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTransmitTask1 */
void StartTransmitTask1(void *argument)
{
 800142c:	b590      	push	{r4, r7, lr}
 800142e:	b087      	sub	sp, #28
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	queueTask *task1 = pvPortMalloc(sizeof(queueTask));
 8001434:	2019      	movs	r0, #25
 8001436:	f005 fd3f 	bl	8006eb8 <pvPortMalloc>
 800143a:	4603      	mov	r3, r0
 800143c:	613b      	str	r3, [r7, #16]
		task1->id = 1;
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	2201      	movs	r2, #1
 8001442:	701a      	strb	r2, [r3, #0]
		task1->led1 = 1;
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	2201      	movs	r2, #1
 8001448:	705a      	strb	r2, [r3, #1]
		task1->led2 = 0;
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	2200      	movs	r2, #0
 800144e:	709a      	strb	r2, [r3, #2]
		task1->led3 = 1;
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	2201      	movs	r2, #1
 8001454:	70da      	strb	r2, [r3, #3]
		strcpy(task1->msg, "Transmitter 1");
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	3304      	adds	r3, #4
 800145a:	4a28      	ldr	r2, [pc, #160]	; (80014fc <StartTransmitTask1+0xd0>)
 800145c:	461c      	mov	r4, r3
 800145e:	4613      	mov	r3, r2
 8001460:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001462:	6020      	str	r0, [r4, #0]
 8001464:	6061      	str	r1, [r4, #4]
 8001466:	60a2      	str	r2, [r4, #8]
 8001468:	881b      	ldrh	r3, [r3, #0]
 800146a:	81a3      	strh	r3, [r4, #12]
		task1->delay = 1;
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	2201      	movs	r2, #1
 8001470:	761a      	strb	r2, [r3, #24]
	uint32_t rnd = 10000;
 8001472:	f242 7310 	movw	r3, #10000	; 0x2710
 8001476:	60fb      	str	r3, [r7, #12]
	/* Infinite loop */
	for(;;)
	{
		HAL_RNG_GenerateRandomNumber(&hrng, &rnd);
 8001478:	f107 030c 	add.w	r3, r7, #12
 800147c:	4619      	mov	r1, r3
 800147e:	4820      	ldr	r0, [pc, #128]	; (8001500 <StartTransmitTask1+0xd4>)
 8001480:	f001 fff8 	bl	8003474 <HAL_RNG_GenerateRandomNumber>
		task1->delay = rnd%10000;
 8001484:	68fa      	ldr	r2, [r7, #12]
 8001486:	4b1f      	ldr	r3, [pc, #124]	; (8001504 <StartTransmitTask1+0xd8>)
 8001488:	fba3 1302 	umull	r1, r3, r3, r2
 800148c:	0b5b      	lsrs	r3, r3, #13
 800148e:	f242 7110 	movw	r1, #10000	; 0x2710
 8001492:	fb01 f303 	mul.w	r3, r1, r3
 8001496:	1ad3      	subs	r3, r2, r3
 8001498:	693a      	ldr	r2, [r7, #16]
 800149a:	b2db      	uxtb	r3, r3
 800149c:	7613      	strb	r3, [r2, #24]
		queueTask* rTask = task1;	// use to pass by reference.
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	617b      	str	r3, [r7, #20]
		if (xQueueSend(myQueue, &task1, 0) != pdPASS){
 80014a2:	4b19      	ldr	r3, [pc, #100]	; (8001508 <StartTransmitTask1+0xdc>)
 80014a4:	6818      	ldr	r0, [r3, #0]
 80014a6:	f107 0110 	add.w	r1, r7, #16
 80014aa:	2300      	movs	r3, #0
 80014ac:	2200      	movs	r2, #0
 80014ae:	f003 fc0b 	bl	8004cc8 <xQueueGenericSend>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d00c      	beq.n	80014d2 <StartTransmitTask1+0xa6>
			SEGGER_RTT_printf(0, "TX1 error: %s is full (Task%d not sent)!\r\n", pcQueueGetName(myQueue), task1->id);;  // xQueueSend(queueHandle, void* pvItemToQueue, xTickstoWait)
 80014b8:	4b13      	ldr	r3, [pc, #76]	; (8001508 <StartTransmitTask1+0xdc>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4618      	mov	r0, r3
 80014be:	f003 ffb7 	bl	8005430 <pcQueueGetName>
 80014c2:	4602      	mov	r2, r0
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	4910      	ldr	r1, [pc, #64]	; (800150c <StartTransmitTask1+0xe0>)
 80014ca:	2000      	movs	r0, #0
 80014cc:	f7ff fd54 	bl	8000f78 <SEGGER_RTT_printf>
 80014d0:	e006      	b.n	80014e0 <StartTransmitTask1+0xb4>
		}
		else SEGGER_RTT_printf(0, "TX1: Task%d not sent\r\n", task1->id);
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	461a      	mov	r2, r3
 80014d8:	490d      	ldr	r1, [pc, #52]	; (8001510 <StartTransmitTask1+0xe4>)
 80014da:	2000      	movs	r0, #0
 80014dc:	f7ff fd4c 	bl	8000f78 <SEGGER_RTT_printf>
		SEGGER_RTT_printf(0, "DELAY1: %d\r\n", task1->delay);
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	7e1b      	ldrb	r3, [r3, #24]
 80014e4:	461a      	mov	r2, r3
 80014e6:	490b      	ldr	r1, [pc, #44]	; (8001514 <StartTransmitTask1+0xe8>)
 80014e8:	2000      	movs	r0, #0
 80014ea:	f7ff fd45 	bl	8000f78 <SEGGER_RTT_printf>
		osDelay(task1->delay);
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	7e1b      	ldrb	r3, [r3, #24]
 80014f2:	4618      	mov	r0, r3
 80014f4:	f003 f9a6 	bl	8004844 <osDelay>
	{
 80014f8:	e7be      	b.n	8001478 <StartTransmitTask1+0x4c>
 80014fa:	bf00      	nop
 80014fc:	080074cc 	.word	0x080074cc
 8001500:	2000075c 	.word	0x2000075c
 8001504:	d1b71759 	.word	0xd1b71759
 8001508:	20000cbc 	.word	0x20000cbc
 800150c:	080074dc 	.word	0x080074dc
 8001510:	08007508 	.word	0x08007508
 8001514:	08007520 	.word	0x08007520

08001518 <StartTransmitTask2>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTransmitTask2 */
void StartTransmitTask2(void *argument)
{
 8001518:	b590      	push	{r4, r7, lr}
 800151a:	b089      	sub	sp, #36	; 0x24
 800151c:	af02      	add	r7, sp, #8
 800151e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTransmitTask2 */
	queueTask *task2 = pvPortMalloc(sizeof(queueTask));
 8001520:	2019      	movs	r0, #25
 8001522:	f005 fcc9 	bl	8006eb8 <pvPortMalloc>
 8001526:	4603      	mov	r3, r0
 8001528:	613b      	str	r3, [r7, #16]
		task2->id = 1;
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	2201      	movs	r2, #1
 800152e:	701a      	strb	r2, [r3, #0]
		task2->led1 = 0;
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	2200      	movs	r2, #0
 8001534:	705a      	strb	r2, [r3, #1]
		task2->led2 = 1;
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	2201      	movs	r2, #1
 800153a:	709a      	strb	r2, [r3, #2]
		task2->led3 = 0;
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	2200      	movs	r2, #0
 8001540:	70da      	strb	r2, [r3, #3]
		strcpy(task2->msg, "Transmitter 2");
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	3304      	adds	r3, #4
 8001546:	4a2b      	ldr	r2, [pc, #172]	; (80015f4 <StartTransmitTask2+0xdc>)
 8001548:	461c      	mov	r4, r3
 800154a:	4613      	mov	r3, r2
 800154c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800154e:	6020      	str	r0, [r4, #0]
 8001550:	6061      	str	r1, [r4, #4]
 8001552:	60a2      	str	r2, [r4, #8]
 8001554:	881b      	ldrh	r3, [r3, #0]
 8001556:	81a3      	strh	r3, [r4, #12]
		task2->delay = 1;
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	2201      	movs	r2, #1
 800155c:	761a      	strb	r2, [r3, #24]
	uint32_t rnd = 10000;
 800155e:	f242 7310 	movw	r3, #10000	; 0x2710
 8001562:	60fb      	str	r3, [r7, #12]
	/* Infinite loop */
	for(;;)
	{
		HAL_RNG_GenerateRandomNumber(&hrng, &rnd);
 8001564:	f107 030c 	add.w	r3, r7, #12
 8001568:	4619      	mov	r1, r3
 800156a:	4823      	ldr	r0, [pc, #140]	; (80015f8 <StartTransmitTask2+0xe0>)
 800156c:	f001 ff82 	bl	8003474 <HAL_RNG_GenerateRandomNumber>
		task2->delay = rnd%10000;
 8001570:	68fa      	ldr	r2, [r7, #12]
 8001572:	4b22      	ldr	r3, [pc, #136]	; (80015fc <StartTransmitTask2+0xe4>)
 8001574:	fba3 1302 	umull	r1, r3, r3, r2
 8001578:	0b5b      	lsrs	r3, r3, #13
 800157a:	f242 7110 	movw	r1, #10000	; 0x2710
 800157e:	fb01 f303 	mul.w	r3, r1, r3
 8001582:	1ad3      	subs	r3, r2, r3
 8001584:	693a      	ldr	r2, [r7, #16]
 8001586:	b2db      	uxtb	r3, r3
 8001588:	7613      	strb	r3, [r2, #24]
		queueTask* rTask = task2;
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	617b      	str	r3, [r7, #20]
		if (xQueueSend(myQueue, &task2, 0) != pdPASS){
 800158e:	4b1c      	ldr	r3, [pc, #112]	; (8001600 <StartTransmitTask2+0xe8>)
 8001590:	6818      	ldr	r0, [r3, #0]
 8001592:	f107 0110 	add.w	r1, r7, #16
 8001596:	2300      	movs	r3, #0
 8001598:	2200      	movs	r2, #0
 800159a:	f003 fb95 	bl	8004cc8 <xQueueGenericSend>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	d011      	beq.n	80015c8 <StartTransmitTask2+0xb0>
			SEGGER_RTT_printf(0, "TX2 error: %s is full (Task%d not sent from %s)!\r\n", pcQueueGetName(myQueue), task2->id, task2->msg);;  // xQueueSend(queueHandle, void* pvItemToQueue, xTickstoWait)
 80015a4:	4b16      	ldr	r3, [pc, #88]	; (8001600 <StartTransmitTask2+0xe8>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4618      	mov	r0, r3
 80015aa:	f003 ff41 	bl	8005430 <pcQueueGetName>
 80015ae:	4602      	mov	r2, r0
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	4619      	mov	r1, r3
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	3304      	adds	r3, #4
 80015ba:	9300      	str	r3, [sp, #0]
 80015bc:	460b      	mov	r3, r1
 80015be:	4911      	ldr	r1, [pc, #68]	; (8001604 <StartTransmitTask2+0xec>)
 80015c0:	2000      	movs	r0, #0
 80015c2:	f7ff fcd9 	bl	8000f78 <SEGGER_RTT_printf>
 80015c6:	e008      	b.n	80015da <StartTransmitTask2+0xc2>
		}
		else SEGGER_RTT_printf(0, "TX2: Task%d not sent from %s\r\n", task2->id, task2->msg);
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	461a      	mov	r2, r3
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	3304      	adds	r3, #4
 80015d2:	490d      	ldr	r1, [pc, #52]	; (8001608 <StartTransmitTask2+0xf0>)
 80015d4:	2000      	movs	r0, #0
 80015d6:	f7ff fccf 	bl	8000f78 <SEGGER_RTT_printf>
		SEGGER_RTT_printf(0, "DELAY2: %d\r\n", task2->delay);
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	7e1b      	ldrb	r3, [r3, #24]
 80015de:	461a      	mov	r2, r3
 80015e0:	490a      	ldr	r1, [pc, #40]	; (800160c <StartTransmitTask2+0xf4>)
 80015e2:	2000      	movs	r0, #0
 80015e4:	f7ff fcc8 	bl	8000f78 <SEGGER_RTT_printf>
		osDelay(task2->delay);
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	7e1b      	ldrb	r3, [r3, #24]
 80015ec:	4618      	mov	r0, r3
 80015ee:	f003 f929 	bl	8004844 <osDelay>
	{
 80015f2:	e7b7      	b.n	8001564 <StartTransmitTask2+0x4c>
 80015f4:	08007530 	.word	0x08007530
 80015f8:	2000075c 	.word	0x2000075c
 80015fc:	d1b71759 	.word	0xd1b71759
 8001600:	20000cbc 	.word	0x20000cbc
 8001604:	08007540 	.word	0x08007540
 8001608:	08007574 	.word	0x08007574
 800160c:	08007594 	.word	0x08007594

08001610 <StartReceiveTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartReceiveTask */
void StartReceiveTask(void *argument)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b084      	sub	sp, #16
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
	//QUEUE DATA:
	queueTask* rTask;
	/* Infinite loop */
	for(;;)
	{
		if (xQueueReceive(myQueue, &rTask, 100) != pdPASS){
 8001618:	4b1c      	ldr	r3, [pc, #112]	; (800168c <StartReceiveTask+0x7c>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f107 010c 	add.w	r1, r7, #12
 8001620:	2264      	movs	r2, #100	; 0x64
 8001622:	4618      	mov	r0, r3
 8001624:	f003 fcea 	bl	8004ffc <xQueueReceive>
 8001628:	4603      	mov	r3, r0
 800162a:	2b01      	cmp	r3, #1
 800162c:	d00b      	beq.n	8001646 <StartReceiveTask+0x36>
			SEGGER_RTT_printf(0, "RX ERROR: %s is empty\r\n", pcQueueGetName(myQueue));
 800162e:	4b17      	ldr	r3, [pc, #92]	; (800168c <StartReceiveTask+0x7c>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4618      	mov	r0, r3
 8001634:	f003 fefc 	bl	8005430 <pcQueueGetName>
 8001638:	4603      	mov	r3, r0
 800163a:	461a      	mov	r2, r3
 800163c:	4914      	ldr	r1, [pc, #80]	; (8001690 <StartReceiveTask+0x80>)
 800163e:	2000      	movs	r0, #0
 8001640:	f7ff fc9a 	bl	8000f78 <SEGGER_RTT_printf>
 8001644:	e01d      	b.n	8001682 <StartReceiveTask+0x72>
		}
		else {
			SEGGER_RTT_printf(0, "RX: from %s with source ID: %d\r\n", rTask->msg, rTask->id);
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	1d1a      	adds	r2, r3, #4
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	4911      	ldr	r1, [pc, #68]	; (8001694 <StartReceiveTask+0x84>)
 8001650:	2000      	movs	r0, #0
 8001652:	f7ff fc91 	bl	8000f78 <SEGGER_RTT_printf>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, rTask->led1);	// Green LED1
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	785b      	ldrb	r3, [r3, #1]
 800165a:	461a      	mov	r2, r3
 800165c:	2101      	movs	r1, #1
 800165e:	480e      	ldr	r0, [pc, #56]	; (8001698 <StartReceiveTask+0x88>)
 8001660:	f001 f8de 	bl	8002820 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, rTask->led2);	// Blue LED2
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	789b      	ldrb	r3, [r3, #2]
 8001668:	461a      	mov	r2, r3
 800166a:	2180      	movs	r1, #128	; 0x80
 800166c:	480a      	ldr	r0, [pc, #40]	; (8001698 <StartReceiveTask+0x88>)
 800166e:	f001 f8d7 	bl	8002820 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, rTask->led3);	// Red LED3
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	78db      	ldrb	r3, [r3, #3]
 8001676:	461a      	mov	r2, r3
 8001678:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800167c:	4806      	ldr	r0, [pc, #24]	; (8001698 <StartReceiveTask+0x88>)
 800167e:	f001 f8cf 	bl	8002820 <HAL_GPIO_WritePin>
		}
		osDelay(1000);
 8001682:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001686:	f003 f8dd 	bl	8004844 <osDelay>
		if (xQueueReceive(myQueue, &rTask, 100) != pdPASS){
 800168a:	e7c5      	b.n	8001618 <StartReceiveTask+0x8>
 800168c:	20000cbc 	.word	0x20000cbc
 8001690:	080075a4 	.word	0x080075a4
 8001694:	080075bc 	.word	0x080075bc
 8001698:	40020400 	.word	0x40020400

0800169c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a04      	ldr	r2, [pc, #16]	; (80016bc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d101      	bne.n	80016b2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80016ae:	f000 fabd 	bl	8001c2c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80016b2:	bf00      	nop
 80016b4:	3708      	adds	r7, #8
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	40001000 	.word	0x40001000

080016c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016c4:	b672      	cpsid	i
}
 80016c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80016c8:	e7fe      	b.n	80016c8 <Error_Handler+0x8>
	...

080016cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016d2:	2300      	movs	r3, #0
 80016d4:	607b      	str	r3, [r7, #4]
 80016d6:	4b12      	ldr	r3, [pc, #72]	; (8001720 <HAL_MspInit+0x54>)
 80016d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016da:	4a11      	ldr	r2, [pc, #68]	; (8001720 <HAL_MspInit+0x54>)
 80016dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016e0:	6453      	str	r3, [r2, #68]	; 0x44
 80016e2:	4b0f      	ldr	r3, [pc, #60]	; (8001720 <HAL_MspInit+0x54>)
 80016e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016ea:	607b      	str	r3, [r7, #4]
 80016ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016ee:	2300      	movs	r3, #0
 80016f0:	603b      	str	r3, [r7, #0]
 80016f2:	4b0b      	ldr	r3, [pc, #44]	; (8001720 <HAL_MspInit+0x54>)
 80016f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f6:	4a0a      	ldr	r2, [pc, #40]	; (8001720 <HAL_MspInit+0x54>)
 80016f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016fc:	6413      	str	r3, [r2, #64]	; 0x40
 80016fe:	4b08      	ldr	r3, [pc, #32]	; (8001720 <HAL_MspInit+0x54>)
 8001700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001702:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001706:	603b      	str	r3, [r7, #0]
 8001708:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800170a:	2200      	movs	r2, #0
 800170c:	210f      	movs	r1, #15
 800170e:	f06f 0001 	mvn.w	r0, #1
 8001712:	f000 fb87 	bl	8001e24 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001716:	bf00      	nop
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	40023800 	.word	0x40023800

08001724 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b08e      	sub	sp, #56	; 0x38
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800172c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001730:	2200      	movs	r2, #0
 8001732:	601a      	str	r2, [r3, #0]
 8001734:	605a      	str	r2, [r3, #4]
 8001736:	609a      	str	r2, [r3, #8]
 8001738:	60da      	str	r2, [r3, #12]
 800173a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a55      	ldr	r2, [pc, #340]	; (8001898 <HAL_ETH_MspInit+0x174>)
 8001742:	4293      	cmp	r3, r2
 8001744:	f040 80a4 	bne.w	8001890 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001748:	2300      	movs	r3, #0
 800174a:	623b      	str	r3, [r7, #32]
 800174c:	4b53      	ldr	r3, [pc, #332]	; (800189c <HAL_ETH_MspInit+0x178>)
 800174e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001750:	4a52      	ldr	r2, [pc, #328]	; (800189c <HAL_ETH_MspInit+0x178>)
 8001752:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001756:	6313      	str	r3, [r2, #48]	; 0x30
 8001758:	4b50      	ldr	r3, [pc, #320]	; (800189c <HAL_ETH_MspInit+0x178>)
 800175a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001760:	623b      	str	r3, [r7, #32]
 8001762:	6a3b      	ldr	r3, [r7, #32]
 8001764:	2300      	movs	r3, #0
 8001766:	61fb      	str	r3, [r7, #28]
 8001768:	4b4c      	ldr	r3, [pc, #304]	; (800189c <HAL_ETH_MspInit+0x178>)
 800176a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176c:	4a4b      	ldr	r2, [pc, #300]	; (800189c <HAL_ETH_MspInit+0x178>)
 800176e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001772:	6313      	str	r3, [r2, #48]	; 0x30
 8001774:	4b49      	ldr	r3, [pc, #292]	; (800189c <HAL_ETH_MspInit+0x178>)
 8001776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001778:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800177c:	61fb      	str	r3, [r7, #28]
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	2300      	movs	r3, #0
 8001782:	61bb      	str	r3, [r7, #24]
 8001784:	4b45      	ldr	r3, [pc, #276]	; (800189c <HAL_ETH_MspInit+0x178>)
 8001786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001788:	4a44      	ldr	r2, [pc, #272]	; (800189c <HAL_ETH_MspInit+0x178>)
 800178a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800178e:	6313      	str	r3, [r2, #48]	; 0x30
 8001790:	4b42      	ldr	r3, [pc, #264]	; (800189c <HAL_ETH_MspInit+0x178>)
 8001792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001794:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001798:	61bb      	str	r3, [r7, #24]
 800179a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800179c:	2300      	movs	r3, #0
 800179e:	617b      	str	r3, [r7, #20]
 80017a0:	4b3e      	ldr	r3, [pc, #248]	; (800189c <HAL_ETH_MspInit+0x178>)
 80017a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a4:	4a3d      	ldr	r2, [pc, #244]	; (800189c <HAL_ETH_MspInit+0x178>)
 80017a6:	f043 0304 	orr.w	r3, r3, #4
 80017aa:	6313      	str	r3, [r2, #48]	; 0x30
 80017ac:	4b3b      	ldr	r3, [pc, #236]	; (800189c <HAL_ETH_MspInit+0x178>)
 80017ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b0:	f003 0304 	and.w	r3, r3, #4
 80017b4:	617b      	str	r3, [r7, #20]
 80017b6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017b8:	2300      	movs	r3, #0
 80017ba:	613b      	str	r3, [r7, #16]
 80017bc:	4b37      	ldr	r3, [pc, #220]	; (800189c <HAL_ETH_MspInit+0x178>)
 80017be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c0:	4a36      	ldr	r2, [pc, #216]	; (800189c <HAL_ETH_MspInit+0x178>)
 80017c2:	f043 0301 	orr.w	r3, r3, #1
 80017c6:	6313      	str	r3, [r2, #48]	; 0x30
 80017c8:	4b34      	ldr	r3, [pc, #208]	; (800189c <HAL_ETH_MspInit+0x178>)
 80017ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017cc:	f003 0301 	and.w	r3, r3, #1
 80017d0:	613b      	str	r3, [r7, #16]
 80017d2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017d4:	2300      	movs	r3, #0
 80017d6:	60fb      	str	r3, [r7, #12]
 80017d8:	4b30      	ldr	r3, [pc, #192]	; (800189c <HAL_ETH_MspInit+0x178>)
 80017da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017dc:	4a2f      	ldr	r2, [pc, #188]	; (800189c <HAL_ETH_MspInit+0x178>)
 80017de:	f043 0302 	orr.w	r3, r3, #2
 80017e2:	6313      	str	r3, [r2, #48]	; 0x30
 80017e4:	4b2d      	ldr	r3, [pc, #180]	; (800189c <HAL_ETH_MspInit+0x178>)
 80017e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e8:	f003 0302 	and.w	r3, r3, #2
 80017ec:	60fb      	str	r3, [r7, #12]
 80017ee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80017f0:	2300      	movs	r3, #0
 80017f2:	60bb      	str	r3, [r7, #8]
 80017f4:	4b29      	ldr	r3, [pc, #164]	; (800189c <HAL_ETH_MspInit+0x178>)
 80017f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f8:	4a28      	ldr	r2, [pc, #160]	; (800189c <HAL_ETH_MspInit+0x178>)
 80017fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017fe:	6313      	str	r3, [r2, #48]	; 0x30
 8001800:	4b26      	ldr	r3, [pc, #152]	; (800189c <HAL_ETH_MspInit+0x178>)
 8001802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001804:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001808:	60bb      	str	r3, [r7, #8]
 800180a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800180c:	2332      	movs	r3, #50	; 0x32
 800180e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001810:	2302      	movs	r3, #2
 8001812:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001814:	2300      	movs	r3, #0
 8001816:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001818:	2303      	movs	r3, #3
 800181a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800181c:	230b      	movs	r3, #11
 800181e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001820:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001824:	4619      	mov	r1, r3
 8001826:	481e      	ldr	r0, [pc, #120]	; (80018a0 <HAL_ETH_MspInit+0x17c>)
 8001828:	f000 fe4e 	bl	80024c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800182c:	2386      	movs	r3, #134	; 0x86
 800182e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001830:	2302      	movs	r3, #2
 8001832:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001834:	2300      	movs	r3, #0
 8001836:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001838:	2303      	movs	r3, #3
 800183a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800183c:	230b      	movs	r3, #11
 800183e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001840:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001844:	4619      	mov	r1, r3
 8001846:	4817      	ldr	r0, [pc, #92]	; (80018a4 <HAL_ETH_MspInit+0x180>)
 8001848:	f000 fe3e 	bl	80024c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800184c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001850:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001852:	2302      	movs	r3, #2
 8001854:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001856:	2300      	movs	r3, #0
 8001858:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800185a:	2303      	movs	r3, #3
 800185c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800185e:	230b      	movs	r3, #11
 8001860:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001862:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001866:	4619      	mov	r1, r3
 8001868:	480f      	ldr	r0, [pc, #60]	; (80018a8 <HAL_ETH_MspInit+0x184>)
 800186a:	f000 fe2d 	bl	80024c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800186e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001872:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001874:	2302      	movs	r3, #2
 8001876:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001878:	2300      	movs	r3, #0
 800187a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800187c:	2303      	movs	r3, #3
 800187e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001880:	230b      	movs	r3, #11
 8001882:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001884:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001888:	4619      	mov	r1, r3
 800188a:	4808      	ldr	r0, [pc, #32]	; (80018ac <HAL_ETH_MspInit+0x188>)
 800188c:	f000 fe1c 	bl	80024c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001890:	bf00      	nop
 8001892:	3738      	adds	r7, #56	; 0x38
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	40028000 	.word	0x40028000
 800189c:	40023800 	.word	0x40023800
 80018a0:	40020800 	.word	0x40020800
 80018a4:	40020000 	.word	0x40020000
 80018a8:	40020400 	.word	0x40020400
 80018ac:	40021800 	.word	0x40021800

080018b0 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b085      	sub	sp, #20
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a0b      	ldr	r2, [pc, #44]	; (80018ec <HAL_RNG_MspInit+0x3c>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d10d      	bne.n	80018de <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80018c2:	2300      	movs	r3, #0
 80018c4:	60fb      	str	r3, [r7, #12]
 80018c6:	4b0a      	ldr	r3, [pc, #40]	; (80018f0 <HAL_RNG_MspInit+0x40>)
 80018c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018ca:	4a09      	ldr	r2, [pc, #36]	; (80018f0 <HAL_RNG_MspInit+0x40>)
 80018cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018d0:	6353      	str	r3, [r2, #52]	; 0x34
 80018d2:	4b07      	ldr	r3, [pc, #28]	; (80018f0 <HAL_RNG_MspInit+0x40>)
 80018d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018da:	60fb      	str	r3, [r7, #12]
 80018dc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 80018de:	bf00      	nop
 80018e0:	3714      	adds	r7, #20
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop
 80018ec:	50060800 	.word	0x50060800
 80018f0:	40023800 	.word	0x40023800

080018f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b08a      	sub	sp, #40	; 0x28
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018fc:	f107 0314 	add.w	r3, r7, #20
 8001900:	2200      	movs	r2, #0
 8001902:	601a      	str	r2, [r3, #0]
 8001904:	605a      	str	r2, [r3, #4]
 8001906:	609a      	str	r2, [r3, #8]
 8001908:	60da      	str	r2, [r3, #12]
 800190a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a19      	ldr	r2, [pc, #100]	; (8001978 <HAL_UART_MspInit+0x84>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d12c      	bne.n	8001970 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001916:	2300      	movs	r3, #0
 8001918:	613b      	str	r3, [r7, #16]
 800191a:	4b18      	ldr	r3, [pc, #96]	; (800197c <HAL_UART_MspInit+0x88>)
 800191c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191e:	4a17      	ldr	r2, [pc, #92]	; (800197c <HAL_UART_MspInit+0x88>)
 8001920:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001924:	6413      	str	r3, [r2, #64]	; 0x40
 8001926:	4b15      	ldr	r3, [pc, #84]	; (800197c <HAL_UART_MspInit+0x88>)
 8001928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800192e:	613b      	str	r3, [r7, #16]
 8001930:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001932:	2300      	movs	r3, #0
 8001934:	60fb      	str	r3, [r7, #12]
 8001936:	4b11      	ldr	r3, [pc, #68]	; (800197c <HAL_UART_MspInit+0x88>)
 8001938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193a:	4a10      	ldr	r2, [pc, #64]	; (800197c <HAL_UART_MspInit+0x88>)
 800193c:	f043 0308 	orr.w	r3, r3, #8
 8001940:	6313      	str	r3, [r2, #48]	; 0x30
 8001942:	4b0e      	ldr	r3, [pc, #56]	; (800197c <HAL_UART_MspInit+0x88>)
 8001944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001946:	f003 0308 	and.w	r3, r3, #8
 800194a:	60fb      	str	r3, [r7, #12]
 800194c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800194e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001952:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001954:	2302      	movs	r3, #2
 8001956:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001958:	2300      	movs	r3, #0
 800195a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800195c:	2303      	movs	r3, #3
 800195e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001960:	2307      	movs	r3, #7
 8001962:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001964:	f107 0314 	add.w	r3, r7, #20
 8001968:	4619      	mov	r1, r3
 800196a:	4805      	ldr	r0, [pc, #20]	; (8001980 <HAL_UART_MspInit+0x8c>)
 800196c:	f000 fdac 	bl	80024c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001970:	bf00      	nop
 8001972:	3728      	adds	r7, #40	; 0x28
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	40004800 	.word	0x40004800
 800197c:	40023800 	.word	0x40023800
 8001980:	40020c00 	.word	0x40020c00

08001984 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b08a      	sub	sp, #40	; 0x28
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800198c:	f107 0314 	add.w	r3, r7, #20
 8001990:	2200      	movs	r2, #0
 8001992:	601a      	str	r2, [r3, #0]
 8001994:	605a      	str	r2, [r3, #4]
 8001996:	609a      	str	r2, [r3, #8]
 8001998:	60da      	str	r2, [r3, #12]
 800199a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80019a4:	d13f      	bne.n	8001a26 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019a6:	2300      	movs	r3, #0
 80019a8:	613b      	str	r3, [r7, #16]
 80019aa:	4b21      	ldr	r3, [pc, #132]	; (8001a30 <HAL_PCD_MspInit+0xac>)
 80019ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ae:	4a20      	ldr	r2, [pc, #128]	; (8001a30 <HAL_PCD_MspInit+0xac>)
 80019b0:	f043 0301 	orr.w	r3, r3, #1
 80019b4:	6313      	str	r3, [r2, #48]	; 0x30
 80019b6:	4b1e      	ldr	r3, [pc, #120]	; (8001a30 <HAL_PCD_MspInit+0xac>)
 80019b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ba:	f003 0301 	and.w	r3, r3, #1
 80019be:	613b      	str	r3, [r7, #16]
 80019c0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80019c2:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80019c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c8:	2302      	movs	r3, #2
 80019ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019cc:	2300      	movs	r3, #0
 80019ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019d0:	2303      	movs	r3, #3
 80019d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80019d4:	230a      	movs	r3, #10
 80019d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019d8:	f107 0314 	add.w	r3, r7, #20
 80019dc:	4619      	mov	r1, r3
 80019de:	4815      	ldr	r0, [pc, #84]	; (8001a34 <HAL_PCD_MspInit+0xb0>)
 80019e0:	f000 fd72 	bl	80024c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80019e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019ea:	2300      	movs	r3, #0
 80019ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ee:	2300      	movs	r3, #0
 80019f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80019f2:	f107 0314 	add.w	r3, r7, #20
 80019f6:	4619      	mov	r1, r3
 80019f8:	480e      	ldr	r0, [pc, #56]	; (8001a34 <HAL_PCD_MspInit+0xb0>)
 80019fa:	f000 fd65 	bl	80024c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80019fe:	4b0c      	ldr	r3, [pc, #48]	; (8001a30 <HAL_PCD_MspInit+0xac>)
 8001a00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a02:	4a0b      	ldr	r2, [pc, #44]	; (8001a30 <HAL_PCD_MspInit+0xac>)
 8001a04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a08:	6353      	str	r3, [r2, #52]	; 0x34
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	60fb      	str	r3, [r7, #12]
 8001a0e:	4b08      	ldr	r3, [pc, #32]	; (8001a30 <HAL_PCD_MspInit+0xac>)
 8001a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a12:	4a07      	ldr	r2, [pc, #28]	; (8001a30 <HAL_PCD_MspInit+0xac>)
 8001a14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a18:	6453      	str	r3, [r2, #68]	; 0x44
 8001a1a:	4b05      	ldr	r3, [pc, #20]	; (8001a30 <HAL_PCD_MspInit+0xac>)
 8001a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a22:	60fb      	str	r3, [r7, #12]
 8001a24:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001a26:	bf00      	nop
 8001a28:	3728      	adds	r7, #40	; 0x28
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	40023800 	.word	0x40023800
 8001a34:	40020000 	.word	0x40020000

08001a38 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b08e      	sub	sp, #56	; 0x38
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001a40:	2300      	movs	r3, #0
 8001a42:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001a44:	2300      	movs	r3, #0
 8001a46:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001a48:	2300      	movs	r3, #0
 8001a4a:	60fb      	str	r3, [r7, #12]
 8001a4c:	4b33      	ldr	r3, [pc, #204]	; (8001b1c <HAL_InitTick+0xe4>)
 8001a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a50:	4a32      	ldr	r2, [pc, #200]	; (8001b1c <HAL_InitTick+0xe4>)
 8001a52:	f043 0310 	orr.w	r3, r3, #16
 8001a56:	6413      	str	r3, [r2, #64]	; 0x40
 8001a58:	4b30      	ldr	r3, [pc, #192]	; (8001b1c <HAL_InitTick+0xe4>)
 8001a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5c:	f003 0310 	and.w	r3, r3, #16
 8001a60:	60fb      	str	r3, [r7, #12]
 8001a62:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001a64:	f107 0210 	add.w	r2, r7, #16
 8001a68:	f107 0314 	add.w	r3, r7, #20
 8001a6c:	4611      	mov	r1, r2
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f001 fca4 	bl	80033bc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001a74:	6a3b      	ldr	r3, [r7, #32]
 8001a76:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d103      	bne.n	8001a86 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001a7e:	f001 fc75 	bl	800336c <HAL_RCC_GetPCLK1Freq>
 8001a82:	6378      	str	r0, [r7, #52]	; 0x34
 8001a84:	e004      	b.n	8001a90 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001a86:	f001 fc71 	bl	800336c <HAL_RCC_GetPCLK1Freq>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	005b      	lsls	r3, r3, #1
 8001a8e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001a90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a92:	4a23      	ldr	r2, [pc, #140]	; (8001b20 <HAL_InitTick+0xe8>)
 8001a94:	fba2 2303 	umull	r2, r3, r2, r3
 8001a98:	0c9b      	lsrs	r3, r3, #18
 8001a9a:	3b01      	subs	r3, #1
 8001a9c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001a9e:	4b21      	ldr	r3, [pc, #132]	; (8001b24 <HAL_InitTick+0xec>)
 8001aa0:	4a21      	ldr	r2, [pc, #132]	; (8001b28 <HAL_InitTick+0xf0>)
 8001aa2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001aa4:	4b1f      	ldr	r3, [pc, #124]	; (8001b24 <HAL_InitTick+0xec>)
 8001aa6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001aaa:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001aac:	4a1d      	ldr	r2, [pc, #116]	; (8001b24 <HAL_InitTick+0xec>)
 8001aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ab0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001ab2:	4b1c      	ldr	r3, [pc, #112]	; (8001b24 <HAL_InitTick+0xec>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ab8:	4b1a      	ldr	r3, [pc, #104]	; (8001b24 <HAL_InitTick+0xec>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001abe:	4b19      	ldr	r3, [pc, #100]	; (8001b24 <HAL_InitTick+0xec>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001ac4:	4817      	ldr	r0, [pc, #92]	; (8001b24 <HAL_InitTick+0xec>)
 8001ac6:	f001 fd2b 	bl	8003520 <HAL_TIM_Base_Init>
 8001aca:	4603      	mov	r3, r0
 8001acc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001ad0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d11b      	bne.n	8001b10 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001ad8:	4812      	ldr	r0, [pc, #72]	; (8001b24 <HAL_InitTick+0xec>)
 8001ada:	f001 fd7b 	bl	80035d4 <HAL_TIM_Base_Start_IT>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001ae4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d111      	bne.n	8001b10 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001aec:	2036      	movs	r0, #54	; 0x36
 8001aee:	f000 f9b5 	bl	8001e5c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2b0f      	cmp	r3, #15
 8001af6:	d808      	bhi.n	8001b0a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001af8:	2200      	movs	r2, #0
 8001afa:	6879      	ldr	r1, [r7, #4]
 8001afc:	2036      	movs	r0, #54	; 0x36
 8001afe:	f000 f991 	bl	8001e24 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b02:	4a0a      	ldr	r2, [pc, #40]	; (8001b2c <HAL_InitTick+0xf4>)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6013      	str	r3, [r2, #0]
 8001b08:	e002      	b.n	8001b10 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001b10:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	3738      	adds	r7, #56	; 0x38
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	40023800 	.word	0x40023800
 8001b20:	431bde83 	.word	0x431bde83
 8001b24:	20000cd4 	.word	0x20000cd4
 8001b28:	40001000 	.word	0x40001000
 8001b2c:	20000004 	.word	0x20000004

08001b30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b34:	e7fe      	b.n	8001b34 <NMI_Handler+0x4>

08001b36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b36:	b480      	push	{r7}
 8001b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b3a:	e7fe      	b.n	8001b3a <HardFault_Handler+0x4>

08001b3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b40:	e7fe      	b.n	8001b40 <MemManage_Handler+0x4>

08001b42 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b42:	b480      	push	{r7}
 8001b44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b46:	e7fe      	b.n	8001b46 <BusFault_Handler+0x4>

08001b48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b4c:	e7fe      	b.n	8001b4c <UsageFault_Handler+0x4>

08001b4e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b4e:	b480      	push	{r7}
 8001b50:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b52:	bf00      	nop
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr

08001b5c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001b60:	4802      	ldr	r0, [pc, #8]	; (8001b6c <TIM6_DAC_IRQHandler+0x10>)
 8001b62:	f001 fda7 	bl	80036b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001b66:	bf00      	nop
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	20000cd4 	.word	0x20000cd4

08001b70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b74:	4b06      	ldr	r3, [pc, #24]	; (8001b90 <SystemInit+0x20>)
 8001b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b7a:	4a05      	ldr	r2, [pc, #20]	; (8001b90 <SystemInit+0x20>)
 8001b7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b84:	bf00      	nop
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	e000ed00 	.word	0xe000ed00

08001b94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001b94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bcc <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b98:	480d      	ldr	r0, [pc, #52]	; (8001bd0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b9a:	490e      	ldr	r1, [pc, #56]	; (8001bd4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b9c:	4a0e      	ldr	r2, [pc, #56]	; (8001bd8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ba0:	e002      	b.n	8001ba8 <LoopCopyDataInit>

08001ba2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ba2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ba4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ba6:	3304      	adds	r3, #4

08001ba8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ba8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001baa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bac:	d3f9      	bcc.n	8001ba2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bae:	4a0b      	ldr	r2, [pc, #44]	; (8001bdc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001bb0:	4c0b      	ldr	r4, [pc, #44]	; (8001be0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001bb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bb4:	e001      	b.n	8001bba <LoopFillZerobss>

08001bb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bb8:	3204      	adds	r2, #4

08001bba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bbc:	d3fb      	bcc.n	8001bb6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001bbe:	f7ff ffd7 	bl	8001b70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bc2:	f005 fbc1 	bl	8007348 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bc6:	f7ff f9ff 	bl	8000fc8 <main>
  bx  lr    
 8001bca:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001bcc:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001bd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bd4:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001bd8:	080076d8 	.word	0x080076d8
  ldr r2, =_sbss
 8001bdc:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001be0:	20005858 	.word	0x20005858

08001be4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001be4:	e7fe      	b.n	8001be4 <ADC_IRQHandler>
	...

08001be8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001bec:	4b0e      	ldr	r3, [pc, #56]	; (8001c28 <HAL_Init+0x40>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a0d      	ldr	r2, [pc, #52]	; (8001c28 <HAL_Init+0x40>)
 8001bf2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bf6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001bf8:	4b0b      	ldr	r3, [pc, #44]	; (8001c28 <HAL_Init+0x40>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a0a      	ldr	r2, [pc, #40]	; (8001c28 <HAL_Init+0x40>)
 8001bfe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c02:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c04:	4b08      	ldr	r3, [pc, #32]	; (8001c28 <HAL_Init+0x40>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a07      	ldr	r2, [pc, #28]	; (8001c28 <HAL_Init+0x40>)
 8001c0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c10:	2003      	movs	r0, #3
 8001c12:	f000 f8fc 	bl	8001e0e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c16:	200f      	movs	r0, #15
 8001c18:	f7ff ff0e 	bl	8001a38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c1c:	f7ff fd56 	bl	80016cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c20:	2300      	movs	r3, #0
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	40023c00 	.word	0x40023c00

08001c2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c30:	4b06      	ldr	r3, [pc, #24]	; (8001c4c <HAL_IncTick+0x20>)
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	461a      	mov	r2, r3
 8001c36:	4b06      	ldr	r3, [pc, #24]	; (8001c50 <HAL_IncTick+0x24>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4413      	add	r3, r2
 8001c3c:	4a04      	ldr	r2, [pc, #16]	; (8001c50 <HAL_IncTick+0x24>)
 8001c3e:	6013      	str	r3, [r2, #0]
}
 8001c40:	bf00      	nop
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop
 8001c4c:	20000008 	.word	0x20000008
 8001c50:	20000d1c 	.word	0x20000d1c

08001c54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  return uwTick;
 8001c58:	4b03      	ldr	r3, [pc, #12]	; (8001c68 <HAL_GetTick+0x14>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	20000d1c 	.word	0x20000d1c

08001c6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b084      	sub	sp, #16
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c74:	f7ff ffee 	bl	8001c54 <HAL_GetTick>
 8001c78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c84:	d005      	beq.n	8001c92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c86:	4b0a      	ldr	r3, [pc, #40]	; (8001cb0 <HAL_Delay+0x44>)
 8001c88:	781b      	ldrb	r3, [r3, #0]
 8001c8a:	461a      	mov	r2, r3
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	4413      	add	r3, r2
 8001c90:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c92:	bf00      	nop
 8001c94:	f7ff ffde 	bl	8001c54 <HAL_GetTick>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	68fa      	ldr	r2, [r7, #12]
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d8f7      	bhi.n	8001c94 <HAL_Delay+0x28>
  {
  }
}
 8001ca4:	bf00      	nop
 8001ca6:	bf00      	nop
 8001ca8:	3710      	adds	r7, #16
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	20000008 	.word	0x20000008

08001cb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b085      	sub	sp, #20
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	f003 0307 	and.w	r3, r3, #7
 8001cc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cc4:	4b0c      	ldr	r3, [pc, #48]	; (8001cf8 <__NVIC_SetPriorityGrouping+0x44>)
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cca:	68ba      	ldr	r2, [r7, #8]
 8001ccc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cdc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ce0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ce4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ce6:	4a04      	ldr	r2, [pc, #16]	; (8001cf8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	60d3      	str	r3, [r2, #12]
}
 8001cec:	bf00      	nop
 8001cee:	3714      	adds	r7, #20
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr
 8001cf8:	e000ed00 	.word	0xe000ed00

08001cfc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d00:	4b04      	ldr	r3, [pc, #16]	; (8001d14 <__NVIC_GetPriorityGrouping+0x18>)
 8001d02:	68db      	ldr	r3, [r3, #12]
 8001d04:	0a1b      	lsrs	r3, r3, #8
 8001d06:	f003 0307 	and.w	r3, r3, #7
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr
 8001d14:	e000ed00 	.word	0xe000ed00

08001d18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	4603      	mov	r3, r0
 8001d20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	db0b      	blt.n	8001d42 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d2a:	79fb      	ldrb	r3, [r7, #7]
 8001d2c:	f003 021f 	and.w	r2, r3, #31
 8001d30:	4907      	ldr	r1, [pc, #28]	; (8001d50 <__NVIC_EnableIRQ+0x38>)
 8001d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d36:	095b      	lsrs	r3, r3, #5
 8001d38:	2001      	movs	r0, #1
 8001d3a:	fa00 f202 	lsl.w	r2, r0, r2
 8001d3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d42:	bf00      	nop
 8001d44:	370c      	adds	r7, #12
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop
 8001d50:	e000e100 	.word	0xe000e100

08001d54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	6039      	str	r1, [r7, #0]
 8001d5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	db0a      	blt.n	8001d7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	b2da      	uxtb	r2, r3
 8001d6c:	490c      	ldr	r1, [pc, #48]	; (8001da0 <__NVIC_SetPriority+0x4c>)
 8001d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d72:	0112      	lsls	r2, r2, #4
 8001d74:	b2d2      	uxtb	r2, r2
 8001d76:	440b      	add	r3, r1
 8001d78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d7c:	e00a      	b.n	8001d94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	b2da      	uxtb	r2, r3
 8001d82:	4908      	ldr	r1, [pc, #32]	; (8001da4 <__NVIC_SetPriority+0x50>)
 8001d84:	79fb      	ldrb	r3, [r7, #7]
 8001d86:	f003 030f 	and.w	r3, r3, #15
 8001d8a:	3b04      	subs	r3, #4
 8001d8c:	0112      	lsls	r2, r2, #4
 8001d8e:	b2d2      	uxtb	r2, r2
 8001d90:	440b      	add	r3, r1
 8001d92:	761a      	strb	r2, [r3, #24]
}
 8001d94:	bf00      	nop
 8001d96:	370c      	adds	r7, #12
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr
 8001da0:	e000e100 	.word	0xe000e100
 8001da4:	e000ed00 	.word	0xe000ed00

08001da8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b089      	sub	sp, #36	; 0x24
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	60f8      	str	r0, [r7, #12]
 8001db0:	60b9      	str	r1, [r7, #8]
 8001db2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	f003 0307 	and.w	r3, r3, #7
 8001dba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	f1c3 0307 	rsb	r3, r3, #7
 8001dc2:	2b04      	cmp	r3, #4
 8001dc4:	bf28      	it	cs
 8001dc6:	2304      	movcs	r3, #4
 8001dc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dca:	69fb      	ldr	r3, [r7, #28]
 8001dcc:	3304      	adds	r3, #4
 8001dce:	2b06      	cmp	r3, #6
 8001dd0:	d902      	bls.n	8001dd8 <NVIC_EncodePriority+0x30>
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	3b03      	subs	r3, #3
 8001dd6:	e000      	b.n	8001dda <NVIC_EncodePriority+0x32>
 8001dd8:	2300      	movs	r3, #0
 8001dda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ddc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001de0:	69bb      	ldr	r3, [r7, #24]
 8001de2:	fa02 f303 	lsl.w	r3, r2, r3
 8001de6:	43da      	mvns	r2, r3
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	401a      	ands	r2, r3
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001df0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	fa01 f303 	lsl.w	r3, r1, r3
 8001dfa:	43d9      	mvns	r1, r3
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e00:	4313      	orrs	r3, r2
         );
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3724      	adds	r7, #36	; 0x24
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr

08001e0e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e0e:	b580      	push	{r7, lr}
 8001e10:	b082      	sub	sp, #8
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f7ff ff4c 	bl	8001cb4 <__NVIC_SetPriorityGrouping>
}
 8001e1c:	bf00      	nop
 8001e1e:	3708      	adds	r7, #8
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}

08001e24 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b086      	sub	sp, #24
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	60b9      	str	r1, [r7, #8]
 8001e2e:	607a      	str	r2, [r7, #4]
 8001e30:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e32:	2300      	movs	r3, #0
 8001e34:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e36:	f7ff ff61 	bl	8001cfc <__NVIC_GetPriorityGrouping>
 8001e3a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e3c:	687a      	ldr	r2, [r7, #4]
 8001e3e:	68b9      	ldr	r1, [r7, #8]
 8001e40:	6978      	ldr	r0, [r7, #20]
 8001e42:	f7ff ffb1 	bl	8001da8 <NVIC_EncodePriority>
 8001e46:	4602      	mov	r2, r0
 8001e48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e4c:	4611      	mov	r1, r2
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f7ff ff80 	bl	8001d54 <__NVIC_SetPriority>
}
 8001e54:	bf00      	nop
 8001e56:	3718      	adds	r7, #24
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}

08001e5c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	4603      	mov	r3, r0
 8001e64:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f7ff ff54 	bl	8001d18 <__NVIC_EnableIRQ>
}
 8001e70:	bf00      	nop
 8001e72:	3708      	adds	r7, #8
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}

08001e78 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b084      	sub	sp, #16
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d101      	bne.n	8001e8a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e06c      	b.n	8001f64 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d106      	bne.n	8001ea2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2223      	movs	r2, #35	; 0x23
 8001e98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001e9c:	6878      	ldr	r0, [r7, #4]
 8001e9e:	f7ff fc41 	bl	8001724 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	60bb      	str	r3, [r7, #8]
 8001ea6:	4b31      	ldr	r3, [pc, #196]	; (8001f6c <HAL_ETH_Init+0xf4>)
 8001ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eaa:	4a30      	ldr	r2, [pc, #192]	; (8001f6c <HAL_ETH_Init+0xf4>)
 8001eac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001eb0:	6453      	str	r3, [r2, #68]	; 0x44
 8001eb2:	4b2e      	ldr	r3, [pc, #184]	; (8001f6c <HAL_ETH_Init+0xf4>)
 8001eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001eba:	60bb      	str	r3, [r7, #8]
 8001ebc:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001ebe:	4b2c      	ldr	r3, [pc, #176]	; (8001f70 <HAL_ETH_Init+0xf8>)
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	4a2b      	ldr	r2, [pc, #172]	; (8001f70 <HAL_ETH_Init+0xf8>)
 8001ec4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001ec8:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001eca:	4b29      	ldr	r3, [pc, #164]	; (8001f70 <HAL_ETH_Init+0xf8>)
 8001ecc:	685a      	ldr	r2, [r3, #4]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	4927      	ldr	r1, [pc, #156]	; (8001f70 <HAL_ETH_Init+0xf8>)
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001ed8:	4b25      	ldr	r3, [pc, #148]	; (8001f70 <HAL_ETH_Init+0xf8>)
 8001eda:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	687a      	ldr	r2, [r7, #4]
 8001ee8:	6812      	ldr	r2, [r2, #0]
 8001eea:	f043 0301 	orr.w	r3, r3, #1
 8001eee:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001ef2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ef4:	f7ff feae 	bl	8001c54 <HAL_GetTick>
 8001ef8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001efa:	e011      	b.n	8001f20 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001efc:	f7ff feaa 	bl	8001c54 <HAL_GetTick>
 8001f00:	4602      	mov	r2, r0
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001f0a:	d909      	bls.n	8001f20 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2204      	movs	r2, #4
 8001f10:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	22e0      	movs	r2, #224	; 0xe0
 8001f18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e021      	b.n	8001f64 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 0301 	and.w	r3, r3, #1
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d1e4      	bne.n	8001efc <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f000 f958 	bl	80021e8 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	f000 f9ff 	bl	800233c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f000 fa55 	bl	80023ee <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	461a      	mov	r2, r3
 8001f4a:	2100      	movs	r1, #0
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	f000 f9bd 	bl	80022cc <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2200      	movs	r2, #0
 8001f56:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2210      	movs	r2, #16
 8001f5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001f62:	2300      	movs	r3, #0
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	3710      	adds	r7, #16
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	40023800 	.word	0x40023800
 8001f70:	40013800 	.word	0x40013800

08001f74 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b084      	sub	sp, #16
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
 8001f7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001f86:	68fa      	ldr	r2, [r7, #12]
 8001f88:	4b51      	ldr	r3, [pc, #324]	; (80020d0 <ETH_SetMACConfig+0x15c>)
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	7c1b      	ldrb	r3, [r3, #16]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d102      	bne.n	8001f9c <ETH_SetMACConfig+0x28>
 8001f96:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001f9a:	e000      	b.n	8001f9e <ETH_SetMACConfig+0x2a>
 8001f9c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	7c5b      	ldrb	r3, [r3, #17]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d102      	bne.n	8001fac <ETH_SetMACConfig+0x38>
 8001fa6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001faa:	e000      	b.n	8001fae <ETH_SetMACConfig+0x3a>
 8001fac:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001fae:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001fb4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	7fdb      	ldrb	r3, [r3, #31]
 8001fba:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001fbc:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001fc2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001fc4:	683a      	ldr	r2, [r7, #0]
 8001fc6:	7f92      	ldrb	r2, [r2, #30]
 8001fc8:	2a00      	cmp	r2, #0
 8001fca:	d102      	bne.n	8001fd2 <ETH_SetMACConfig+0x5e>
 8001fcc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001fd0:	e000      	b.n	8001fd4 <ETH_SetMACConfig+0x60>
 8001fd2:	2200      	movs	r2, #0
                        macconf->Speed |
 8001fd4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	7f1b      	ldrb	r3, [r3, #28]
 8001fda:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001fdc:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001fe2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	791b      	ldrb	r3, [r3, #4]
 8001fe8:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001fea:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001fec:	683a      	ldr	r2, [r7, #0]
 8001fee:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001ff2:	2a00      	cmp	r2, #0
 8001ff4:	d102      	bne.n	8001ffc <ETH_SetMACConfig+0x88>
 8001ff6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ffa:	e000      	b.n	8001ffe <ETH_SetMACConfig+0x8a>
 8001ffc:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001ffe:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	7bdb      	ldrb	r3, [r3, #15]
 8002004:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002006:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800200c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002014:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002016:	4313      	orrs	r3, r2
 8002018:	68fa      	ldr	r2, [r7, #12]
 800201a:	4313      	orrs	r3, r2
 800201c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	68fa      	ldr	r2, [r7, #12]
 8002024:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800202e:	2001      	movs	r0, #1
 8002030:	f7ff fe1c 	bl	8001c6c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	68fa      	ldr	r2, [r7, #12]
 800203a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	699b      	ldr	r3, [r3, #24]
 8002042:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002044:	68fa      	ldr	r2, [r7, #12]
 8002046:	f64f 7341 	movw	r3, #65345	; 0xff41
 800204a:	4013      	ands	r3, r2
 800204c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002052:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002054:	683a      	ldr	r2, [r7, #0]
 8002056:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800205a:	2a00      	cmp	r2, #0
 800205c:	d101      	bne.n	8002062 <ETH_SetMACConfig+0xee>
 800205e:	2280      	movs	r2, #128	; 0x80
 8002060:	e000      	b.n	8002064 <ETH_SetMACConfig+0xf0>
 8002062:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002064:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800206a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800206c:	683a      	ldr	r2, [r7, #0]
 800206e:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8002072:	2a01      	cmp	r2, #1
 8002074:	d101      	bne.n	800207a <ETH_SetMACConfig+0x106>
 8002076:	2208      	movs	r2, #8
 8002078:	e000      	b.n	800207c <ETH_SetMACConfig+0x108>
 800207a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 800207c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800207e:	683a      	ldr	r2, [r7, #0]
 8002080:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002084:	2a01      	cmp	r2, #1
 8002086:	d101      	bne.n	800208c <ETH_SetMACConfig+0x118>
 8002088:	2204      	movs	r2, #4
 800208a:	e000      	b.n	800208e <ETH_SetMACConfig+0x11a>
 800208c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800208e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002090:	683a      	ldr	r2, [r7, #0]
 8002092:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8002096:	2a01      	cmp	r2, #1
 8002098:	d101      	bne.n	800209e <ETH_SetMACConfig+0x12a>
 800209a:	2202      	movs	r2, #2
 800209c:	e000      	b.n	80020a0 <ETH_SetMACConfig+0x12c>
 800209e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80020a0:	4313      	orrs	r3, r2
 80020a2:	68fa      	ldr	r2, [r7, #12]
 80020a4:	4313      	orrs	r3, r2
 80020a6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	68fa      	ldr	r2, [r7, #12]
 80020ae:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	699b      	ldr	r3, [r3, #24]
 80020b6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80020b8:	2001      	movs	r0, #1
 80020ba:	f7ff fdd7 	bl	8001c6c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	68fa      	ldr	r2, [r7, #12]
 80020c4:	619a      	str	r2, [r3, #24]
}
 80020c6:	bf00      	nop
 80020c8:	3710      	adds	r7, #16
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	ff20810f 	.word	0xff20810f

080020d4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b084      	sub	sp, #16
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020e6:	699b      	ldr	r3, [r3, #24]
 80020e8:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80020ea:	68fa      	ldr	r2, [r7, #12]
 80020ec:	4b3d      	ldr	r3, [pc, #244]	; (80021e4 <ETH_SetDMAConfig+0x110>)
 80020ee:	4013      	ands	r3, r2
 80020f0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	7b1b      	ldrb	r3, [r3, #12]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d102      	bne.n	8002100 <ETH_SetDMAConfig+0x2c>
 80020fa:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80020fe:	e000      	b.n	8002102 <ETH_SetDMAConfig+0x2e>
 8002100:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	7b5b      	ldrb	r3, [r3, #13]
 8002106:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002108:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800210a:	683a      	ldr	r2, [r7, #0]
 800210c:	7f52      	ldrb	r2, [r2, #29]
 800210e:	2a00      	cmp	r2, #0
 8002110:	d102      	bne.n	8002118 <ETH_SetDMAConfig+0x44>
 8002112:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002116:	e000      	b.n	800211a <ETH_SetDMAConfig+0x46>
 8002118:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800211a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	7b9b      	ldrb	r3, [r3, #14]
 8002120:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002122:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002128:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	7f1b      	ldrb	r3, [r3, #28]
 800212e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002130:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	7f9b      	ldrb	r3, [r3, #30]
 8002136:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002138:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800213e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002146:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002148:	4313      	orrs	r3, r2
 800214a:	68fa      	ldr	r2, [r7, #12]
 800214c:	4313      	orrs	r3, r2
 800214e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002158:	461a      	mov	r2, r3
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002166:	699b      	ldr	r3, [r3, #24]
 8002168:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800216a:	2001      	movs	r0, #1
 800216c:	f7ff fd7e 	bl	8001c6c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002178:	461a      	mov	r2, r3
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	791b      	ldrb	r3, [r3, #4]
 8002182:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002188:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800218e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002194:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800219c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800219e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021a4:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80021a6:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80021ac:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	6812      	ldr	r2, [r2, #0]
 80021b2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80021b6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80021ba:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80021c8:	2001      	movs	r0, #1
 80021ca:	f7ff fd4f 	bl	8001c6c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021d6:	461a      	mov	r2, r3
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	6013      	str	r3, [r2, #0]
}
 80021dc:	bf00      	nop
 80021de:	3710      	adds	r7, #16
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	f8de3f23 	.word	0xf8de3f23

080021e8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b0a6      	sub	sp, #152	; 0x98
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80021f0:	2301      	movs	r3, #1
 80021f2:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80021f6:	2301      	movs	r3, #1
 80021f8:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80021fc:	2300      	movs	r3, #0
 80021fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002200:	2300      	movs	r3, #0
 8002202:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002206:	2301      	movs	r3, #1
 8002208:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 800220c:	2300      	movs	r3, #0
 800220e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002212:	2301      	movs	r3, #1
 8002214:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002218:	2300      	movs	r3, #0
 800221a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800221e:	2300      	movs	r3, #0
 8002220:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002224:	2300      	movs	r3, #0
 8002226:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002228:	2300      	movs	r3, #0
 800222a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800222e:	2300      	movs	r3, #0
 8002230:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002232:	2300      	movs	r3, #0
 8002234:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002238:	2300      	movs	r3, #0
 800223a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800223e:	2300      	movs	r3, #0
 8002240:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002244:	2300      	movs	r3, #0
 8002246:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800224a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800224e:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002250:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002254:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002256:	2300      	movs	r3, #0
 8002258:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800225c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002260:	4619      	mov	r1, r3
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	f7ff fe86 	bl	8001f74 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002268:	2301      	movs	r3, #1
 800226a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800226c:	2301      	movs	r3, #1
 800226e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002270:	2301      	movs	r3, #1
 8002272:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002276:	2301      	movs	r3, #1
 8002278:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800227a:	2300      	movs	r3, #0
 800227c:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800227e:	2300      	movs	r3, #0
 8002280:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002284:	2300      	movs	r3, #0
 8002286:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800228a:	2300      	movs	r3, #0
 800228c:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800228e:	2301      	movs	r3, #1
 8002290:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002294:	2301      	movs	r3, #1
 8002296:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002298:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800229c:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800229e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80022a2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80022a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80022a8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80022aa:	2301      	movs	r3, #1
 80022ac:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80022b0:	2300      	movs	r3, #0
 80022b2:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80022b4:	2300      	movs	r3, #0
 80022b6:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80022b8:	f107 0308 	add.w	r3, r7, #8
 80022bc:	4619      	mov	r1, r3
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f7ff ff08 	bl	80020d4 <ETH_SetDMAConfig>
}
 80022c4:	bf00      	nop
 80022c6:	3798      	adds	r7, #152	; 0x98
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}

080022cc <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b087      	sub	sp, #28
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	60f8      	str	r0, [r7, #12]
 80022d4:	60b9      	str	r1, [r7, #8]
 80022d6:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	3305      	adds	r3, #5
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	021b      	lsls	r3, r3, #8
 80022e0:	687a      	ldr	r2, [r7, #4]
 80022e2:	3204      	adds	r2, #4
 80022e4:	7812      	ldrb	r2, [r2, #0]
 80022e6:	4313      	orrs	r3, r2
 80022e8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80022ea:	68ba      	ldr	r2, [r7, #8]
 80022ec:	4b11      	ldr	r3, [pc, #68]	; (8002334 <ETH_MACAddressConfig+0x68>)
 80022ee:	4413      	add	r3, r2
 80022f0:	461a      	mov	r2, r3
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	3303      	adds	r3, #3
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	061a      	lsls	r2, r3, #24
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	3302      	adds	r3, #2
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	041b      	lsls	r3, r3, #16
 8002306:	431a      	orrs	r2, r3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	3301      	adds	r3, #1
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	021b      	lsls	r3, r3, #8
 8002310:	4313      	orrs	r3, r2
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	7812      	ldrb	r2, [r2, #0]
 8002316:	4313      	orrs	r3, r2
 8002318:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800231a:	68ba      	ldr	r2, [r7, #8]
 800231c:	4b06      	ldr	r3, [pc, #24]	; (8002338 <ETH_MACAddressConfig+0x6c>)
 800231e:	4413      	add	r3, r2
 8002320:	461a      	mov	r2, r3
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	6013      	str	r3, [r2, #0]
}
 8002326:	bf00      	nop
 8002328:	371c      	adds	r7, #28
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr
 8002332:	bf00      	nop
 8002334:	40028040 	.word	0x40028040
 8002338:	40028044 	.word	0x40028044

0800233c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800233c:	b480      	push	{r7}
 800233e:	b085      	sub	sp, #20
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002344:	2300      	movs	r3, #0
 8002346:	60fb      	str	r3, [r7, #12]
 8002348:	e03e      	b.n	80023c8 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	68d9      	ldr	r1, [r3, #12]
 800234e:	68fa      	ldr	r2, [r7, #12]
 8002350:	4613      	mov	r3, r2
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	4413      	add	r3, r2
 8002356:	00db      	lsls	r3, r3, #3
 8002358:	440b      	add	r3, r1
 800235a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	2200      	movs	r2, #0
 8002360:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	2200      	movs	r2, #0
 8002366:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	2200      	movs	r2, #0
 800236c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	2200      	movs	r2, #0
 8002372:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002374:	68b9      	ldr	r1, [r7, #8]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	68fa      	ldr	r2, [r7, #12]
 800237a:	3206      	adds	r2, #6
 800237c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	2b02      	cmp	r3, #2
 8002390:	d80c      	bhi.n	80023ac <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	68d9      	ldr	r1, [r3, #12]
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	1c5a      	adds	r2, r3, #1
 800239a:	4613      	mov	r3, r2
 800239c:	009b      	lsls	r3, r3, #2
 800239e:	4413      	add	r3, r2
 80023a0:	00db      	lsls	r3, r3, #3
 80023a2:	440b      	add	r3, r1
 80023a4:	461a      	mov	r2, r3
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	60da      	str	r2, [r3, #12]
 80023aa:	e004      	b.n	80023b6 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	461a      	mov	r2, r3
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	3301      	adds	r3, #1
 80023c6:	60fb      	str	r3, [r7, #12]
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	2b03      	cmp	r3, #3
 80023cc:	d9bd      	bls.n	800234a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2200      	movs	r2, #0
 80023d2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	68da      	ldr	r2, [r3, #12]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023e0:	611a      	str	r2, [r3, #16]
}
 80023e2:	bf00      	nop
 80023e4:	3714      	adds	r7, #20
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr

080023ee <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80023ee:	b480      	push	{r7}
 80023f0:	b085      	sub	sp, #20
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80023f6:	2300      	movs	r3, #0
 80023f8:	60fb      	str	r3, [r7, #12]
 80023fa:	e046      	b.n	800248a <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6919      	ldr	r1, [r3, #16]
 8002400:	68fa      	ldr	r2, [r7, #12]
 8002402:	4613      	mov	r3, r2
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	4413      	add	r3, r2
 8002408:	00db      	lsls	r3, r3, #3
 800240a:	440b      	add	r3, r1
 800240c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	2200      	movs	r2, #0
 8002412:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	2200      	movs	r2, #0
 8002418:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	2200      	movs	r2, #0
 800241e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	2200      	movs	r2, #0
 8002424:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	2200      	movs	r2, #0
 800242a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	2200      	movs	r2, #0
 8002430:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002438:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8002440:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800244e:	68b9      	ldr	r1, [r7, #8]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	68fa      	ldr	r2, [r7, #12]
 8002454:	3212      	adds	r2, #18
 8002456:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	2b02      	cmp	r3, #2
 800245e:	d80c      	bhi.n	800247a <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6919      	ldr	r1, [r3, #16]
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	1c5a      	adds	r2, r3, #1
 8002468:	4613      	mov	r3, r2
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	4413      	add	r3, r2
 800246e:	00db      	lsls	r3, r3, #3
 8002470:	440b      	add	r3, r1
 8002472:	461a      	mov	r2, r3
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	60da      	str	r2, [r3, #12]
 8002478:	e004      	b.n	8002484 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	691b      	ldr	r3, [r3, #16]
 800247e:	461a      	mov	r2, r3
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	3301      	adds	r3, #1
 8002488:	60fb      	str	r3, [r7, #12]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	2b03      	cmp	r3, #3
 800248e:	d9b5      	bls.n	80023fc <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2200      	movs	r2, #0
 8002494:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2200      	movs	r2, #0
 800249a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2200      	movs	r2, #0
 80024a0:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2200      	movs	r2, #0
 80024a6:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2200      	movs	r2, #0
 80024ac:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	691a      	ldr	r2, [r3, #16]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024ba:	60da      	str	r2, [r3, #12]
}
 80024bc:	bf00      	nop
 80024be:	3714      	adds	r7, #20
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr

080024c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b089      	sub	sp, #36	; 0x24
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80024d2:	2300      	movs	r3, #0
 80024d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80024d6:	2300      	movs	r3, #0
 80024d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80024da:	2300      	movs	r3, #0
 80024dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024de:	2300      	movs	r3, #0
 80024e0:	61fb      	str	r3, [r7, #28]
 80024e2:	e177      	b.n	80027d4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80024e4:	2201      	movs	r2, #1
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	697a      	ldr	r2, [r7, #20]
 80024f4:	4013      	ands	r3, r2
 80024f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024f8:	693a      	ldr	r2, [r7, #16]
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	429a      	cmp	r2, r3
 80024fe:	f040 8166 	bne.w	80027ce <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	f003 0303 	and.w	r3, r3, #3
 800250a:	2b01      	cmp	r3, #1
 800250c:	d005      	beq.n	800251a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002516:	2b02      	cmp	r3, #2
 8002518:	d130      	bne.n	800257c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	005b      	lsls	r3, r3, #1
 8002524:	2203      	movs	r2, #3
 8002526:	fa02 f303 	lsl.w	r3, r2, r3
 800252a:	43db      	mvns	r3, r3
 800252c:	69ba      	ldr	r2, [r7, #24]
 800252e:	4013      	ands	r3, r2
 8002530:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	68da      	ldr	r2, [r3, #12]
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	005b      	lsls	r3, r3, #1
 800253a:	fa02 f303 	lsl.w	r3, r2, r3
 800253e:	69ba      	ldr	r2, [r7, #24]
 8002540:	4313      	orrs	r3, r2
 8002542:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	69ba      	ldr	r2, [r7, #24]
 8002548:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002550:	2201      	movs	r2, #1
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	fa02 f303 	lsl.w	r3, r2, r3
 8002558:	43db      	mvns	r3, r3
 800255a:	69ba      	ldr	r2, [r7, #24]
 800255c:	4013      	ands	r3, r2
 800255e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	091b      	lsrs	r3, r3, #4
 8002566:	f003 0201 	and.w	r2, r3, #1
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	fa02 f303 	lsl.w	r3, r2, r3
 8002570:	69ba      	ldr	r2, [r7, #24]
 8002572:	4313      	orrs	r3, r2
 8002574:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	69ba      	ldr	r2, [r7, #24]
 800257a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f003 0303 	and.w	r3, r3, #3
 8002584:	2b03      	cmp	r3, #3
 8002586:	d017      	beq.n	80025b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	005b      	lsls	r3, r3, #1
 8002592:	2203      	movs	r2, #3
 8002594:	fa02 f303 	lsl.w	r3, r2, r3
 8002598:	43db      	mvns	r3, r3
 800259a:	69ba      	ldr	r2, [r7, #24]
 800259c:	4013      	ands	r3, r2
 800259e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	689a      	ldr	r2, [r3, #8]
 80025a4:	69fb      	ldr	r3, [r7, #28]
 80025a6:	005b      	lsls	r3, r3, #1
 80025a8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ac:	69ba      	ldr	r2, [r7, #24]
 80025ae:	4313      	orrs	r3, r2
 80025b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	69ba      	ldr	r2, [r7, #24]
 80025b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	f003 0303 	and.w	r3, r3, #3
 80025c0:	2b02      	cmp	r3, #2
 80025c2:	d123      	bne.n	800260c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	08da      	lsrs	r2, r3, #3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	3208      	adds	r2, #8
 80025cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	f003 0307 	and.w	r3, r3, #7
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	220f      	movs	r2, #15
 80025dc:	fa02 f303 	lsl.w	r3, r2, r3
 80025e0:	43db      	mvns	r3, r3
 80025e2:	69ba      	ldr	r2, [r7, #24]
 80025e4:	4013      	ands	r3, r2
 80025e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	691a      	ldr	r2, [r3, #16]
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	f003 0307 	and.w	r3, r3, #7
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	fa02 f303 	lsl.w	r3, r2, r3
 80025f8:	69ba      	ldr	r2, [r7, #24]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	08da      	lsrs	r2, r3, #3
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	3208      	adds	r2, #8
 8002606:	69b9      	ldr	r1, [r7, #24]
 8002608:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	005b      	lsls	r3, r3, #1
 8002616:	2203      	movs	r2, #3
 8002618:	fa02 f303 	lsl.w	r3, r2, r3
 800261c:	43db      	mvns	r3, r3
 800261e:	69ba      	ldr	r2, [r7, #24]
 8002620:	4013      	ands	r3, r2
 8002622:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	f003 0203 	and.w	r2, r3, #3
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	005b      	lsls	r3, r3, #1
 8002630:	fa02 f303 	lsl.w	r3, r2, r3
 8002634:	69ba      	ldr	r2, [r7, #24]
 8002636:	4313      	orrs	r3, r2
 8002638:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	69ba      	ldr	r2, [r7, #24]
 800263e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002648:	2b00      	cmp	r3, #0
 800264a:	f000 80c0 	beq.w	80027ce <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800264e:	2300      	movs	r3, #0
 8002650:	60fb      	str	r3, [r7, #12]
 8002652:	4b66      	ldr	r3, [pc, #408]	; (80027ec <HAL_GPIO_Init+0x324>)
 8002654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002656:	4a65      	ldr	r2, [pc, #404]	; (80027ec <HAL_GPIO_Init+0x324>)
 8002658:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800265c:	6453      	str	r3, [r2, #68]	; 0x44
 800265e:	4b63      	ldr	r3, [pc, #396]	; (80027ec <HAL_GPIO_Init+0x324>)
 8002660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002662:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002666:	60fb      	str	r3, [r7, #12]
 8002668:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800266a:	4a61      	ldr	r2, [pc, #388]	; (80027f0 <HAL_GPIO_Init+0x328>)
 800266c:	69fb      	ldr	r3, [r7, #28]
 800266e:	089b      	lsrs	r3, r3, #2
 8002670:	3302      	adds	r3, #2
 8002672:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002676:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	f003 0303 	and.w	r3, r3, #3
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	220f      	movs	r2, #15
 8002682:	fa02 f303 	lsl.w	r3, r2, r3
 8002686:	43db      	mvns	r3, r3
 8002688:	69ba      	ldr	r2, [r7, #24]
 800268a:	4013      	ands	r3, r2
 800268c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	4a58      	ldr	r2, [pc, #352]	; (80027f4 <HAL_GPIO_Init+0x32c>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d037      	beq.n	8002706 <HAL_GPIO_Init+0x23e>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4a57      	ldr	r2, [pc, #348]	; (80027f8 <HAL_GPIO_Init+0x330>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d031      	beq.n	8002702 <HAL_GPIO_Init+0x23a>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4a56      	ldr	r2, [pc, #344]	; (80027fc <HAL_GPIO_Init+0x334>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d02b      	beq.n	80026fe <HAL_GPIO_Init+0x236>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	4a55      	ldr	r2, [pc, #340]	; (8002800 <HAL_GPIO_Init+0x338>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d025      	beq.n	80026fa <HAL_GPIO_Init+0x232>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4a54      	ldr	r2, [pc, #336]	; (8002804 <HAL_GPIO_Init+0x33c>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d01f      	beq.n	80026f6 <HAL_GPIO_Init+0x22e>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	4a53      	ldr	r2, [pc, #332]	; (8002808 <HAL_GPIO_Init+0x340>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d019      	beq.n	80026f2 <HAL_GPIO_Init+0x22a>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	4a52      	ldr	r2, [pc, #328]	; (800280c <HAL_GPIO_Init+0x344>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d013      	beq.n	80026ee <HAL_GPIO_Init+0x226>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	4a51      	ldr	r2, [pc, #324]	; (8002810 <HAL_GPIO_Init+0x348>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d00d      	beq.n	80026ea <HAL_GPIO_Init+0x222>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	4a50      	ldr	r2, [pc, #320]	; (8002814 <HAL_GPIO_Init+0x34c>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d007      	beq.n	80026e6 <HAL_GPIO_Init+0x21e>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	4a4f      	ldr	r2, [pc, #316]	; (8002818 <HAL_GPIO_Init+0x350>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d101      	bne.n	80026e2 <HAL_GPIO_Init+0x21a>
 80026de:	2309      	movs	r3, #9
 80026e0:	e012      	b.n	8002708 <HAL_GPIO_Init+0x240>
 80026e2:	230a      	movs	r3, #10
 80026e4:	e010      	b.n	8002708 <HAL_GPIO_Init+0x240>
 80026e6:	2308      	movs	r3, #8
 80026e8:	e00e      	b.n	8002708 <HAL_GPIO_Init+0x240>
 80026ea:	2307      	movs	r3, #7
 80026ec:	e00c      	b.n	8002708 <HAL_GPIO_Init+0x240>
 80026ee:	2306      	movs	r3, #6
 80026f0:	e00a      	b.n	8002708 <HAL_GPIO_Init+0x240>
 80026f2:	2305      	movs	r3, #5
 80026f4:	e008      	b.n	8002708 <HAL_GPIO_Init+0x240>
 80026f6:	2304      	movs	r3, #4
 80026f8:	e006      	b.n	8002708 <HAL_GPIO_Init+0x240>
 80026fa:	2303      	movs	r3, #3
 80026fc:	e004      	b.n	8002708 <HAL_GPIO_Init+0x240>
 80026fe:	2302      	movs	r3, #2
 8002700:	e002      	b.n	8002708 <HAL_GPIO_Init+0x240>
 8002702:	2301      	movs	r3, #1
 8002704:	e000      	b.n	8002708 <HAL_GPIO_Init+0x240>
 8002706:	2300      	movs	r3, #0
 8002708:	69fa      	ldr	r2, [r7, #28]
 800270a:	f002 0203 	and.w	r2, r2, #3
 800270e:	0092      	lsls	r2, r2, #2
 8002710:	4093      	lsls	r3, r2
 8002712:	69ba      	ldr	r2, [r7, #24]
 8002714:	4313      	orrs	r3, r2
 8002716:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002718:	4935      	ldr	r1, [pc, #212]	; (80027f0 <HAL_GPIO_Init+0x328>)
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	089b      	lsrs	r3, r3, #2
 800271e:	3302      	adds	r3, #2
 8002720:	69ba      	ldr	r2, [r7, #24]
 8002722:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002726:	4b3d      	ldr	r3, [pc, #244]	; (800281c <HAL_GPIO_Init+0x354>)
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	43db      	mvns	r3, r3
 8002730:	69ba      	ldr	r2, [r7, #24]
 8002732:	4013      	ands	r3, r2
 8002734:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d003      	beq.n	800274a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002742:	69ba      	ldr	r2, [r7, #24]
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	4313      	orrs	r3, r2
 8002748:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800274a:	4a34      	ldr	r2, [pc, #208]	; (800281c <HAL_GPIO_Init+0x354>)
 800274c:	69bb      	ldr	r3, [r7, #24]
 800274e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002750:	4b32      	ldr	r3, [pc, #200]	; (800281c <HAL_GPIO_Init+0x354>)
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	43db      	mvns	r3, r3
 800275a:	69ba      	ldr	r2, [r7, #24]
 800275c:	4013      	ands	r3, r2
 800275e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002768:	2b00      	cmp	r3, #0
 800276a:	d003      	beq.n	8002774 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800276c:	69ba      	ldr	r2, [r7, #24]
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	4313      	orrs	r3, r2
 8002772:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002774:	4a29      	ldr	r2, [pc, #164]	; (800281c <HAL_GPIO_Init+0x354>)
 8002776:	69bb      	ldr	r3, [r7, #24]
 8002778:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800277a:	4b28      	ldr	r3, [pc, #160]	; (800281c <HAL_GPIO_Init+0x354>)
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	43db      	mvns	r3, r3
 8002784:	69ba      	ldr	r2, [r7, #24]
 8002786:	4013      	ands	r3, r2
 8002788:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002792:	2b00      	cmp	r3, #0
 8002794:	d003      	beq.n	800279e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002796:	69ba      	ldr	r2, [r7, #24]
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	4313      	orrs	r3, r2
 800279c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800279e:	4a1f      	ldr	r2, [pc, #124]	; (800281c <HAL_GPIO_Init+0x354>)
 80027a0:	69bb      	ldr	r3, [r7, #24]
 80027a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027a4:	4b1d      	ldr	r3, [pc, #116]	; (800281c <HAL_GPIO_Init+0x354>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	43db      	mvns	r3, r3
 80027ae:	69ba      	ldr	r2, [r7, #24]
 80027b0:	4013      	ands	r3, r2
 80027b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d003      	beq.n	80027c8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80027c0:	69ba      	ldr	r2, [r7, #24]
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	4313      	orrs	r3, r2
 80027c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027c8:	4a14      	ldr	r2, [pc, #80]	; (800281c <HAL_GPIO_Init+0x354>)
 80027ca:	69bb      	ldr	r3, [r7, #24]
 80027cc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	3301      	adds	r3, #1
 80027d2:	61fb      	str	r3, [r7, #28]
 80027d4:	69fb      	ldr	r3, [r7, #28]
 80027d6:	2b0f      	cmp	r3, #15
 80027d8:	f67f ae84 	bls.w	80024e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80027dc:	bf00      	nop
 80027de:	bf00      	nop
 80027e0:	3724      	adds	r7, #36	; 0x24
 80027e2:	46bd      	mov	sp, r7
 80027e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e8:	4770      	bx	lr
 80027ea:	bf00      	nop
 80027ec:	40023800 	.word	0x40023800
 80027f0:	40013800 	.word	0x40013800
 80027f4:	40020000 	.word	0x40020000
 80027f8:	40020400 	.word	0x40020400
 80027fc:	40020800 	.word	0x40020800
 8002800:	40020c00 	.word	0x40020c00
 8002804:	40021000 	.word	0x40021000
 8002808:	40021400 	.word	0x40021400
 800280c:	40021800 	.word	0x40021800
 8002810:	40021c00 	.word	0x40021c00
 8002814:	40022000 	.word	0x40022000
 8002818:	40022400 	.word	0x40022400
 800281c:	40013c00 	.word	0x40013c00

08002820 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002820:	b480      	push	{r7}
 8002822:	b083      	sub	sp, #12
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
 8002828:	460b      	mov	r3, r1
 800282a:	807b      	strh	r3, [r7, #2]
 800282c:	4613      	mov	r3, r2
 800282e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002830:	787b      	ldrb	r3, [r7, #1]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d003      	beq.n	800283e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002836:	887a      	ldrh	r2, [r7, #2]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800283c:	e003      	b.n	8002846 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800283e:	887b      	ldrh	r3, [r7, #2]
 8002840:	041a      	lsls	r2, r3, #16
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	619a      	str	r2, [r3, #24]
}
 8002846:	bf00      	nop
 8002848:	370c      	adds	r7, #12
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr

08002852 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002852:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002854:	b08f      	sub	sp, #60	; 0x3c
 8002856:	af0a      	add	r7, sp, #40	; 0x28
 8002858:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d101      	bne.n	8002864 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	e10f      	b.n	8002a84 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002870:	b2db      	uxtb	r3, r3
 8002872:	2b00      	cmp	r3, #0
 8002874:	d106      	bne.n	8002884 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2200      	movs	r2, #0
 800287a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	f7ff f880 	bl	8001984 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2203      	movs	r2, #3
 8002888:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002890:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002894:	2b00      	cmp	r3, #0
 8002896:	d102      	bne.n	800289e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2200      	movs	r2, #0
 800289c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4618      	mov	r0, r3
 80028a4:	f001 fc0d 	bl	80040c2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	603b      	str	r3, [r7, #0]
 80028ae:	687e      	ldr	r6, [r7, #4]
 80028b0:	466d      	mov	r5, sp
 80028b2:	f106 0410 	add.w	r4, r6, #16
 80028b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028be:	e894 0003 	ldmia.w	r4, {r0, r1}
 80028c2:	e885 0003 	stmia.w	r5, {r0, r1}
 80028c6:	1d33      	adds	r3, r6, #4
 80028c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80028ca:	6838      	ldr	r0, [r7, #0]
 80028cc:	f001 fb98 	bl	8004000 <USB_CoreInit>
 80028d0:	4603      	mov	r3, r0
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d005      	beq.n	80028e2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2202      	movs	r2, #2
 80028da:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e0d0      	b.n	8002a84 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	2100      	movs	r1, #0
 80028e8:	4618      	mov	r0, r3
 80028ea:	f001 fbfb 	bl	80040e4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028ee:	2300      	movs	r3, #0
 80028f0:	73fb      	strb	r3, [r7, #15]
 80028f2:	e04a      	b.n	800298a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80028f4:	7bfa      	ldrb	r2, [r7, #15]
 80028f6:	6879      	ldr	r1, [r7, #4]
 80028f8:	4613      	mov	r3, r2
 80028fa:	00db      	lsls	r3, r3, #3
 80028fc:	4413      	add	r3, r2
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	440b      	add	r3, r1
 8002902:	333d      	adds	r3, #61	; 0x3d
 8002904:	2201      	movs	r2, #1
 8002906:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002908:	7bfa      	ldrb	r2, [r7, #15]
 800290a:	6879      	ldr	r1, [r7, #4]
 800290c:	4613      	mov	r3, r2
 800290e:	00db      	lsls	r3, r3, #3
 8002910:	4413      	add	r3, r2
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	440b      	add	r3, r1
 8002916:	333c      	adds	r3, #60	; 0x3c
 8002918:	7bfa      	ldrb	r2, [r7, #15]
 800291a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800291c:	7bfa      	ldrb	r2, [r7, #15]
 800291e:	7bfb      	ldrb	r3, [r7, #15]
 8002920:	b298      	uxth	r0, r3
 8002922:	6879      	ldr	r1, [r7, #4]
 8002924:	4613      	mov	r3, r2
 8002926:	00db      	lsls	r3, r3, #3
 8002928:	4413      	add	r3, r2
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	440b      	add	r3, r1
 800292e:	3344      	adds	r3, #68	; 0x44
 8002930:	4602      	mov	r2, r0
 8002932:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002934:	7bfa      	ldrb	r2, [r7, #15]
 8002936:	6879      	ldr	r1, [r7, #4]
 8002938:	4613      	mov	r3, r2
 800293a:	00db      	lsls	r3, r3, #3
 800293c:	4413      	add	r3, r2
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	440b      	add	r3, r1
 8002942:	3340      	adds	r3, #64	; 0x40
 8002944:	2200      	movs	r2, #0
 8002946:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002948:	7bfa      	ldrb	r2, [r7, #15]
 800294a:	6879      	ldr	r1, [r7, #4]
 800294c:	4613      	mov	r3, r2
 800294e:	00db      	lsls	r3, r3, #3
 8002950:	4413      	add	r3, r2
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	440b      	add	r3, r1
 8002956:	3348      	adds	r3, #72	; 0x48
 8002958:	2200      	movs	r2, #0
 800295a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800295c:	7bfa      	ldrb	r2, [r7, #15]
 800295e:	6879      	ldr	r1, [r7, #4]
 8002960:	4613      	mov	r3, r2
 8002962:	00db      	lsls	r3, r3, #3
 8002964:	4413      	add	r3, r2
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	440b      	add	r3, r1
 800296a:	334c      	adds	r3, #76	; 0x4c
 800296c:	2200      	movs	r2, #0
 800296e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002970:	7bfa      	ldrb	r2, [r7, #15]
 8002972:	6879      	ldr	r1, [r7, #4]
 8002974:	4613      	mov	r3, r2
 8002976:	00db      	lsls	r3, r3, #3
 8002978:	4413      	add	r3, r2
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	440b      	add	r3, r1
 800297e:	3354      	adds	r3, #84	; 0x54
 8002980:	2200      	movs	r2, #0
 8002982:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002984:	7bfb      	ldrb	r3, [r7, #15]
 8002986:	3301      	adds	r3, #1
 8002988:	73fb      	strb	r3, [r7, #15]
 800298a:	7bfa      	ldrb	r2, [r7, #15]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	429a      	cmp	r2, r3
 8002992:	d3af      	bcc.n	80028f4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002994:	2300      	movs	r3, #0
 8002996:	73fb      	strb	r3, [r7, #15]
 8002998:	e044      	b.n	8002a24 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800299a:	7bfa      	ldrb	r2, [r7, #15]
 800299c:	6879      	ldr	r1, [r7, #4]
 800299e:	4613      	mov	r3, r2
 80029a0:	00db      	lsls	r3, r3, #3
 80029a2:	4413      	add	r3, r2
 80029a4:	009b      	lsls	r3, r3, #2
 80029a6:	440b      	add	r3, r1
 80029a8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80029ac:	2200      	movs	r2, #0
 80029ae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80029b0:	7bfa      	ldrb	r2, [r7, #15]
 80029b2:	6879      	ldr	r1, [r7, #4]
 80029b4:	4613      	mov	r3, r2
 80029b6:	00db      	lsls	r3, r3, #3
 80029b8:	4413      	add	r3, r2
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	440b      	add	r3, r1
 80029be:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80029c2:	7bfa      	ldrb	r2, [r7, #15]
 80029c4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80029c6:	7bfa      	ldrb	r2, [r7, #15]
 80029c8:	6879      	ldr	r1, [r7, #4]
 80029ca:	4613      	mov	r3, r2
 80029cc:	00db      	lsls	r3, r3, #3
 80029ce:	4413      	add	r3, r2
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	440b      	add	r3, r1
 80029d4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80029d8:	2200      	movs	r2, #0
 80029da:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80029dc:	7bfa      	ldrb	r2, [r7, #15]
 80029de:	6879      	ldr	r1, [r7, #4]
 80029e0:	4613      	mov	r3, r2
 80029e2:	00db      	lsls	r3, r3, #3
 80029e4:	4413      	add	r3, r2
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	440b      	add	r3, r1
 80029ea:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80029ee:	2200      	movs	r2, #0
 80029f0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80029f2:	7bfa      	ldrb	r2, [r7, #15]
 80029f4:	6879      	ldr	r1, [r7, #4]
 80029f6:	4613      	mov	r3, r2
 80029f8:	00db      	lsls	r3, r3, #3
 80029fa:	4413      	add	r3, r2
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	440b      	add	r3, r1
 8002a00:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002a04:	2200      	movs	r2, #0
 8002a06:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002a08:	7bfa      	ldrb	r2, [r7, #15]
 8002a0a:	6879      	ldr	r1, [r7, #4]
 8002a0c:	4613      	mov	r3, r2
 8002a0e:	00db      	lsls	r3, r3, #3
 8002a10:	4413      	add	r3, r2
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	440b      	add	r3, r1
 8002a16:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a1e:	7bfb      	ldrb	r3, [r7, #15]
 8002a20:	3301      	adds	r3, #1
 8002a22:	73fb      	strb	r3, [r7, #15]
 8002a24:	7bfa      	ldrb	r2, [r7, #15]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	429a      	cmp	r2, r3
 8002a2c:	d3b5      	bcc.n	800299a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	603b      	str	r3, [r7, #0]
 8002a34:	687e      	ldr	r6, [r7, #4]
 8002a36:	466d      	mov	r5, sp
 8002a38:	f106 0410 	add.w	r4, r6, #16
 8002a3c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a3e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a40:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a42:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a44:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002a48:	e885 0003 	stmia.w	r5, {r0, r1}
 8002a4c:	1d33      	adds	r3, r6, #4
 8002a4e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a50:	6838      	ldr	r0, [r7, #0]
 8002a52:	f001 fb93 	bl	800417c <USB_DevInit>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d005      	beq.n	8002a68 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2202      	movs	r2, #2
 8002a60:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	e00d      	b.n	8002a84 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2201      	movs	r2, #1
 8002a74:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f001 fd5e 	bl	800453e <USB_DevDisconnect>

  return HAL_OK;
 8002a82:	2300      	movs	r3, #0
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	3714      	adds	r7, #20
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002a8c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b086      	sub	sp, #24
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d101      	bne.n	8002a9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e267      	b.n	8002f6e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 0301 	and.w	r3, r3, #1
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d075      	beq.n	8002b96 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002aaa:	4b88      	ldr	r3, [pc, #544]	; (8002ccc <HAL_RCC_OscConfig+0x240>)
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	f003 030c 	and.w	r3, r3, #12
 8002ab2:	2b04      	cmp	r3, #4
 8002ab4:	d00c      	beq.n	8002ad0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ab6:	4b85      	ldr	r3, [pc, #532]	; (8002ccc <HAL_RCC_OscConfig+0x240>)
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002abe:	2b08      	cmp	r3, #8
 8002ac0:	d112      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ac2:	4b82      	ldr	r3, [pc, #520]	; (8002ccc <HAL_RCC_OscConfig+0x240>)
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002aca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ace:	d10b      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ad0:	4b7e      	ldr	r3, [pc, #504]	; (8002ccc <HAL_RCC_OscConfig+0x240>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d05b      	beq.n	8002b94 <HAL_RCC_OscConfig+0x108>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d157      	bne.n	8002b94 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	e242      	b.n	8002f6e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002af0:	d106      	bne.n	8002b00 <HAL_RCC_OscConfig+0x74>
 8002af2:	4b76      	ldr	r3, [pc, #472]	; (8002ccc <HAL_RCC_OscConfig+0x240>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a75      	ldr	r2, [pc, #468]	; (8002ccc <HAL_RCC_OscConfig+0x240>)
 8002af8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002afc:	6013      	str	r3, [r2, #0]
 8002afe:	e01d      	b.n	8002b3c <HAL_RCC_OscConfig+0xb0>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b08:	d10c      	bne.n	8002b24 <HAL_RCC_OscConfig+0x98>
 8002b0a:	4b70      	ldr	r3, [pc, #448]	; (8002ccc <HAL_RCC_OscConfig+0x240>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a6f      	ldr	r2, [pc, #444]	; (8002ccc <HAL_RCC_OscConfig+0x240>)
 8002b10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b14:	6013      	str	r3, [r2, #0]
 8002b16:	4b6d      	ldr	r3, [pc, #436]	; (8002ccc <HAL_RCC_OscConfig+0x240>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a6c      	ldr	r2, [pc, #432]	; (8002ccc <HAL_RCC_OscConfig+0x240>)
 8002b1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b20:	6013      	str	r3, [r2, #0]
 8002b22:	e00b      	b.n	8002b3c <HAL_RCC_OscConfig+0xb0>
 8002b24:	4b69      	ldr	r3, [pc, #420]	; (8002ccc <HAL_RCC_OscConfig+0x240>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a68      	ldr	r2, [pc, #416]	; (8002ccc <HAL_RCC_OscConfig+0x240>)
 8002b2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b2e:	6013      	str	r3, [r2, #0]
 8002b30:	4b66      	ldr	r3, [pc, #408]	; (8002ccc <HAL_RCC_OscConfig+0x240>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a65      	ldr	r2, [pc, #404]	; (8002ccc <HAL_RCC_OscConfig+0x240>)
 8002b36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d013      	beq.n	8002b6c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b44:	f7ff f886 	bl	8001c54 <HAL_GetTick>
 8002b48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b4a:	e008      	b.n	8002b5e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b4c:	f7ff f882 	bl	8001c54 <HAL_GetTick>
 8002b50:	4602      	mov	r2, r0
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	2b64      	cmp	r3, #100	; 0x64
 8002b58:	d901      	bls.n	8002b5e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	e207      	b.n	8002f6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b5e:	4b5b      	ldr	r3, [pc, #364]	; (8002ccc <HAL_RCC_OscConfig+0x240>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d0f0      	beq.n	8002b4c <HAL_RCC_OscConfig+0xc0>
 8002b6a:	e014      	b.n	8002b96 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b6c:	f7ff f872 	bl	8001c54 <HAL_GetTick>
 8002b70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b72:	e008      	b.n	8002b86 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b74:	f7ff f86e 	bl	8001c54 <HAL_GetTick>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	2b64      	cmp	r3, #100	; 0x64
 8002b80:	d901      	bls.n	8002b86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	e1f3      	b.n	8002f6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b86:	4b51      	ldr	r3, [pc, #324]	; (8002ccc <HAL_RCC_OscConfig+0x240>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d1f0      	bne.n	8002b74 <HAL_RCC_OscConfig+0xe8>
 8002b92:	e000      	b.n	8002b96 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0302 	and.w	r3, r3, #2
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d063      	beq.n	8002c6a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ba2:	4b4a      	ldr	r3, [pc, #296]	; (8002ccc <HAL_RCC_OscConfig+0x240>)
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	f003 030c 	and.w	r3, r3, #12
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d00b      	beq.n	8002bc6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bae:	4b47      	ldr	r3, [pc, #284]	; (8002ccc <HAL_RCC_OscConfig+0x240>)
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002bb6:	2b08      	cmp	r3, #8
 8002bb8:	d11c      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bba:	4b44      	ldr	r3, [pc, #272]	; (8002ccc <HAL_RCC_OscConfig+0x240>)
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d116      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bc6:	4b41      	ldr	r3, [pc, #260]	; (8002ccc <HAL_RCC_OscConfig+0x240>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 0302 	and.w	r3, r3, #2
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d005      	beq.n	8002bde <HAL_RCC_OscConfig+0x152>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	68db      	ldr	r3, [r3, #12]
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d001      	beq.n	8002bde <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e1c7      	b.n	8002f6e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bde:	4b3b      	ldr	r3, [pc, #236]	; (8002ccc <HAL_RCC_OscConfig+0x240>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	691b      	ldr	r3, [r3, #16]
 8002bea:	00db      	lsls	r3, r3, #3
 8002bec:	4937      	ldr	r1, [pc, #220]	; (8002ccc <HAL_RCC_OscConfig+0x240>)
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bf2:	e03a      	b.n	8002c6a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d020      	beq.n	8002c3e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bfc:	4b34      	ldr	r3, [pc, #208]	; (8002cd0 <HAL_RCC_OscConfig+0x244>)
 8002bfe:	2201      	movs	r2, #1
 8002c00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c02:	f7ff f827 	bl	8001c54 <HAL_GetTick>
 8002c06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c08:	e008      	b.n	8002c1c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c0a:	f7ff f823 	bl	8001c54 <HAL_GetTick>
 8002c0e:	4602      	mov	r2, r0
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	1ad3      	subs	r3, r2, r3
 8002c14:	2b02      	cmp	r3, #2
 8002c16:	d901      	bls.n	8002c1c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002c18:	2303      	movs	r3, #3
 8002c1a:	e1a8      	b.n	8002f6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c1c:	4b2b      	ldr	r3, [pc, #172]	; (8002ccc <HAL_RCC_OscConfig+0x240>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 0302 	and.w	r3, r3, #2
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d0f0      	beq.n	8002c0a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c28:	4b28      	ldr	r3, [pc, #160]	; (8002ccc <HAL_RCC_OscConfig+0x240>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	691b      	ldr	r3, [r3, #16]
 8002c34:	00db      	lsls	r3, r3, #3
 8002c36:	4925      	ldr	r1, [pc, #148]	; (8002ccc <HAL_RCC_OscConfig+0x240>)
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	600b      	str	r3, [r1, #0]
 8002c3c:	e015      	b.n	8002c6a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c3e:	4b24      	ldr	r3, [pc, #144]	; (8002cd0 <HAL_RCC_OscConfig+0x244>)
 8002c40:	2200      	movs	r2, #0
 8002c42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c44:	f7ff f806 	bl	8001c54 <HAL_GetTick>
 8002c48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c4a:	e008      	b.n	8002c5e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c4c:	f7ff f802 	bl	8001c54 <HAL_GetTick>
 8002c50:	4602      	mov	r2, r0
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	1ad3      	subs	r3, r2, r3
 8002c56:	2b02      	cmp	r3, #2
 8002c58:	d901      	bls.n	8002c5e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	e187      	b.n	8002f6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c5e:	4b1b      	ldr	r3, [pc, #108]	; (8002ccc <HAL_RCC_OscConfig+0x240>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 0302 	and.w	r3, r3, #2
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d1f0      	bne.n	8002c4c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 0308 	and.w	r3, r3, #8
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d036      	beq.n	8002ce4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	695b      	ldr	r3, [r3, #20]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d016      	beq.n	8002cac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c7e:	4b15      	ldr	r3, [pc, #84]	; (8002cd4 <HAL_RCC_OscConfig+0x248>)
 8002c80:	2201      	movs	r2, #1
 8002c82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c84:	f7fe ffe6 	bl	8001c54 <HAL_GetTick>
 8002c88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c8a:	e008      	b.n	8002c9e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c8c:	f7fe ffe2 	bl	8001c54 <HAL_GetTick>
 8002c90:	4602      	mov	r2, r0
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	2b02      	cmp	r3, #2
 8002c98:	d901      	bls.n	8002c9e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	e167      	b.n	8002f6e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c9e:	4b0b      	ldr	r3, [pc, #44]	; (8002ccc <HAL_RCC_OscConfig+0x240>)
 8002ca0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ca2:	f003 0302 	and.w	r3, r3, #2
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d0f0      	beq.n	8002c8c <HAL_RCC_OscConfig+0x200>
 8002caa:	e01b      	b.n	8002ce4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cac:	4b09      	ldr	r3, [pc, #36]	; (8002cd4 <HAL_RCC_OscConfig+0x248>)
 8002cae:	2200      	movs	r2, #0
 8002cb0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cb2:	f7fe ffcf 	bl	8001c54 <HAL_GetTick>
 8002cb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cb8:	e00e      	b.n	8002cd8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cba:	f7fe ffcb 	bl	8001c54 <HAL_GetTick>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	1ad3      	subs	r3, r2, r3
 8002cc4:	2b02      	cmp	r3, #2
 8002cc6:	d907      	bls.n	8002cd8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002cc8:	2303      	movs	r3, #3
 8002cca:	e150      	b.n	8002f6e <HAL_RCC_OscConfig+0x4e2>
 8002ccc:	40023800 	.word	0x40023800
 8002cd0:	42470000 	.word	0x42470000
 8002cd4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cd8:	4b88      	ldr	r3, [pc, #544]	; (8002efc <HAL_RCC_OscConfig+0x470>)
 8002cda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cdc:	f003 0302 	and.w	r3, r3, #2
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d1ea      	bne.n	8002cba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0304 	and.w	r3, r3, #4
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	f000 8097 	beq.w	8002e20 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cf6:	4b81      	ldr	r3, [pc, #516]	; (8002efc <HAL_RCC_OscConfig+0x470>)
 8002cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d10f      	bne.n	8002d22 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d02:	2300      	movs	r3, #0
 8002d04:	60bb      	str	r3, [r7, #8]
 8002d06:	4b7d      	ldr	r3, [pc, #500]	; (8002efc <HAL_RCC_OscConfig+0x470>)
 8002d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0a:	4a7c      	ldr	r2, [pc, #496]	; (8002efc <HAL_RCC_OscConfig+0x470>)
 8002d0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d10:	6413      	str	r3, [r2, #64]	; 0x40
 8002d12:	4b7a      	ldr	r3, [pc, #488]	; (8002efc <HAL_RCC_OscConfig+0x470>)
 8002d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d1a:	60bb      	str	r3, [r7, #8]
 8002d1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d22:	4b77      	ldr	r3, [pc, #476]	; (8002f00 <HAL_RCC_OscConfig+0x474>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d118      	bne.n	8002d60 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d2e:	4b74      	ldr	r3, [pc, #464]	; (8002f00 <HAL_RCC_OscConfig+0x474>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a73      	ldr	r2, [pc, #460]	; (8002f00 <HAL_RCC_OscConfig+0x474>)
 8002d34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d3a:	f7fe ff8b 	bl	8001c54 <HAL_GetTick>
 8002d3e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d40:	e008      	b.n	8002d54 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d42:	f7fe ff87 	bl	8001c54 <HAL_GetTick>
 8002d46:	4602      	mov	r2, r0
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	1ad3      	subs	r3, r2, r3
 8002d4c:	2b02      	cmp	r3, #2
 8002d4e:	d901      	bls.n	8002d54 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002d50:	2303      	movs	r3, #3
 8002d52:	e10c      	b.n	8002f6e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d54:	4b6a      	ldr	r3, [pc, #424]	; (8002f00 <HAL_RCC_OscConfig+0x474>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d0f0      	beq.n	8002d42 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d106      	bne.n	8002d76 <HAL_RCC_OscConfig+0x2ea>
 8002d68:	4b64      	ldr	r3, [pc, #400]	; (8002efc <HAL_RCC_OscConfig+0x470>)
 8002d6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d6c:	4a63      	ldr	r2, [pc, #396]	; (8002efc <HAL_RCC_OscConfig+0x470>)
 8002d6e:	f043 0301 	orr.w	r3, r3, #1
 8002d72:	6713      	str	r3, [r2, #112]	; 0x70
 8002d74:	e01c      	b.n	8002db0 <HAL_RCC_OscConfig+0x324>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	2b05      	cmp	r3, #5
 8002d7c:	d10c      	bne.n	8002d98 <HAL_RCC_OscConfig+0x30c>
 8002d7e:	4b5f      	ldr	r3, [pc, #380]	; (8002efc <HAL_RCC_OscConfig+0x470>)
 8002d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d82:	4a5e      	ldr	r2, [pc, #376]	; (8002efc <HAL_RCC_OscConfig+0x470>)
 8002d84:	f043 0304 	orr.w	r3, r3, #4
 8002d88:	6713      	str	r3, [r2, #112]	; 0x70
 8002d8a:	4b5c      	ldr	r3, [pc, #368]	; (8002efc <HAL_RCC_OscConfig+0x470>)
 8002d8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d8e:	4a5b      	ldr	r2, [pc, #364]	; (8002efc <HAL_RCC_OscConfig+0x470>)
 8002d90:	f043 0301 	orr.w	r3, r3, #1
 8002d94:	6713      	str	r3, [r2, #112]	; 0x70
 8002d96:	e00b      	b.n	8002db0 <HAL_RCC_OscConfig+0x324>
 8002d98:	4b58      	ldr	r3, [pc, #352]	; (8002efc <HAL_RCC_OscConfig+0x470>)
 8002d9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d9c:	4a57      	ldr	r2, [pc, #348]	; (8002efc <HAL_RCC_OscConfig+0x470>)
 8002d9e:	f023 0301 	bic.w	r3, r3, #1
 8002da2:	6713      	str	r3, [r2, #112]	; 0x70
 8002da4:	4b55      	ldr	r3, [pc, #340]	; (8002efc <HAL_RCC_OscConfig+0x470>)
 8002da6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002da8:	4a54      	ldr	r2, [pc, #336]	; (8002efc <HAL_RCC_OscConfig+0x470>)
 8002daa:	f023 0304 	bic.w	r3, r3, #4
 8002dae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d015      	beq.n	8002de4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002db8:	f7fe ff4c 	bl	8001c54 <HAL_GetTick>
 8002dbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dbe:	e00a      	b.n	8002dd6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002dc0:	f7fe ff48 	bl	8001c54 <HAL_GetTick>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d901      	bls.n	8002dd6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e0cb      	b.n	8002f6e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dd6:	4b49      	ldr	r3, [pc, #292]	; (8002efc <HAL_RCC_OscConfig+0x470>)
 8002dd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dda:	f003 0302 	and.w	r3, r3, #2
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d0ee      	beq.n	8002dc0 <HAL_RCC_OscConfig+0x334>
 8002de2:	e014      	b.n	8002e0e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002de4:	f7fe ff36 	bl	8001c54 <HAL_GetTick>
 8002de8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dea:	e00a      	b.n	8002e02 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002dec:	f7fe ff32 	bl	8001c54 <HAL_GetTick>
 8002df0:	4602      	mov	r2, r0
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d901      	bls.n	8002e02 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	e0b5      	b.n	8002f6e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e02:	4b3e      	ldr	r3, [pc, #248]	; (8002efc <HAL_RCC_OscConfig+0x470>)
 8002e04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e06:	f003 0302 	and.w	r3, r3, #2
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d1ee      	bne.n	8002dec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e0e:	7dfb      	ldrb	r3, [r7, #23]
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d105      	bne.n	8002e20 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e14:	4b39      	ldr	r3, [pc, #228]	; (8002efc <HAL_RCC_OscConfig+0x470>)
 8002e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e18:	4a38      	ldr	r2, [pc, #224]	; (8002efc <HAL_RCC_OscConfig+0x470>)
 8002e1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e1e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	699b      	ldr	r3, [r3, #24]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	f000 80a1 	beq.w	8002f6c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e2a:	4b34      	ldr	r3, [pc, #208]	; (8002efc <HAL_RCC_OscConfig+0x470>)
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	f003 030c 	and.w	r3, r3, #12
 8002e32:	2b08      	cmp	r3, #8
 8002e34:	d05c      	beq.n	8002ef0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	699b      	ldr	r3, [r3, #24]
 8002e3a:	2b02      	cmp	r3, #2
 8002e3c:	d141      	bne.n	8002ec2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e3e:	4b31      	ldr	r3, [pc, #196]	; (8002f04 <HAL_RCC_OscConfig+0x478>)
 8002e40:	2200      	movs	r2, #0
 8002e42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e44:	f7fe ff06 	bl	8001c54 <HAL_GetTick>
 8002e48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e4a:	e008      	b.n	8002e5e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e4c:	f7fe ff02 	bl	8001c54 <HAL_GetTick>
 8002e50:	4602      	mov	r2, r0
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	2b02      	cmp	r3, #2
 8002e58:	d901      	bls.n	8002e5e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	e087      	b.n	8002f6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e5e:	4b27      	ldr	r3, [pc, #156]	; (8002efc <HAL_RCC_OscConfig+0x470>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d1f0      	bne.n	8002e4c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	69da      	ldr	r2, [r3, #28]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6a1b      	ldr	r3, [r3, #32]
 8002e72:	431a      	orrs	r2, r3
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e78:	019b      	lsls	r3, r3, #6
 8002e7a:	431a      	orrs	r2, r3
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e80:	085b      	lsrs	r3, r3, #1
 8002e82:	3b01      	subs	r3, #1
 8002e84:	041b      	lsls	r3, r3, #16
 8002e86:	431a      	orrs	r2, r3
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e8c:	061b      	lsls	r3, r3, #24
 8002e8e:	491b      	ldr	r1, [pc, #108]	; (8002efc <HAL_RCC_OscConfig+0x470>)
 8002e90:	4313      	orrs	r3, r2
 8002e92:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e94:	4b1b      	ldr	r3, [pc, #108]	; (8002f04 <HAL_RCC_OscConfig+0x478>)
 8002e96:	2201      	movs	r2, #1
 8002e98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e9a:	f7fe fedb 	bl	8001c54 <HAL_GetTick>
 8002e9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ea0:	e008      	b.n	8002eb4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ea2:	f7fe fed7 	bl	8001c54 <HAL_GetTick>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	1ad3      	subs	r3, r2, r3
 8002eac:	2b02      	cmp	r3, #2
 8002eae:	d901      	bls.n	8002eb4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002eb0:	2303      	movs	r3, #3
 8002eb2:	e05c      	b.n	8002f6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002eb4:	4b11      	ldr	r3, [pc, #68]	; (8002efc <HAL_RCC_OscConfig+0x470>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d0f0      	beq.n	8002ea2 <HAL_RCC_OscConfig+0x416>
 8002ec0:	e054      	b.n	8002f6c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ec2:	4b10      	ldr	r3, [pc, #64]	; (8002f04 <HAL_RCC_OscConfig+0x478>)
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ec8:	f7fe fec4 	bl	8001c54 <HAL_GetTick>
 8002ecc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ece:	e008      	b.n	8002ee2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ed0:	f7fe fec0 	bl	8001c54 <HAL_GetTick>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	2b02      	cmp	r3, #2
 8002edc:	d901      	bls.n	8002ee2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	e045      	b.n	8002f6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ee2:	4b06      	ldr	r3, [pc, #24]	; (8002efc <HAL_RCC_OscConfig+0x470>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d1f0      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x444>
 8002eee:	e03d      	b.n	8002f6c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	699b      	ldr	r3, [r3, #24]
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d107      	bne.n	8002f08 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	e038      	b.n	8002f6e <HAL_RCC_OscConfig+0x4e2>
 8002efc:	40023800 	.word	0x40023800
 8002f00:	40007000 	.word	0x40007000
 8002f04:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002f08:	4b1b      	ldr	r3, [pc, #108]	; (8002f78 <HAL_RCC_OscConfig+0x4ec>)
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	699b      	ldr	r3, [r3, #24]
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d028      	beq.n	8002f68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d121      	bne.n	8002f68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	d11a      	bne.n	8002f68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f32:	68fa      	ldr	r2, [r7, #12]
 8002f34:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002f38:	4013      	ands	r3, r2
 8002f3a:	687a      	ldr	r2, [r7, #4]
 8002f3c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002f3e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d111      	bne.n	8002f68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f4e:	085b      	lsrs	r3, r3, #1
 8002f50:	3b01      	subs	r3, #1
 8002f52:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d107      	bne.n	8002f68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f62:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d001      	beq.n	8002f6c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e000      	b.n	8002f6e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002f6c:	2300      	movs	r3, #0
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3718      	adds	r7, #24
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop
 8002f78:	40023800 	.word	0x40023800

08002f7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b084      	sub	sp, #16
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d101      	bne.n	8002f90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	e0cc      	b.n	800312a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f90:	4b68      	ldr	r3, [pc, #416]	; (8003134 <HAL_RCC_ClockConfig+0x1b8>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 030f 	and.w	r3, r3, #15
 8002f98:	683a      	ldr	r2, [r7, #0]
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	d90c      	bls.n	8002fb8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f9e:	4b65      	ldr	r3, [pc, #404]	; (8003134 <HAL_RCC_ClockConfig+0x1b8>)
 8002fa0:	683a      	ldr	r2, [r7, #0]
 8002fa2:	b2d2      	uxtb	r2, r2
 8002fa4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fa6:	4b63      	ldr	r3, [pc, #396]	; (8003134 <HAL_RCC_ClockConfig+0x1b8>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 030f 	and.w	r3, r3, #15
 8002fae:	683a      	ldr	r2, [r7, #0]
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d001      	beq.n	8002fb8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e0b8      	b.n	800312a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 0302 	and.w	r3, r3, #2
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d020      	beq.n	8003006 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 0304 	and.w	r3, r3, #4
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d005      	beq.n	8002fdc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fd0:	4b59      	ldr	r3, [pc, #356]	; (8003138 <HAL_RCC_ClockConfig+0x1bc>)
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	4a58      	ldr	r2, [pc, #352]	; (8003138 <HAL_RCC_ClockConfig+0x1bc>)
 8002fd6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002fda:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 0308 	and.w	r3, r3, #8
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d005      	beq.n	8002ff4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002fe8:	4b53      	ldr	r3, [pc, #332]	; (8003138 <HAL_RCC_ClockConfig+0x1bc>)
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	4a52      	ldr	r2, [pc, #328]	; (8003138 <HAL_RCC_ClockConfig+0x1bc>)
 8002fee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002ff2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ff4:	4b50      	ldr	r3, [pc, #320]	; (8003138 <HAL_RCC_ClockConfig+0x1bc>)
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	494d      	ldr	r1, [pc, #308]	; (8003138 <HAL_RCC_ClockConfig+0x1bc>)
 8003002:	4313      	orrs	r3, r2
 8003004:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 0301 	and.w	r3, r3, #1
 800300e:	2b00      	cmp	r3, #0
 8003010:	d044      	beq.n	800309c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	2b01      	cmp	r3, #1
 8003018:	d107      	bne.n	800302a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800301a:	4b47      	ldr	r3, [pc, #284]	; (8003138 <HAL_RCC_ClockConfig+0x1bc>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d119      	bne.n	800305a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e07f      	b.n	800312a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	2b02      	cmp	r3, #2
 8003030:	d003      	beq.n	800303a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003036:	2b03      	cmp	r3, #3
 8003038:	d107      	bne.n	800304a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800303a:	4b3f      	ldr	r3, [pc, #252]	; (8003138 <HAL_RCC_ClockConfig+0x1bc>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003042:	2b00      	cmp	r3, #0
 8003044:	d109      	bne.n	800305a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e06f      	b.n	800312a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800304a:	4b3b      	ldr	r3, [pc, #236]	; (8003138 <HAL_RCC_ClockConfig+0x1bc>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 0302 	and.w	r3, r3, #2
 8003052:	2b00      	cmp	r3, #0
 8003054:	d101      	bne.n	800305a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	e067      	b.n	800312a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800305a:	4b37      	ldr	r3, [pc, #220]	; (8003138 <HAL_RCC_ClockConfig+0x1bc>)
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	f023 0203 	bic.w	r2, r3, #3
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	4934      	ldr	r1, [pc, #208]	; (8003138 <HAL_RCC_ClockConfig+0x1bc>)
 8003068:	4313      	orrs	r3, r2
 800306a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800306c:	f7fe fdf2 	bl	8001c54 <HAL_GetTick>
 8003070:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003072:	e00a      	b.n	800308a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003074:	f7fe fdee 	bl	8001c54 <HAL_GetTick>
 8003078:	4602      	mov	r2, r0
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003082:	4293      	cmp	r3, r2
 8003084:	d901      	bls.n	800308a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003086:	2303      	movs	r3, #3
 8003088:	e04f      	b.n	800312a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800308a:	4b2b      	ldr	r3, [pc, #172]	; (8003138 <HAL_RCC_ClockConfig+0x1bc>)
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	f003 020c 	and.w	r2, r3, #12
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	429a      	cmp	r2, r3
 800309a:	d1eb      	bne.n	8003074 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800309c:	4b25      	ldr	r3, [pc, #148]	; (8003134 <HAL_RCC_ClockConfig+0x1b8>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 030f 	and.w	r3, r3, #15
 80030a4:	683a      	ldr	r2, [r7, #0]
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d20c      	bcs.n	80030c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030aa:	4b22      	ldr	r3, [pc, #136]	; (8003134 <HAL_RCC_ClockConfig+0x1b8>)
 80030ac:	683a      	ldr	r2, [r7, #0]
 80030ae:	b2d2      	uxtb	r2, r2
 80030b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030b2:	4b20      	ldr	r3, [pc, #128]	; (8003134 <HAL_RCC_ClockConfig+0x1b8>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 030f 	and.w	r3, r3, #15
 80030ba:	683a      	ldr	r2, [r7, #0]
 80030bc:	429a      	cmp	r2, r3
 80030be:	d001      	beq.n	80030c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e032      	b.n	800312a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 0304 	and.w	r3, r3, #4
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d008      	beq.n	80030e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030d0:	4b19      	ldr	r3, [pc, #100]	; (8003138 <HAL_RCC_ClockConfig+0x1bc>)
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	68db      	ldr	r3, [r3, #12]
 80030dc:	4916      	ldr	r1, [pc, #88]	; (8003138 <HAL_RCC_ClockConfig+0x1bc>)
 80030de:	4313      	orrs	r3, r2
 80030e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0308 	and.w	r3, r3, #8
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d009      	beq.n	8003102 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030ee:	4b12      	ldr	r3, [pc, #72]	; (8003138 <HAL_RCC_ClockConfig+0x1bc>)
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	691b      	ldr	r3, [r3, #16]
 80030fa:	00db      	lsls	r3, r3, #3
 80030fc:	490e      	ldr	r1, [pc, #56]	; (8003138 <HAL_RCC_ClockConfig+0x1bc>)
 80030fe:	4313      	orrs	r3, r2
 8003100:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003102:	f000 f821 	bl	8003148 <HAL_RCC_GetSysClockFreq>
 8003106:	4602      	mov	r2, r0
 8003108:	4b0b      	ldr	r3, [pc, #44]	; (8003138 <HAL_RCC_ClockConfig+0x1bc>)
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	091b      	lsrs	r3, r3, #4
 800310e:	f003 030f 	and.w	r3, r3, #15
 8003112:	490a      	ldr	r1, [pc, #40]	; (800313c <HAL_RCC_ClockConfig+0x1c0>)
 8003114:	5ccb      	ldrb	r3, [r1, r3]
 8003116:	fa22 f303 	lsr.w	r3, r2, r3
 800311a:	4a09      	ldr	r2, [pc, #36]	; (8003140 <HAL_RCC_ClockConfig+0x1c4>)
 800311c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800311e:	4b09      	ldr	r3, [pc, #36]	; (8003144 <HAL_RCC_ClockConfig+0x1c8>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4618      	mov	r0, r3
 8003124:	f7fe fc88 	bl	8001a38 <HAL_InitTick>

  return HAL_OK;
 8003128:	2300      	movs	r3, #0
}
 800312a:	4618      	mov	r0, r3
 800312c:	3710      	adds	r7, #16
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	40023c00 	.word	0x40023c00
 8003138:	40023800 	.word	0x40023800
 800313c:	080076b0 	.word	0x080076b0
 8003140:	20000000 	.word	0x20000000
 8003144:	20000004 	.word	0x20000004

08003148 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003148:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800314c:	b094      	sub	sp, #80	; 0x50
 800314e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003150:	2300      	movs	r3, #0
 8003152:	647b      	str	r3, [r7, #68]	; 0x44
 8003154:	2300      	movs	r3, #0
 8003156:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003158:	2300      	movs	r3, #0
 800315a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800315c:	2300      	movs	r3, #0
 800315e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003160:	4b79      	ldr	r3, [pc, #484]	; (8003348 <HAL_RCC_GetSysClockFreq+0x200>)
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	f003 030c 	and.w	r3, r3, #12
 8003168:	2b08      	cmp	r3, #8
 800316a:	d00d      	beq.n	8003188 <HAL_RCC_GetSysClockFreq+0x40>
 800316c:	2b08      	cmp	r3, #8
 800316e:	f200 80e1 	bhi.w	8003334 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003172:	2b00      	cmp	r3, #0
 8003174:	d002      	beq.n	800317c <HAL_RCC_GetSysClockFreq+0x34>
 8003176:	2b04      	cmp	r3, #4
 8003178:	d003      	beq.n	8003182 <HAL_RCC_GetSysClockFreq+0x3a>
 800317a:	e0db      	b.n	8003334 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800317c:	4b73      	ldr	r3, [pc, #460]	; (800334c <HAL_RCC_GetSysClockFreq+0x204>)
 800317e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003180:	e0db      	b.n	800333a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003182:	4b73      	ldr	r3, [pc, #460]	; (8003350 <HAL_RCC_GetSysClockFreq+0x208>)
 8003184:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003186:	e0d8      	b.n	800333a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003188:	4b6f      	ldr	r3, [pc, #444]	; (8003348 <HAL_RCC_GetSysClockFreq+0x200>)
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003190:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003192:	4b6d      	ldr	r3, [pc, #436]	; (8003348 <HAL_RCC_GetSysClockFreq+0x200>)
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800319a:	2b00      	cmp	r3, #0
 800319c:	d063      	beq.n	8003266 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800319e:	4b6a      	ldr	r3, [pc, #424]	; (8003348 <HAL_RCC_GetSysClockFreq+0x200>)
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	099b      	lsrs	r3, r3, #6
 80031a4:	2200      	movs	r2, #0
 80031a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80031a8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80031aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031b0:	633b      	str	r3, [r7, #48]	; 0x30
 80031b2:	2300      	movs	r3, #0
 80031b4:	637b      	str	r3, [r7, #52]	; 0x34
 80031b6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80031ba:	4622      	mov	r2, r4
 80031bc:	462b      	mov	r3, r5
 80031be:	f04f 0000 	mov.w	r0, #0
 80031c2:	f04f 0100 	mov.w	r1, #0
 80031c6:	0159      	lsls	r1, r3, #5
 80031c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031cc:	0150      	lsls	r0, r2, #5
 80031ce:	4602      	mov	r2, r0
 80031d0:	460b      	mov	r3, r1
 80031d2:	4621      	mov	r1, r4
 80031d4:	1a51      	subs	r1, r2, r1
 80031d6:	6139      	str	r1, [r7, #16]
 80031d8:	4629      	mov	r1, r5
 80031da:	eb63 0301 	sbc.w	r3, r3, r1
 80031de:	617b      	str	r3, [r7, #20]
 80031e0:	f04f 0200 	mov.w	r2, #0
 80031e4:	f04f 0300 	mov.w	r3, #0
 80031e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80031ec:	4659      	mov	r1, fp
 80031ee:	018b      	lsls	r3, r1, #6
 80031f0:	4651      	mov	r1, sl
 80031f2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80031f6:	4651      	mov	r1, sl
 80031f8:	018a      	lsls	r2, r1, #6
 80031fa:	4651      	mov	r1, sl
 80031fc:	ebb2 0801 	subs.w	r8, r2, r1
 8003200:	4659      	mov	r1, fp
 8003202:	eb63 0901 	sbc.w	r9, r3, r1
 8003206:	f04f 0200 	mov.w	r2, #0
 800320a:	f04f 0300 	mov.w	r3, #0
 800320e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003212:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003216:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800321a:	4690      	mov	r8, r2
 800321c:	4699      	mov	r9, r3
 800321e:	4623      	mov	r3, r4
 8003220:	eb18 0303 	adds.w	r3, r8, r3
 8003224:	60bb      	str	r3, [r7, #8]
 8003226:	462b      	mov	r3, r5
 8003228:	eb49 0303 	adc.w	r3, r9, r3
 800322c:	60fb      	str	r3, [r7, #12]
 800322e:	f04f 0200 	mov.w	r2, #0
 8003232:	f04f 0300 	mov.w	r3, #0
 8003236:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800323a:	4629      	mov	r1, r5
 800323c:	024b      	lsls	r3, r1, #9
 800323e:	4621      	mov	r1, r4
 8003240:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003244:	4621      	mov	r1, r4
 8003246:	024a      	lsls	r2, r1, #9
 8003248:	4610      	mov	r0, r2
 800324a:	4619      	mov	r1, r3
 800324c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800324e:	2200      	movs	r2, #0
 8003250:	62bb      	str	r3, [r7, #40]	; 0x28
 8003252:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003254:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003258:	f7fc ffca 	bl	80001f0 <__aeabi_uldivmod>
 800325c:	4602      	mov	r2, r0
 800325e:	460b      	mov	r3, r1
 8003260:	4613      	mov	r3, r2
 8003262:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003264:	e058      	b.n	8003318 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003266:	4b38      	ldr	r3, [pc, #224]	; (8003348 <HAL_RCC_GetSysClockFreq+0x200>)
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	099b      	lsrs	r3, r3, #6
 800326c:	2200      	movs	r2, #0
 800326e:	4618      	mov	r0, r3
 8003270:	4611      	mov	r1, r2
 8003272:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003276:	623b      	str	r3, [r7, #32]
 8003278:	2300      	movs	r3, #0
 800327a:	627b      	str	r3, [r7, #36]	; 0x24
 800327c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003280:	4642      	mov	r2, r8
 8003282:	464b      	mov	r3, r9
 8003284:	f04f 0000 	mov.w	r0, #0
 8003288:	f04f 0100 	mov.w	r1, #0
 800328c:	0159      	lsls	r1, r3, #5
 800328e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003292:	0150      	lsls	r0, r2, #5
 8003294:	4602      	mov	r2, r0
 8003296:	460b      	mov	r3, r1
 8003298:	4641      	mov	r1, r8
 800329a:	ebb2 0a01 	subs.w	sl, r2, r1
 800329e:	4649      	mov	r1, r9
 80032a0:	eb63 0b01 	sbc.w	fp, r3, r1
 80032a4:	f04f 0200 	mov.w	r2, #0
 80032a8:	f04f 0300 	mov.w	r3, #0
 80032ac:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80032b0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80032b4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80032b8:	ebb2 040a 	subs.w	r4, r2, sl
 80032bc:	eb63 050b 	sbc.w	r5, r3, fp
 80032c0:	f04f 0200 	mov.w	r2, #0
 80032c4:	f04f 0300 	mov.w	r3, #0
 80032c8:	00eb      	lsls	r3, r5, #3
 80032ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80032ce:	00e2      	lsls	r2, r4, #3
 80032d0:	4614      	mov	r4, r2
 80032d2:	461d      	mov	r5, r3
 80032d4:	4643      	mov	r3, r8
 80032d6:	18e3      	adds	r3, r4, r3
 80032d8:	603b      	str	r3, [r7, #0]
 80032da:	464b      	mov	r3, r9
 80032dc:	eb45 0303 	adc.w	r3, r5, r3
 80032e0:	607b      	str	r3, [r7, #4]
 80032e2:	f04f 0200 	mov.w	r2, #0
 80032e6:	f04f 0300 	mov.w	r3, #0
 80032ea:	e9d7 4500 	ldrd	r4, r5, [r7]
 80032ee:	4629      	mov	r1, r5
 80032f0:	028b      	lsls	r3, r1, #10
 80032f2:	4621      	mov	r1, r4
 80032f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80032f8:	4621      	mov	r1, r4
 80032fa:	028a      	lsls	r2, r1, #10
 80032fc:	4610      	mov	r0, r2
 80032fe:	4619      	mov	r1, r3
 8003300:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003302:	2200      	movs	r2, #0
 8003304:	61bb      	str	r3, [r7, #24]
 8003306:	61fa      	str	r2, [r7, #28]
 8003308:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800330c:	f7fc ff70 	bl	80001f0 <__aeabi_uldivmod>
 8003310:	4602      	mov	r2, r0
 8003312:	460b      	mov	r3, r1
 8003314:	4613      	mov	r3, r2
 8003316:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003318:	4b0b      	ldr	r3, [pc, #44]	; (8003348 <HAL_RCC_GetSysClockFreq+0x200>)
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	0c1b      	lsrs	r3, r3, #16
 800331e:	f003 0303 	and.w	r3, r3, #3
 8003322:	3301      	adds	r3, #1
 8003324:	005b      	lsls	r3, r3, #1
 8003326:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003328:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800332a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800332c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003330:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003332:	e002      	b.n	800333a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003334:	4b05      	ldr	r3, [pc, #20]	; (800334c <HAL_RCC_GetSysClockFreq+0x204>)
 8003336:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003338:	bf00      	nop
    }
  }
  return sysclockfreq;
 800333a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800333c:	4618      	mov	r0, r3
 800333e:	3750      	adds	r7, #80	; 0x50
 8003340:	46bd      	mov	sp, r7
 8003342:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003346:	bf00      	nop
 8003348:	40023800 	.word	0x40023800
 800334c:	00f42400 	.word	0x00f42400
 8003350:	007a1200 	.word	0x007a1200

08003354 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003354:	b480      	push	{r7}
 8003356:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003358:	4b03      	ldr	r3, [pc, #12]	; (8003368 <HAL_RCC_GetHCLKFreq+0x14>)
 800335a:	681b      	ldr	r3, [r3, #0]
}
 800335c:	4618      	mov	r0, r3
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr
 8003366:	bf00      	nop
 8003368:	20000000 	.word	0x20000000

0800336c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003370:	f7ff fff0 	bl	8003354 <HAL_RCC_GetHCLKFreq>
 8003374:	4602      	mov	r2, r0
 8003376:	4b05      	ldr	r3, [pc, #20]	; (800338c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	0a9b      	lsrs	r3, r3, #10
 800337c:	f003 0307 	and.w	r3, r3, #7
 8003380:	4903      	ldr	r1, [pc, #12]	; (8003390 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003382:	5ccb      	ldrb	r3, [r1, r3]
 8003384:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003388:	4618      	mov	r0, r3
 800338a:	bd80      	pop	{r7, pc}
 800338c:	40023800 	.word	0x40023800
 8003390:	080076c0 	.word	0x080076c0

08003394 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003398:	f7ff ffdc 	bl	8003354 <HAL_RCC_GetHCLKFreq>
 800339c:	4602      	mov	r2, r0
 800339e:	4b05      	ldr	r3, [pc, #20]	; (80033b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	0b5b      	lsrs	r3, r3, #13
 80033a4:	f003 0307 	and.w	r3, r3, #7
 80033a8:	4903      	ldr	r1, [pc, #12]	; (80033b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80033aa:	5ccb      	ldrb	r3, [r1, r3]
 80033ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	bd80      	pop	{r7, pc}
 80033b4:	40023800 	.word	0x40023800
 80033b8:	080076c0 	.word	0x080076c0

080033bc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80033bc:	b480      	push	{r7}
 80033be:	b083      	sub	sp, #12
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
 80033c4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	220f      	movs	r2, #15
 80033ca:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80033cc:	4b12      	ldr	r3, [pc, #72]	; (8003418 <HAL_RCC_GetClockConfig+0x5c>)
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	f003 0203 	and.w	r2, r3, #3
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80033d8:	4b0f      	ldr	r3, [pc, #60]	; (8003418 <HAL_RCC_GetClockConfig+0x5c>)
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80033e4:	4b0c      	ldr	r3, [pc, #48]	; (8003418 <HAL_RCC_GetClockConfig+0x5c>)
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80033f0:	4b09      	ldr	r3, [pc, #36]	; (8003418 <HAL_RCC_GetClockConfig+0x5c>)
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	08db      	lsrs	r3, r3, #3
 80033f6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80033fe:	4b07      	ldr	r3, [pc, #28]	; (800341c <HAL_RCC_GetClockConfig+0x60>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 020f 	and.w	r2, r3, #15
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	601a      	str	r2, [r3, #0]
}
 800340a:	bf00      	nop
 800340c:	370c      	adds	r7, #12
 800340e:	46bd      	mov	sp, r7
 8003410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003414:	4770      	bx	lr
 8003416:	bf00      	nop
 8003418:	40023800 	.word	0x40023800
 800341c:	40023c00 	.word	0x40023c00

08003420 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b082      	sub	sp, #8
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d101      	bne.n	8003432 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e01c      	b.n	800346c <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	795b      	ldrb	r3, [r3, #5]
 8003436:	b2db      	uxtb	r3, r3
 8003438:	2b00      	cmp	r3, #0
 800343a:	d105      	bne.n	8003448 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2200      	movs	r2, #0
 8003440:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f7fe fa34 	bl	80018b0 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2202      	movs	r2, #2
 800344c:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f042 0204 	orr.w	r2, r2, #4
 800345c:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2201      	movs	r2, #1
 8003462:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2200      	movs	r2, #0
 8003468:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 800346a:	2300      	movs	r3, #0
}
 800346c:	4618      	mov	r0, r3
 800346e:	3708      	adds	r7, #8
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}

08003474 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b084      	sub	sp, #16
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
 800347c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800347e:	2300      	movs	r3, #0
 8003480:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	791b      	ldrb	r3, [r3, #4]
 8003486:	2b01      	cmp	r3, #1
 8003488:	d101      	bne.n	800348e <HAL_RNG_GenerateRandomNumber+0x1a>
 800348a:	2302      	movs	r3, #2
 800348c:	e044      	b.n	8003518 <HAL_RNG_GenerateRandomNumber+0xa4>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2201      	movs	r2, #1
 8003492:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	795b      	ldrb	r3, [r3, #5]
 8003498:	b2db      	uxtb	r3, r3
 800349a:	2b01      	cmp	r3, #1
 800349c:	d133      	bne.n	8003506 <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2202      	movs	r2, #2
 80034a2:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 80034a4:	f7fe fbd6 	bl	8001c54 <HAL_GetTick>
 80034a8:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80034aa:	e018      	b.n	80034de <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80034ac:	f7fe fbd2 	bl	8001c54 <HAL_GetTick>
 80034b0:	4602      	mov	r2, r0
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	2b02      	cmp	r3, #2
 80034b8:	d911      	bls.n	80034de <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	f003 0301 	and.w	r3, r3, #1
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d00a      	beq.n	80034de <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2201      	movs	r2, #1
 80034cc:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2202      	movs	r2, #2
 80034d2:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2200      	movs	r2, #0
 80034d8:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	e01c      	b.n	8003518 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	f003 0301 	and.w	r3, r3, #1
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d1df      	bne.n	80034ac <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	689a      	ldr	r2, [r3, #8]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	68da      	ldr	r2, [r3, #12]
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2201      	movs	r2, #1
 8003502:	715a      	strb	r2, [r3, #5]
 8003504:	e004      	b.n	8003510 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2204      	movs	r2, #4
 800350a:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2200      	movs	r2, #0
 8003514:	711a      	strb	r2, [r3, #4]

  return status;
 8003516:	7bfb      	ldrb	r3, [r7, #15]
}
 8003518:	4618      	mov	r0, r3
 800351a:	3710      	adds	r7, #16
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}

08003520 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b082      	sub	sp, #8
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d101      	bne.n	8003532 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e041      	b.n	80035b6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003538:	b2db      	uxtb	r3, r3
 800353a:	2b00      	cmp	r3, #0
 800353c:	d106      	bne.n	800354c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2200      	movs	r2, #0
 8003542:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f000 f839 	bl	80035be <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2202      	movs	r2, #2
 8003550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	3304      	adds	r3, #4
 800355c:	4619      	mov	r1, r3
 800355e:	4610      	mov	r0, r2
 8003560:	f000 f9d8 	bl	8003914 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2201      	movs	r2, #1
 8003568:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2201      	movs	r2, #1
 8003570:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2201      	movs	r2, #1
 8003578:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2201      	movs	r2, #1
 8003580:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2201      	movs	r2, #1
 8003588:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2201      	movs	r2, #1
 8003590:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2201      	movs	r2, #1
 8003598:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2201      	movs	r2, #1
 80035a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2201      	movs	r2, #1
 80035a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2201      	movs	r2, #1
 80035b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035b4:	2300      	movs	r3, #0
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3708      	adds	r7, #8
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}

080035be <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80035be:	b480      	push	{r7}
 80035c0:	b083      	sub	sp, #12
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80035c6:	bf00      	nop
 80035c8:	370c      	adds	r7, #12
 80035ca:	46bd      	mov	sp, r7
 80035cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d0:	4770      	bx	lr
	...

080035d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b085      	sub	sp, #20
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035e2:	b2db      	uxtb	r3, r3
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d001      	beq.n	80035ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	e04e      	b.n	800368a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2202      	movs	r2, #2
 80035f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	68da      	ldr	r2, [r3, #12]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f042 0201 	orr.w	r2, r2, #1
 8003602:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a23      	ldr	r2, [pc, #140]	; (8003698 <HAL_TIM_Base_Start_IT+0xc4>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d022      	beq.n	8003654 <HAL_TIM_Base_Start_IT+0x80>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003616:	d01d      	beq.n	8003654 <HAL_TIM_Base_Start_IT+0x80>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a1f      	ldr	r2, [pc, #124]	; (800369c <HAL_TIM_Base_Start_IT+0xc8>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d018      	beq.n	8003654 <HAL_TIM_Base_Start_IT+0x80>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a1e      	ldr	r2, [pc, #120]	; (80036a0 <HAL_TIM_Base_Start_IT+0xcc>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d013      	beq.n	8003654 <HAL_TIM_Base_Start_IT+0x80>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a1c      	ldr	r2, [pc, #112]	; (80036a4 <HAL_TIM_Base_Start_IT+0xd0>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d00e      	beq.n	8003654 <HAL_TIM_Base_Start_IT+0x80>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a1b      	ldr	r2, [pc, #108]	; (80036a8 <HAL_TIM_Base_Start_IT+0xd4>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d009      	beq.n	8003654 <HAL_TIM_Base_Start_IT+0x80>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a19      	ldr	r2, [pc, #100]	; (80036ac <HAL_TIM_Base_Start_IT+0xd8>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d004      	beq.n	8003654 <HAL_TIM_Base_Start_IT+0x80>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a18      	ldr	r2, [pc, #96]	; (80036b0 <HAL_TIM_Base_Start_IT+0xdc>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d111      	bne.n	8003678 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	f003 0307 	and.w	r3, r3, #7
 800365e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2b06      	cmp	r3, #6
 8003664:	d010      	beq.n	8003688 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f042 0201 	orr.w	r2, r2, #1
 8003674:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003676:	e007      	b.n	8003688 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f042 0201 	orr.w	r2, r2, #1
 8003686:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003688:	2300      	movs	r3, #0
}
 800368a:	4618      	mov	r0, r3
 800368c:	3714      	adds	r7, #20
 800368e:	46bd      	mov	sp, r7
 8003690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003694:	4770      	bx	lr
 8003696:	bf00      	nop
 8003698:	40010000 	.word	0x40010000
 800369c:	40000400 	.word	0x40000400
 80036a0:	40000800 	.word	0x40000800
 80036a4:	40000c00 	.word	0x40000c00
 80036a8:	40010400 	.word	0x40010400
 80036ac:	40014000 	.word	0x40014000
 80036b0:	40001800 	.word	0x40001800

080036b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b082      	sub	sp, #8
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	691b      	ldr	r3, [r3, #16]
 80036c2:	f003 0302 	and.w	r3, r3, #2
 80036c6:	2b02      	cmp	r3, #2
 80036c8:	d122      	bne.n	8003710 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	68db      	ldr	r3, [r3, #12]
 80036d0:	f003 0302 	and.w	r3, r3, #2
 80036d4:	2b02      	cmp	r3, #2
 80036d6:	d11b      	bne.n	8003710 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f06f 0202 	mvn.w	r2, #2
 80036e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2201      	movs	r2, #1
 80036e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	699b      	ldr	r3, [r3, #24]
 80036ee:	f003 0303 	and.w	r3, r3, #3
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d003      	beq.n	80036fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f000 f8ee 	bl	80038d8 <HAL_TIM_IC_CaptureCallback>
 80036fc:	e005      	b.n	800370a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f000 f8e0 	bl	80038c4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003704:	6878      	ldr	r0, [r7, #4]
 8003706:	f000 f8f1 	bl	80038ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2200      	movs	r2, #0
 800370e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	691b      	ldr	r3, [r3, #16]
 8003716:	f003 0304 	and.w	r3, r3, #4
 800371a:	2b04      	cmp	r3, #4
 800371c:	d122      	bne.n	8003764 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	68db      	ldr	r3, [r3, #12]
 8003724:	f003 0304 	and.w	r3, r3, #4
 8003728:	2b04      	cmp	r3, #4
 800372a:	d11b      	bne.n	8003764 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f06f 0204 	mvn.w	r2, #4
 8003734:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2202      	movs	r2, #2
 800373a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	699b      	ldr	r3, [r3, #24]
 8003742:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003746:	2b00      	cmp	r3, #0
 8003748:	d003      	beq.n	8003752 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f000 f8c4 	bl	80038d8 <HAL_TIM_IC_CaptureCallback>
 8003750:	e005      	b.n	800375e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f000 f8b6 	bl	80038c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	f000 f8c7 	bl	80038ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	691b      	ldr	r3, [r3, #16]
 800376a:	f003 0308 	and.w	r3, r3, #8
 800376e:	2b08      	cmp	r3, #8
 8003770:	d122      	bne.n	80037b8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	68db      	ldr	r3, [r3, #12]
 8003778:	f003 0308 	and.w	r3, r3, #8
 800377c:	2b08      	cmp	r3, #8
 800377e:	d11b      	bne.n	80037b8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f06f 0208 	mvn.w	r2, #8
 8003788:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2204      	movs	r2, #4
 800378e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	69db      	ldr	r3, [r3, #28]
 8003796:	f003 0303 	and.w	r3, r3, #3
 800379a:	2b00      	cmp	r3, #0
 800379c:	d003      	beq.n	80037a6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f000 f89a 	bl	80038d8 <HAL_TIM_IC_CaptureCallback>
 80037a4:	e005      	b.n	80037b2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f000 f88c 	bl	80038c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037ac:	6878      	ldr	r0, [r7, #4]
 80037ae:	f000 f89d 	bl	80038ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2200      	movs	r2, #0
 80037b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	691b      	ldr	r3, [r3, #16]
 80037be:	f003 0310 	and.w	r3, r3, #16
 80037c2:	2b10      	cmp	r3, #16
 80037c4:	d122      	bne.n	800380c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	f003 0310 	and.w	r3, r3, #16
 80037d0:	2b10      	cmp	r3, #16
 80037d2:	d11b      	bne.n	800380c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f06f 0210 	mvn.w	r2, #16
 80037dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2208      	movs	r2, #8
 80037e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	69db      	ldr	r3, [r3, #28]
 80037ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d003      	beq.n	80037fa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f000 f870 	bl	80038d8 <HAL_TIM_IC_CaptureCallback>
 80037f8:	e005      	b.n	8003806 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f000 f862 	bl	80038c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003800:	6878      	ldr	r0, [r7, #4]
 8003802:	f000 f873 	bl	80038ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2200      	movs	r2, #0
 800380a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	691b      	ldr	r3, [r3, #16]
 8003812:	f003 0301 	and.w	r3, r3, #1
 8003816:	2b01      	cmp	r3, #1
 8003818:	d10e      	bne.n	8003838 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	68db      	ldr	r3, [r3, #12]
 8003820:	f003 0301 	and.w	r3, r3, #1
 8003824:	2b01      	cmp	r3, #1
 8003826:	d107      	bne.n	8003838 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f06f 0201 	mvn.w	r2, #1
 8003830:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f7fd ff32 	bl	800169c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	691b      	ldr	r3, [r3, #16]
 800383e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003842:	2b80      	cmp	r3, #128	; 0x80
 8003844:	d10e      	bne.n	8003864 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003850:	2b80      	cmp	r3, #128	; 0x80
 8003852:	d107      	bne.n	8003864 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800385c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f000 f902 	bl	8003a68 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	691b      	ldr	r3, [r3, #16]
 800386a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800386e:	2b40      	cmp	r3, #64	; 0x40
 8003870:	d10e      	bne.n	8003890 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	68db      	ldr	r3, [r3, #12]
 8003878:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800387c:	2b40      	cmp	r3, #64	; 0x40
 800387e:	d107      	bne.n	8003890 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003888:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f000 f838 	bl	8003900 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	691b      	ldr	r3, [r3, #16]
 8003896:	f003 0320 	and.w	r3, r3, #32
 800389a:	2b20      	cmp	r3, #32
 800389c:	d10e      	bne.n	80038bc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	68db      	ldr	r3, [r3, #12]
 80038a4:	f003 0320 	and.w	r3, r3, #32
 80038a8:	2b20      	cmp	r3, #32
 80038aa:	d107      	bne.n	80038bc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f06f 0220 	mvn.w	r2, #32
 80038b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f000 f8cc 	bl	8003a54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80038bc:	bf00      	nop
 80038be:	3708      	adds	r7, #8
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}

080038c4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b083      	sub	sp, #12
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80038cc:	bf00      	nop
 80038ce:	370c      	adds	r7, #12
 80038d0:	46bd      	mov	sp, r7
 80038d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d6:	4770      	bx	lr

080038d8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80038d8:	b480      	push	{r7}
 80038da:	b083      	sub	sp, #12
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80038e0:	bf00      	nop
 80038e2:	370c      	adds	r7, #12
 80038e4:	46bd      	mov	sp, r7
 80038e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ea:	4770      	bx	lr

080038ec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b083      	sub	sp, #12
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80038f4:	bf00      	nop
 80038f6:	370c      	adds	r7, #12
 80038f8:	46bd      	mov	sp, r7
 80038fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fe:	4770      	bx	lr

08003900 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003900:	b480      	push	{r7}
 8003902:	b083      	sub	sp, #12
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003908:	bf00      	nop
 800390a:	370c      	adds	r7, #12
 800390c:	46bd      	mov	sp, r7
 800390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003912:	4770      	bx	lr

08003914 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003914:	b480      	push	{r7}
 8003916:	b085      	sub	sp, #20
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
 800391c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	4a40      	ldr	r2, [pc, #256]	; (8003a28 <TIM_Base_SetConfig+0x114>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d013      	beq.n	8003954 <TIM_Base_SetConfig+0x40>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003932:	d00f      	beq.n	8003954 <TIM_Base_SetConfig+0x40>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	4a3d      	ldr	r2, [pc, #244]	; (8003a2c <TIM_Base_SetConfig+0x118>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d00b      	beq.n	8003954 <TIM_Base_SetConfig+0x40>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	4a3c      	ldr	r2, [pc, #240]	; (8003a30 <TIM_Base_SetConfig+0x11c>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d007      	beq.n	8003954 <TIM_Base_SetConfig+0x40>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	4a3b      	ldr	r2, [pc, #236]	; (8003a34 <TIM_Base_SetConfig+0x120>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d003      	beq.n	8003954 <TIM_Base_SetConfig+0x40>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	4a3a      	ldr	r2, [pc, #232]	; (8003a38 <TIM_Base_SetConfig+0x124>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d108      	bne.n	8003966 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800395a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	68fa      	ldr	r2, [r7, #12]
 8003962:	4313      	orrs	r3, r2
 8003964:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	4a2f      	ldr	r2, [pc, #188]	; (8003a28 <TIM_Base_SetConfig+0x114>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d02b      	beq.n	80039c6 <TIM_Base_SetConfig+0xb2>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003974:	d027      	beq.n	80039c6 <TIM_Base_SetConfig+0xb2>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	4a2c      	ldr	r2, [pc, #176]	; (8003a2c <TIM_Base_SetConfig+0x118>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d023      	beq.n	80039c6 <TIM_Base_SetConfig+0xb2>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	4a2b      	ldr	r2, [pc, #172]	; (8003a30 <TIM_Base_SetConfig+0x11c>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d01f      	beq.n	80039c6 <TIM_Base_SetConfig+0xb2>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	4a2a      	ldr	r2, [pc, #168]	; (8003a34 <TIM_Base_SetConfig+0x120>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d01b      	beq.n	80039c6 <TIM_Base_SetConfig+0xb2>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	4a29      	ldr	r2, [pc, #164]	; (8003a38 <TIM_Base_SetConfig+0x124>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d017      	beq.n	80039c6 <TIM_Base_SetConfig+0xb2>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	4a28      	ldr	r2, [pc, #160]	; (8003a3c <TIM_Base_SetConfig+0x128>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d013      	beq.n	80039c6 <TIM_Base_SetConfig+0xb2>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	4a27      	ldr	r2, [pc, #156]	; (8003a40 <TIM_Base_SetConfig+0x12c>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d00f      	beq.n	80039c6 <TIM_Base_SetConfig+0xb2>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	4a26      	ldr	r2, [pc, #152]	; (8003a44 <TIM_Base_SetConfig+0x130>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d00b      	beq.n	80039c6 <TIM_Base_SetConfig+0xb2>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	4a25      	ldr	r2, [pc, #148]	; (8003a48 <TIM_Base_SetConfig+0x134>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d007      	beq.n	80039c6 <TIM_Base_SetConfig+0xb2>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4a24      	ldr	r2, [pc, #144]	; (8003a4c <TIM_Base_SetConfig+0x138>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d003      	beq.n	80039c6 <TIM_Base_SetConfig+0xb2>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	4a23      	ldr	r2, [pc, #140]	; (8003a50 <TIM_Base_SetConfig+0x13c>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d108      	bne.n	80039d8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	68db      	ldr	r3, [r3, #12]
 80039d2:	68fa      	ldr	r2, [r7, #12]
 80039d4:	4313      	orrs	r3, r2
 80039d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	695b      	ldr	r3, [r3, #20]
 80039e2:	4313      	orrs	r3, r2
 80039e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	68fa      	ldr	r2, [r7, #12]
 80039ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	689a      	ldr	r2, [r3, #8]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	4a0a      	ldr	r2, [pc, #40]	; (8003a28 <TIM_Base_SetConfig+0x114>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d003      	beq.n	8003a0c <TIM_Base_SetConfig+0xf8>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	4a0c      	ldr	r2, [pc, #48]	; (8003a38 <TIM_Base_SetConfig+0x124>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d103      	bne.n	8003a14 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	691a      	ldr	r2, [r3, #16]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2201      	movs	r2, #1
 8003a18:	615a      	str	r2, [r3, #20]
}
 8003a1a:	bf00      	nop
 8003a1c:	3714      	adds	r7, #20
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a24:	4770      	bx	lr
 8003a26:	bf00      	nop
 8003a28:	40010000 	.word	0x40010000
 8003a2c:	40000400 	.word	0x40000400
 8003a30:	40000800 	.word	0x40000800
 8003a34:	40000c00 	.word	0x40000c00
 8003a38:	40010400 	.word	0x40010400
 8003a3c:	40014000 	.word	0x40014000
 8003a40:	40014400 	.word	0x40014400
 8003a44:	40014800 	.word	0x40014800
 8003a48:	40001800 	.word	0x40001800
 8003a4c:	40001c00 	.word	0x40001c00
 8003a50:	40002000 	.word	0x40002000

08003a54 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b083      	sub	sp, #12
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003a5c:	bf00      	nop
 8003a5e:	370c      	adds	r7, #12
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr

08003a68 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b083      	sub	sp, #12
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003a70:	bf00      	nop
 8003a72:	370c      	adds	r7, #12
 8003a74:	46bd      	mov	sp, r7
 8003a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7a:	4770      	bx	lr

08003a7c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b082      	sub	sp, #8
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d101      	bne.n	8003a8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e03f      	b.n	8003b0e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d106      	bne.n	8003aa8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f7fd ff26 	bl	80018f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2224      	movs	r2, #36	; 0x24
 8003aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	68da      	ldr	r2, [r3, #12]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003abe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	f000 f829 	bl	8003b18 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	691a      	ldr	r2, [r3, #16]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ad4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	695a      	ldr	r2, [r3, #20]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ae4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	68da      	ldr	r2, [r3, #12]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003af4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2200      	movs	r2, #0
 8003afa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2220      	movs	r2, #32
 8003b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2220      	movs	r2, #32
 8003b08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003b0c:	2300      	movs	r3, #0
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3708      	adds	r7, #8
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}
	...

08003b18 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b1c:	b0c0      	sub	sp, #256	; 0x100
 8003b1e:	af00      	add	r7, sp, #0
 8003b20:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	691b      	ldr	r3, [r3, #16]
 8003b2c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003b30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b34:	68d9      	ldr	r1, [r3, #12]
 8003b36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b3a:	681a      	ldr	r2, [r3, #0]
 8003b3c:	ea40 0301 	orr.w	r3, r0, r1
 8003b40:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003b42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b46:	689a      	ldr	r2, [r3, #8]
 8003b48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b4c:	691b      	ldr	r3, [r3, #16]
 8003b4e:	431a      	orrs	r2, r3
 8003b50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b54:	695b      	ldr	r3, [r3, #20]
 8003b56:	431a      	orrs	r2, r3
 8003b58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b5c:	69db      	ldr	r3, [r3, #28]
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003b64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003b70:	f021 010c 	bic.w	r1, r1, #12
 8003b74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003b7e:	430b      	orrs	r3, r1
 8003b80:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	695b      	ldr	r3, [r3, #20]
 8003b8a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003b8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b92:	6999      	ldr	r1, [r3, #24]
 8003b94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	ea40 0301 	orr.w	r3, r0, r1
 8003b9e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	4b8f      	ldr	r3, [pc, #572]	; (8003de4 <UART_SetConfig+0x2cc>)
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d005      	beq.n	8003bb8 <UART_SetConfig+0xa0>
 8003bac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	4b8d      	ldr	r3, [pc, #564]	; (8003de8 <UART_SetConfig+0x2d0>)
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d104      	bne.n	8003bc2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003bb8:	f7ff fbec 	bl	8003394 <HAL_RCC_GetPCLK2Freq>
 8003bbc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003bc0:	e003      	b.n	8003bca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003bc2:	f7ff fbd3 	bl	800336c <HAL_RCC_GetPCLK1Freq>
 8003bc6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003bca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bce:	69db      	ldr	r3, [r3, #28]
 8003bd0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bd4:	f040 810c 	bne.w	8003df0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003bd8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003bdc:	2200      	movs	r2, #0
 8003bde:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003be2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003be6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003bea:	4622      	mov	r2, r4
 8003bec:	462b      	mov	r3, r5
 8003bee:	1891      	adds	r1, r2, r2
 8003bf0:	65b9      	str	r1, [r7, #88]	; 0x58
 8003bf2:	415b      	adcs	r3, r3
 8003bf4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003bf6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003bfa:	4621      	mov	r1, r4
 8003bfc:	eb12 0801 	adds.w	r8, r2, r1
 8003c00:	4629      	mov	r1, r5
 8003c02:	eb43 0901 	adc.w	r9, r3, r1
 8003c06:	f04f 0200 	mov.w	r2, #0
 8003c0a:	f04f 0300 	mov.w	r3, #0
 8003c0e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c12:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c16:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c1a:	4690      	mov	r8, r2
 8003c1c:	4699      	mov	r9, r3
 8003c1e:	4623      	mov	r3, r4
 8003c20:	eb18 0303 	adds.w	r3, r8, r3
 8003c24:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003c28:	462b      	mov	r3, r5
 8003c2a:	eb49 0303 	adc.w	r3, r9, r3
 8003c2e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003c32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003c3e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003c42:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003c46:	460b      	mov	r3, r1
 8003c48:	18db      	adds	r3, r3, r3
 8003c4a:	653b      	str	r3, [r7, #80]	; 0x50
 8003c4c:	4613      	mov	r3, r2
 8003c4e:	eb42 0303 	adc.w	r3, r2, r3
 8003c52:	657b      	str	r3, [r7, #84]	; 0x54
 8003c54:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003c58:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003c5c:	f7fc fac8 	bl	80001f0 <__aeabi_uldivmod>
 8003c60:	4602      	mov	r2, r0
 8003c62:	460b      	mov	r3, r1
 8003c64:	4b61      	ldr	r3, [pc, #388]	; (8003dec <UART_SetConfig+0x2d4>)
 8003c66:	fba3 2302 	umull	r2, r3, r3, r2
 8003c6a:	095b      	lsrs	r3, r3, #5
 8003c6c:	011c      	lsls	r4, r3, #4
 8003c6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c72:	2200      	movs	r2, #0
 8003c74:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003c78:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003c7c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003c80:	4642      	mov	r2, r8
 8003c82:	464b      	mov	r3, r9
 8003c84:	1891      	adds	r1, r2, r2
 8003c86:	64b9      	str	r1, [r7, #72]	; 0x48
 8003c88:	415b      	adcs	r3, r3
 8003c8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c8c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003c90:	4641      	mov	r1, r8
 8003c92:	eb12 0a01 	adds.w	sl, r2, r1
 8003c96:	4649      	mov	r1, r9
 8003c98:	eb43 0b01 	adc.w	fp, r3, r1
 8003c9c:	f04f 0200 	mov.w	r2, #0
 8003ca0:	f04f 0300 	mov.w	r3, #0
 8003ca4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003ca8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003cac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003cb0:	4692      	mov	sl, r2
 8003cb2:	469b      	mov	fp, r3
 8003cb4:	4643      	mov	r3, r8
 8003cb6:	eb1a 0303 	adds.w	r3, sl, r3
 8003cba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003cbe:	464b      	mov	r3, r9
 8003cc0:	eb4b 0303 	adc.w	r3, fp, r3
 8003cc4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003cc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003cd4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003cd8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003cdc:	460b      	mov	r3, r1
 8003cde:	18db      	adds	r3, r3, r3
 8003ce0:	643b      	str	r3, [r7, #64]	; 0x40
 8003ce2:	4613      	mov	r3, r2
 8003ce4:	eb42 0303 	adc.w	r3, r2, r3
 8003ce8:	647b      	str	r3, [r7, #68]	; 0x44
 8003cea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003cee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003cf2:	f7fc fa7d 	bl	80001f0 <__aeabi_uldivmod>
 8003cf6:	4602      	mov	r2, r0
 8003cf8:	460b      	mov	r3, r1
 8003cfa:	4611      	mov	r1, r2
 8003cfc:	4b3b      	ldr	r3, [pc, #236]	; (8003dec <UART_SetConfig+0x2d4>)
 8003cfe:	fba3 2301 	umull	r2, r3, r3, r1
 8003d02:	095b      	lsrs	r3, r3, #5
 8003d04:	2264      	movs	r2, #100	; 0x64
 8003d06:	fb02 f303 	mul.w	r3, r2, r3
 8003d0a:	1acb      	subs	r3, r1, r3
 8003d0c:	00db      	lsls	r3, r3, #3
 8003d0e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003d12:	4b36      	ldr	r3, [pc, #216]	; (8003dec <UART_SetConfig+0x2d4>)
 8003d14:	fba3 2302 	umull	r2, r3, r3, r2
 8003d18:	095b      	lsrs	r3, r3, #5
 8003d1a:	005b      	lsls	r3, r3, #1
 8003d1c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003d20:	441c      	add	r4, r3
 8003d22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d26:	2200      	movs	r2, #0
 8003d28:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003d2c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003d30:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003d34:	4642      	mov	r2, r8
 8003d36:	464b      	mov	r3, r9
 8003d38:	1891      	adds	r1, r2, r2
 8003d3a:	63b9      	str	r1, [r7, #56]	; 0x38
 8003d3c:	415b      	adcs	r3, r3
 8003d3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d40:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003d44:	4641      	mov	r1, r8
 8003d46:	1851      	adds	r1, r2, r1
 8003d48:	6339      	str	r1, [r7, #48]	; 0x30
 8003d4a:	4649      	mov	r1, r9
 8003d4c:	414b      	adcs	r3, r1
 8003d4e:	637b      	str	r3, [r7, #52]	; 0x34
 8003d50:	f04f 0200 	mov.w	r2, #0
 8003d54:	f04f 0300 	mov.w	r3, #0
 8003d58:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003d5c:	4659      	mov	r1, fp
 8003d5e:	00cb      	lsls	r3, r1, #3
 8003d60:	4651      	mov	r1, sl
 8003d62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d66:	4651      	mov	r1, sl
 8003d68:	00ca      	lsls	r2, r1, #3
 8003d6a:	4610      	mov	r0, r2
 8003d6c:	4619      	mov	r1, r3
 8003d6e:	4603      	mov	r3, r0
 8003d70:	4642      	mov	r2, r8
 8003d72:	189b      	adds	r3, r3, r2
 8003d74:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003d78:	464b      	mov	r3, r9
 8003d7a:	460a      	mov	r2, r1
 8003d7c:	eb42 0303 	adc.w	r3, r2, r3
 8003d80:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003d84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003d90:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003d94:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003d98:	460b      	mov	r3, r1
 8003d9a:	18db      	adds	r3, r3, r3
 8003d9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d9e:	4613      	mov	r3, r2
 8003da0:	eb42 0303 	adc.w	r3, r2, r3
 8003da4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003da6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003daa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003dae:	f7fc fa1f 	bl	80001f0 <__aeabi_uldivmod>
 8003db2:	4602      	mov	r2, r0
 8003db4:	460b      	mov	r3, r1
 8003db6:	4b0d      	ldr	r3, [pc, #52]	; (8003dec <UART_SetConfig+0x2d4>)
 8003db8:	fba3 1302 	umull	r1, r3, r3, r2
 8003dbc:	095b      	lsrs	r3, r3, #5
 8003dbe:	2164      	movs	r1, #100	; 0x64
 8003dc0:	fb01 f303 	mul.w	r3, r1, r3
 8003dc4:	1ad3      	subs	r3, r2, r3
 8003dc6:	00db      	lsls	r3, r3, #3
 8003dc8:	3332      	adds	r3, #50	; 0x32
 8003dca:	4a08      	ldr	r2, [pc, #32]	; (8003dec <UART_SetConfig+0x2d4>)
 8003dcc:	fba2 2303 	umull	r2, r3, r2, r3
 8003dd0:	095b      	lsrs	r3, r3, #5
 8003dd2:	f003 0207 	and.w	r2, r3, #7
 8003dd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4422      	add	r2, r4
 8003dde:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003de0:	e106      	b.n	8003ff0 <UART_SetConfig+0x4d8>
 8003de2:	bf00      	nop
 8003de4:	40011000 	.word	0x40011000
 8003de8:	40011400 	.word	0x40011400
 8003dec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003df0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003df4:	2200      	movs	r2, #0
 8003df6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003dfa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003dfe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003e02:	4642      	mov	r2, r8
 8003e04:	464b      	mov	r3, r9
 8003e06:	1891      	adds	r1, r2, r2
 8003e08:	6239      	str	r1, [r7, #32]
 8003e0a:	415b      	adcs	r3, r3
 8003e0c:	627b      	str	r3, [r7, #36]	; 0x24
 8003e0e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003e12:	4641      	mov	r1, r8
 8003e14:	1854      	adds	r4, r2, r1
 8003e16:	4649      	mov	r1, r9
 8003e18:	eb43 0501 	adc.w	r5, r3, r1
 8003e1c:	f04f 0200 	mov.w	r2, #0
 8003e20:	f04f 0300 	mov.w	r3, #0
 8003e24:	00eb      	lsls	r3, r5, #3
 8003e26:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e2a:	00e2      	lsls	r2, r4, #3
 8003e2c:	4614      	mov	r4, r2
 8003e2e:	461d      	mov	r5, r3
 8003e30:	4643      	mov	r3, r8
 8003e32:	18e3      	adds	r3, r4, r3
 8003e34:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003e38:	464b      	mov	r3, r9
 8003e3a:	eb45 0303 	adc.w	r3, r5, r3
 8003e3e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003e42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003e4e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003e52:	f04f 0200 	mov.w	r2, #0
 8003e56:	f04f 0300 	mov.w	r3, #0
 8003e5a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003e5e:	4629      	mov	r1, r5
 8003e60:	008b      	lsls	r3, r1, #2
 8003e62:	4621      	mov	r1, r4
 8003e64:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e68:	4621      	mov	r1, r4
 8003e6a:	008a      	lsls	r2, r1, #2
 8003e6c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003e70:	f7fc f9be 	bl	80001f0 <__aeabi_uldivmod>
 8003e74:	4602      	mov	r2, r0
 8003e76:	460b      	mov	r3, r1
 8003e78:	4b60      	ldr	r3, [pc, #384]	; (8003ffc <UART_SetConfig+0x4e4>)
 8003e7a:	fba3 2302 	umull	r2, r3, r3, r2
 8003e7e:	095b      	lsrs	r3, r3, #5
 8003e80:	011c      	lsls	r4, r3, #4
 8003e82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e86:	2200      	movs	r2, #0
 8003e88:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003e8c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003e90:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003e94:	4642      	mov	r2, r8
 8003e96:	464b      	mov	r3, r9
 8003e98:	1891      	adds	r1, r2, r2
 8003e9a:	61b9      	str	r1, [r7, #24]
 8003e9c:	415b      	adcs	r3, r3
 8003e9e:	61fb      	str	r3, [r7, #28]
 8003ea0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ea4:	4641      	mov	r1, r8
 8003ea6:	1851      	adds	r1, r2, r1
 8003ea8:	6139      	str	r1, [r7, #16]
 8003eaa:	4649      	mov	r1, r9
 8003eac:	414b      	adcs	r3, r1
 8003eae:	617b      	str	r3, [r7, #20]
 8003eb0:	f04f 0200 	mov.w	r2, #0
 8003eb4:	f04f 0300 	mov.w	r3, #0
 8003eb8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ebc:	4659      	mov	r1, fp
 8003ebe:	00cb      	lsls	r3, r1, #3
 8003ec0:	4651      	mov	r1, sl
 8003ec2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ec6:	4651      	mov	r1, sl
 8003ec8:	00ca      	lsls	r2, r1, #3
 8003eca:	4610      	mov	r0, r2
 8003ecc:	4619      	mov	r1, r3
 8003ece:	4603      	mov	r3, r0
 8003ed0:	4642      	mov	r2, r8
 8003ed2:	189b      	adds	r3, r3, r2
 8003ed4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003ed8:	464b      	mov	r3, r9
 8003eda:	460a      	mov	r2, r1
 8003edc:	eb42 0303 	adc.w	r3, r2, r3
 8003ee0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003ee4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	2200      	movs	r2, #0
 8003eec:	67bb      	str	r3, [r7, #120]	; 0x78
 8003eee:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003ef0:	f04f 0200 	mov.w	r2, #0
 8003ef4:	f04f 0300 	mov.w	r3, #0
 8003ef8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003efc:	4649      	mov	r1, r9
 8003efe:	008b      	lsls	r3, r1, #2
 8003f00:	4641      	mov	r1, r8
 8003f02:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f06:	4641      	mov	r1, r8
 8003f08:	008a      	lsls	r2, r1, #2
 8003f0a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003f0e:	f7fc f96f 	bl	80001f0 <__aeabi_uldivmod>
 8003f12:	4602      	mov	r2, r0
 8003f14:	460b      	mov	r3, r1
 8003f16:	4611      	mov	r1, r2
 8003f18:	4b38      	ldr	r3, [pc, #224]	; (8003ffc <UART_SetConfig+0x4e4>)
 8003f1a:	fba3 2301 	umull	r2, r3, r3, r1
 8003f1e:	095b      	lsrs	r3, r3, #5
 8003f20:	2264      	movs	r2, #100	; 0x64
 8003f22:	fb02 f303 	mul.w	r3, r2, r3
 8003f26:	1acb      	subs	r3, r1, r3
 8003f28:	011b      	lsls	r3, r3, #4
 8003f2a:	3332      	adds	r3, #50	; 0x32
 8003f2c:	4a33      	ldr	r2, [pc, #204]	; (8003ffc <UART_SetConfig+0x4e4>)
 8003f2e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f32:	095b      	lsrs	r3, r3, #5
 8003f34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f38:	441c      	add	r4, r3
 8003f3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f3e:	2200      	movs	r2, #0
 8003f40:	673b      	str	r3, [r7, #112]	; 0x70
 8003f42:	677a      	str	r2, [r7, #116]	; 0x74
 8003f44:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003f48:	4642      	mov	r2, r8
 8003f4a:	464b      	mov	r3, r9
 8003f4c:	1891      	adds	r1, r2, r2
 8003f4e:	60b9      	str	r1, [r7, #8]
 8003f50:	415b      	adcs	r3, r3
 8003f52:	60fb      	str	r3, [r7, #12]
 8003f54:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f58:	4641      	mov	r1, r8
 8003f5a:	1851      	adds	r1, r2, r1
 8003f5c:	6039      	str	r1, [r7, #0]
 8003f5e:	4649      	mov	r1, r9
 8003f60:	414b      	adcs	r3, r1
 8003f62:	607b      	str	r3, [r7, #4]
 8003f64:	f04f 0200 	mov.w	r2, #0
 8003f68:	f04f 0300 	mov.w	r3, #0
 8003f6c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003f70:	4659      	mov	r1, fp
 8003f72:	00cb      	lsls	r3, r1, #3
 8003f74:	4651      	mov	r1, sl
 8003f76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f7a:	4651      	mov	r1, sl
 8003f7c:	00ca      	lsls	r2, r1, #3
 8003f7e:	4610      	mov	r0, r2
 8003f80:	4619      	mov	r1, r3
 8003f82:	4603      	mov	r3, r0
 8003f84:	4642      	mov	r2, r8
 8003f86:	189b      	adds	r3, r3, r2
 8003f88:	66bb      	str	r3, [r7, #104]	; 0x68
 8003f8a:	464b      	mov	r3, r9
 8003f8c:	460a      	mov	r2, r1
 8003f8e:	eb42 0303 	adc.w	r3, r2, r3
 8003f92:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	663b      	str	r3, [r7, #96]	; 0x60
 8003f9e:	667a      	str	r2, [r7, #100]	; 0x64
 8003fa0:	f04f 0200 	mov.w	r2, #0
 8003fa4:	f04f 0300 	mov.w	r3, #0
 8003fa8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003fac:	4649      	mov	r1, r9
 8003fae:	008b      	lsls	r3, r1, #2
 8003fb0:	4641      	mov	r1, r8
 8003fb2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003fb6:	4641      	mov	r1, r8
 8003fb8:	008a      	lsls	r2, r1, #2
 8003fba:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003fbe:	f7fc f917 	bl	80001f0 <__aeabi_uldivmod>
 8003fc2:	4602      	mov	r2, r0
 8003fc4:	460b      	mov	r3, r1
 8003fc6:	4b0d      	ldr	r3, [pc, #52]	; (8003ffc <UART_SetConfig+0x4e4>)
 8003fc8:	fba3 1302 	umull	r1, r3, r3, r2
 8003fcc:	095b      	lsrs	r3, r3, #5
 8003fce:	2164      	movs	r1, #100	; 0x64
 8003fd0:	fb01 f303 	mul.w	r3, r1, r3
 8003fd4:	1ad3      	subs	r3, r2, r3
 8003fd6:	011b      	lsls	r3, r3, #4
 8003fd8:	3332      	adds	r3, #50	; 0x32
 8003fda:	4a08      	ldr	r2, [pc, #32]	; (8003ffc <UART_SetConfig+0x4e4>)
 8003fdc:	fba2 2303 	umull	r2, r3, r2, r3
 8003fe0:	095b      	lsrs	r3, r3, #5
 8003fe2:	f003 020f 	and.w	r2, r3, #15
 8003fe6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4422      	add	r2, r4
 8003fee:	609a      	str	r2, [r3, #8]
}
 8003ff0:	bf00      	nop
 8003ff2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ffc:	51eb851f 	.word	0x51eb851f

08004000 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004000:	b084      	sub	sp, #16
 8004002:	b580      	push	{r7, lr}
 8004004:	b084      	sub	sp, #16
 8004006:	af00      	add	r7, sp, #0
 8004008:	6078      	str	r0, [r7, #4]
 800400a:	f107 001c 	add.w	r0, r7, #28
 800400e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004014:	2b01      	cmp	r3, #1
 8004016:	d122      	bne.n	800405e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800401c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	68db      	ldr	r3, [r3, #12]
 8004028:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800402c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004030:	687a      	ldr	r2, [r7, #4]
 8004032:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	68db      	ldr	r3, [r3, #12]
 8004038:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004040:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004042:	2b01      	cmp	r3, #1
 8004044:	d105      	bne.n	8004052 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	68db      	ldr	r3, [r3, #12]
 800404a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f000 faa2 	bl	800459c <USB_CoreReset>
 8004058:	4603      	mov	r3, r0
 800405a:	73fb      	strb	r3, [r7, #15]
 800405c:	e01a      	b.n	8004094 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	68db      	ldr	r3, [r3, #12]
 8004062:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f000 fa96 	bl	800459c <USB_CoreReset>
 8004070:	4603      	mov	r3, r0
 8004072:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004074:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004076:	2b00      	cmp	r3, #0
 8004078:	d106      	bne.n	8004088 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800407e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	639a      	str	r2, [r3, #56]	; 0x38
 8004086:	e005      	b.n	8004094 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800408c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004096:	2b01      	cmp	r3, #1
 8004098:	d10b      	bne.n	80040b2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	f043 0206 	orr.w	r2, r3, #6
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	f043 0220 	orr.w	r2, r3, #32
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80040b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	3710      	adds	r7, #16
 80040b8:	46bd      	mov	sp, r7
 80040ba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80040be:	b004      	add	sp, #16
 80040c0:	4770      	bx	lr

080040c2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80040c2:	b480      	push	{r7}
 80040c4:	b083      	sub	sp, #12
 80040c6:	af00      	add	r7, sp, #0
 80040c8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	f023 0201 	bic.w	r2, r3, #1
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80040d6:	2300      	movs	r3, #0
}
 80040d8:	4618      	mov	r0, r3
 80040da:	370c      	adds	r7, #12
 80040dc:	46bd      	mov	sp, r7
 80040de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e2:	4770      	bx	lr

080040e4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b084      	sub	sp, #16
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	460b      	mov	r3, r1
 80040ee:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80040f0:	2300      	movs	r3, #0
 80040f2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	68db      	ldr	r3, [r3, #12]
 80040f8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004100:	78fb      	ldrb	r3, [r7, #3]
 8004102:	2b01      	cmp	r3, #1
 8004104:	d115      	bne.n	8004132 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	68db      	ldr	r3, [r3, #12]
 800410a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004112:	2001      	movs	r0, #1
 8004114:	f7fd fdaa 	bl	8001c6c <HAL_Delay>
      ms++;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	3301      	adds	r3, #1
 800411c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f000 fa2e 	bl	8004580 <USB_GetMode>
 8004124:	4603      	mov	r3, r0
 8004126:	2b01      	cmp	r3, #1
 8004128:	d01e      	beq.n	8004168 <USB_SetCurrentMode+0x84>
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2b31      	cmp	r3, #49	; 0x31
 800412e:	d9f0      	bls.n	8004112 <USB_SetCurrentMode+0x2e>
 8004130:	e01a      	b.n	8004168 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004132:	78fb      	ldrb	r3, [r7, #3]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d115      	bne.n	8004164 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	68db      	ldr	r3, [r3, #12]
 800413c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004144:	2001      	movs	r0, #1
 8004146:	f7fd fd91 	bl	8001c6c <HAL_Delay>
      ms++;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	3301      	adds	r3, #1
 800414e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004150:	6878      	ldr	r0, [r7, #4]
 8004152:	f000 fa15 	bl	8004580 <USB_GetMode>
 8004156:	4603      	mov	r3, r0
 8004158:	2b00      	cmp	r3, #0
 800415a:	d005      	beq.n	8004168 <USB_SetCurrentMode+0x84>
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2b31      	cmp	r3, #49	; 0x31
 8004160:	d9f0      	bls.n	8004144 <USB_SetCurrentMode+0x60>
 8004162:	e001      	b.n	8004168 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	e005      	b.n	8004174 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2b32      	cmp	r3, #50	; 0x32
 800416c:	d101      	bne.n	8004172 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	e000      	b.n	8004174 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004172:	2300      	movs	r3, #0
}
 8004174:	4618      	mov	r0, r3
 8004176:	3710      	adds	r7, #16
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}

0800417c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800417c:	b084      	sub	sp, #16
 800417e:	b580      	push	{r7, lr}
 8004180:	b086      	sub	sp, #24
 8004182:	af00      	add	r7, sp, #0
 8004184:	6078      	str	r0, [r7, #4]
 8004186:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800418a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800418e:	2300      	movs	r3, #0
 8004190:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004196:	2300      	movs	r3, #0
 8004198:	613b      	str	r3, [r7, #16]
 800419a:	e009      	b.n	80041b0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800419c:	687a      	ldr	r2, [r7, #4]
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	3340      	adds	r3, #64	; 0x40
 80041a2:	009b      	lsls	r3, r3, #2
 80041a4:	4413      	add	r3, r2
 80041a6:	2200      	movs	r2, #0
 80041a8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	3301      	adds	r3, #1
 80041ae:	613b      	str	r3, [r7, #16]
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	2b0e      	cmp	r3, #14
 80041b4:	d9f2      	bls.n	800419c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80041b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d11c      	bne.n	80041f6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	68fa      	ldr	r2, [r7, #12]
 80041c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80041ca:	f043 0302 	orr.w	r3, r3, #2
 80041ce:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041d4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041e0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ec:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	639a      	str	r2, [r3, #56]	; 0x38
 80041f4:	e00b      	b.n	800420e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041fa:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004206:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004214:	461a      	mov	r2, r3
 8004216:	2300      	movs	r3, #0
 8004218:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004220:	4619      	mov	r1, r3
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004228:	461a      	mov	r2, r3
 800422a:	680b      	ldr	r3, [r1, #0]
 800422c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800422e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004230:	2b01      	cmp	r3, #1
 8004232:	d10c      	bne.n	800424e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004236:	2b00      	cmp	r3, #0
 8004238:	d104      	bne.n	8004244 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800423a:	2100      	movs	r1, #0
 800423c:	6878      	ldr	r0, [r7, #4]
 800423e:	f000 f965 	bl	800450c <USB_SetDevSpeed>
 8004242:	e008      	b.n	8004256 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004244:	2101      	movs	r1, #1
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	f000 f960 	bl	800450c <USB_SetDevSpeed>
 800424c:	e003      	b.n	8004256 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800424e:	2103      	movs	r1, #3
 8004250:	6878      	ldr	r0, [r7, #4]
 8004252:	f000 f95b 	bl	800450c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004256:	2110      	movs	r1, #16
 8004258:	6878      	ldr	r0, [r7, #4]
 800425a:	f000 f8f3 	bl	8004444 <USB_FlushTxFifo>
 800425e:	4603      	mov	r3, r0
 8004260:	2b00      	cmp	r3, #0
 8004262:	d001      	beq.n	8004268 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004268:	6878      	ldr	r0, [r7, #4]
 800426a:	f000 f91f 	bl	80044ac <USB_FlushRxFifo>
 800426e:	4603      	mov	r3, r0
 8004270:	2b00      	cmp	r3, #0
 8004272:	d001      	beq.n	8004278 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800427e:	461a      	mov	r2, r3
 8004280:	2300      	movs	r3, #0
 8004282:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800428a:	461a      	mov	r2, r3
 800428c:	2300      	movs	r3, #0
 800428e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004296:	461a      	mov	r2, r3
 8004298:	2300      	movs	r3, #0
 800429a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800429c:	2300      	movs	r3, #0
 800429e:	613b      	str	r3, [r7, #16]
 80042a0:	e043      	b.n	800432a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	015a      	lsls	r2, r3, #5
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	4413      	add	r3, r2
 80042aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80042b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80042b8:	d118      	bne.n	80042ec <USB_DevInit+0x170>
    {
      if (i == 0U)
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d10a      	bne.n	80042d6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	015a      	lsls	r2, r3, #5
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	4413      	add	r3, r2
 80042c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042cc:	461a      	mov	r2, r3
 80042ce:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80042d2:	6013      	str	r3, [r2, #0]
 80042d4:	e013      	b.n	80042fe <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	015a      	lsls	r2, r3, #5
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	4413      	add	r3, r2
 80042de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042e2:	461a      	mov	r2, r3
 80042e4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80042e8:	6013      	str	r3, [r2, #0]
 80042ea:	e008      	b.n	80042fe <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	015a      	lsls	r2, r3, #5
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	4413      	add	r3, r2
 80042f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042f8:	461a      	mov	r2, r3
 80042fa:	2300      	movs	r3, #0
 80042fc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	015a      	lsls	r2, r3, #5
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	4413      	add	r3, r2
 8004306:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800430a:	461a      	mov	r2, r3
 800430c:	2300      	movs	r3, #0
 800430e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	015a      	lsls	r2, r3, #5
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	4413      	add	r3, r2
 8004318:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800431c:	461a      	mov	r2, r3
 800431e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004322:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	3301      	adds	r3, #1
 8004328:	613b      	str	r3, [r7, #16]
 800432a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800432c:	693a      	ldr	r2, [r7, #16]
 800432e:	429a      	cmp	r2, r3
 8004330:	d3b7      	bcc.n	80042a2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004332:	2300      	movs	r3, #0
 8004334:	613b      	str	r3, [r7, #16]
 8004336:	e043      	b.n	80043c0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	015a      	lsls	r2, r3, #5
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	4413      	add	r3, r2
 8004340:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800434a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800434e:	d118      	bne.n	8004382 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d10a      	bne.n	800436c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	015a      	lsls	r2, r3, #5
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	4413      	add	r3, r2
 800435e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004362:	461a      	mov	r2, r3
 8004364:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004368:	6013      	str	r3, [r2, #0]
 800436a:	e013      	b.n	8004394 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	015a      	lsls	r2, r3, #5
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	4413      	add	r3, r2
 8004374:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004378:	461a      	mov	r2, r3
 800437a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800437e:	6013      	str	r3, [r2, #0]
 8004380:	e008      	b.n	8004394 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	015a      	lsls	r2, r3, #5
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	4413      	add	r3, r2
 800438a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800438e:	461a      	mov	r2, r3
 8004390:	2300      	movs	r3, #0
 8004392:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	015a      	lsls	r2, r3, #5
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	4413      	add	r3, r2
 800439c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043a0:	461a      	mov	r2, r3
 80043a2:	2300      	movs	r3, #0
 80043a4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	015a      	lsls	r2, r3, #5
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	4413      	add	r3, r2
 80043ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043b2:	461a      	mov	r2, r3
 80043b4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80043b8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	3301      	adds	r3, #1
 80043be:	613b      	str	r3, [r7, #16]
 80043c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c2:	693a      	ldr	r2, [r7, #16]
 80043c4:	429a      	cmp	r2, r3
 80043c6:	d3b7      	bcc.n	8004338 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043ce:	691b      	ldr	r3, [r3, #16]
 80043d0:	68fa      	ldr	r2, [r7, #12]
 80043d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80043d6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043da:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2200      	movs	r2, #0
 80043e0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80043e8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80043ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d105      	bne.n	80043fc <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	699b      	ldr	r3, [r3, #24]
 80043f4:	f043 0210 	orr.w	r2, r3, #16
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	699a      	ldr	r2, [r3, #24]
 8004400:	4b0f      	ldr	r3, [pc, #60]	; (8004440 <USB_DevInit+0x2c4>)
 8004402:	4313      	orrs	r3, r2
 8004404:	687a      	ldr	r2, [r7, #4]
 8004406:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004408:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800440a:	2b00      	cmp	r3, #0
 800440c:	d005      	beq.n	800441a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	699b      	ldr	r3, [r3, #24]
 8004412:	f043 0208 	orr.w	r2, r3, #8
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800441a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800441c:	2b01      	cmp	r3, #1
 800441e:	d107      	bne.n	8004430 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	699b      	ldr	r3, [r3, #24]
 8004424:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004428:	f043 0304 	orr.w	r3, r3, #4
 800442c:	687a      	ldr	r2, [r7, #4]
 800442e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004430:	7dfb      	ldrb	r3, [r7, #23]
}
 8004432:	4618      	mov	r0, r3
 8004434:	3718      	adds	r7, #24
 8004436:	46bd      	mov	sp, r7
 8004438:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800443c:	b004      	add	sp, #16
 800443e:	4770      	bx	lr
 8004440:	803c3800 	.word	0x803c3800

08004444 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004444:	b480      	push	{r7}
 8004446:	b085      	sub	sp, #20
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
 800444c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800444e:	2300      	movs	r3, #0
 8004450:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	3301      	adds	r3, #1
 8004456:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	4a13      	ldr	r2, [pc, #76]	; (80044a8 <USB_FlushTxFifo+0x64>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d901      	bls.n	8004464 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004460:	2303      	movs	r3, #3
 8004462:	e01b      	b.n	800449c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	691b      	ldr	r3, [r3, #16]
 8004468:	2b00      	cmp	r3, #0
 800446a:	daf2      	bge.n	8004452 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800446c:	2300      	movs	r3, #0
 800446e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	019b      	lsls	r3, r3, #6
 8004474:	f043 0220 	orr.w	r2, r3, #32
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	3301      	adds	r3, #1
 8004480:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	4a08      	ldr	r2, [pc, #32]	; (80044a8 <USB_FlushTxFifo+0x64>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d901      	bls.n	800448e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800448a:	2303      	movs	r3, #3
 800448c:	e006      	b.n	800449c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	691b      	ldr	r3, [r3, #16]
 8004492:	f003 0320 	and.w	r3, r3, #32
 8004496:	2b20      	cmp	r3, #32
 8004498:	d0f0      	beq.n	800447c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800449a:	2300      	movs	r3, #0
}
 800449c:	4618      	mov	r0, r3
 800449e:	3714      	adds	r7, #20
 80044a0:	46bd      	mov	sp, r7
 80044a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a6:	4770      	bx	lr
 80044a8:	00030d40 	.word	0x00030d40

080044ac <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b085      	sub	sp, #20
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80044b4:	2300      	movs	r3, #0
 80044b6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	3301      	adds	r3, #1
 80044bc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	4a11      	ldr	r2, [pc, #68]	; (8004508 <USB_FlushRxFifo+0x5c>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d901      	bls.n	80044ca <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80044c6:	2303      	movs	r3, #3
 80044c8:	e018      	b.n	80044fc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	691b      	ldr	r3, [r3, #16]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	daf2      	bge.n	80044b8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80044d2:	2300      	movs	r3, #0
 80044d4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2210      	movs	r2, #16
 80044da:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	3301      	adds	r3, #1
 80044e0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	4a08      	ldr	r2, [pc, #32]	; (8004508 <USB_FlushRxFifo+0x5c>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d901      	bls.n	80044ee <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80044ea:	2303      	movs	r3, #3
 80044ec:	e006      	b.n	80044fc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	691b      	ldr	r3, [r3, #16]
 80044f2:	f003 0310 	and.w	r3, r3, #16
 80044f6:	2b10      	cmp	r3, #16
 80044f8:	d0f0      	beq.n	80044dc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80044fa:	2300      	movs	r3, #0
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	3714      	adds	r7, #20
 8004500:	46bd      	mov	sp, r7
 8004502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004506:	4770      	bx	lr
 8004508:	00030d40 	.word	0x00030d40

0800450c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800450c:	b480      	push	{r7}
 800450e:	b085      	sub	sp, #20
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
 8004514:	460b      	mov	r3, r1
 8004516:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	78fb      	ldrb	r3, [r7, #3]
 8004526:	68f9      	ldr	r1, [r7, #12]
 8004528:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800452c:	4313      	orrs	r3, r2
 800452e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004530:	2300      	movs	r3, #0
}
 8004532:	4618      	mov	r0, r3
 8004534:	3714      	adds	r7, #20
 8004536:	46bd      	mov	sp, r7
 8004538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453c:	4770      	bx	lr

0800453e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800453e:	b480      	push	{r7}
 8004540:	b085      	sub	sp, #20
 8004542:	af00      	add	r7, sp, #0
 8004544:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	68fa      	ldr	r2, [r7, #12]
 8004554:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004558:	f023 0303 	bic.w	r3, r3, #3
 800455c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	68fa      	ldr	r2, [r7, #12]
 8004568:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800456c:	f043 0302 	orr.w	r3, r3, #2
 8004570:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004572:	2300      	movs	r3, #0
}
 8004574:	4618      	mov	r0, r3
 8004576:	3714      	adds	r7, #20
 8004578:	46bd      	mov	sp, r7
 800457a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457e:	4770      	bx	lr

08004580 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004580:	b480      	push	{r7}
 8004582:	b083      	sub	sp, #12
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	695b      	ldr	r3, [r3, #20]
 800458c:	f003 0301 	and.w	r3, r3, #1
}
 8004590:	4618      	mov	r0, r3
 8004592:	370c      	adds	r7, #12
 8004594:	46bd      	mov	sp, r7
 8004596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459a:	4770      	bx	lr

0800459c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800459c:	b480      	push	{r7}
 800459e:	b085      	sub	sp, #20
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80045a4:	2300      	movs	r3, #0
 80045a6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	3301      	adds	r3, #1
 80045ac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	4a13      	ldr	r2, [pc, #76]	; (8004600 <USB_CoreReset+0x64>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d901      	bls.n	80045ba <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80045b6:	2303      	movs	r3, #3
 80045b8:	e01b      	b.n	80045f2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	691b      	ldr	r3, [r3, #16]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	daf2      	bge.n	80045a8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80045c2:	2300      	movs	r3, #0
 80045c4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	691b      	ldr	r3, [r3, #16]
 80045ca:	f043 0201 	orr.w	r2, r3, #1
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	3301      	adds	r3, #1
 80045d6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	4a09      	ldr	r2, [pc, #36]	; (8004600 <USB_CoreReset+0x64>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d901      	bls.n	80045e4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80045e0:	2303      	movs	r3, #3
 80045e2:	e006      	b.n	80045f2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	691b      	ldr	r3, [r3, #16]
 80045e8:	f003 0301 	and.w	r3, r3, #1
 80045ec:	2b01      	cmp	r3, #1
 80045ee:	d0f0      	beq.n	80045d2 <USB_CoreReset+0x36>

  return HAL_OK;
 80045f0:	2300      	movs	r3, #0
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	3714      	adds	r7, #20
 80045f6:	46bd      	mov	sp, r7
 80045f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fc:	4770      	bx	lr
 80045fe:	bf00      	nop
 8004600:	00030d40 	.word	0x00030d40

08004604 <__NVIC_SetPriority>:
{
 8004604:	b480      	push	{r7}
 8004606:	b083      	sub	sp, #12
 8004608:	af00      	add	r7, sp, #0
 800460a:	4603      	mov	r3, r0
 800460c:	6039      	str	r1, [r7, #0]
 800460e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004610:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004614:	2b00      	cmp	r3, #0
 8004616:	db0a      	blt.n	800462e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	b2da      	uxtb	r2, r3
 800461c:	490c      	ldr	r1, [pc, #48]	; (8004650 <__NVIC_SetPriority+0x4c>)
 800461e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004622:	0112      	lsls	r2, r2, #4
 8004624:	b2d2      	uxtb	r2, r2
 8004626:	440b      	add	r3, r1
 8004628:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800462c:	e00a      	b.n	8004644 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	b2da      	uxtb	r2, r3
 8004632:	4908      	ldr	r1, [pc, #32]	; (8004654 <__NVIC_SetPriority+0x50>)
 8004634:	79fb      	ldrb	r3, [r7, #7]
 8004636:	f003 030f 	and.w	r3, r3, #15
 800463a:	3b04      	subs	r3, #4
 800463c:	0112      	lsls	r2, r2, #4
 800463e:	b2d2      	uxtb	r2, r2
 8004640:	440b      	add	r3, r1
 8004642:	761a      	strb	r2, [r3, #24]
}
 8004644:	bf00      	nop
 8004646:	370c      	adds	r7, #12
 8004648:	46bd      	mov	sp, r7
 800464a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464e:	4770      	bx	lr
 8004650:	e000e100 	.word	0xe000e100
 8004654:	e000ed00 	.word	0xe000ed00

08004658 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004658:	b580      	push	{r7, lr}
 800465a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800465c:	4b05      	ldr	r3, [pc, #20]	; (8004674 <SysTick_Handler+0x1c>)
 800465e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004660:	f001 fdaa 	bl	80061b8 <xTaskGetSchedulerState>
 8004664:	4603      	mov	r3, r0
 8004666:	2b01      	cmp	r3, #1
 8004668:	d001      	beq.n	800466e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800466a:	f002 fb95 	bl	8006d98 <xPortSysTickHandler>
  }
}
 800466e:	bf00      	nop
 8004670:	bd80      	pop	{r7, pc}
 8004672:	bf00      	nop
 8004674:	e000e010 	.word	0xe000e010

08004678 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004678:	b580      	push	{r7, lr}
 800467a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800467c:	2100      	movs	r1, #0
 800467e:	f06f 0004 	mvn.w	r0, #4
 8004682:	f7ff ffbf 	bl	8004604 <__NVIC_SetPriority>
#endif
}
 8004686:	bf00      	nop
 8004688:	bd80      	pop	{r7, pc}
	...

0800468c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800468c:	b480      	push	{r7}
 800468e:	b083      	sub	sp, #12
 8004690:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004692:	f3ef 8305 	mrs	r3, IPSR
 8004696:	603b      	str	r3, [r7, #0]
  return(result);
 8004698:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800469a:	2b00      	cmp	r3, #0
 800469c:	d003      	beq.n	80046a6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800469e:	f06f 0305 	mvn.w	r3, #5
 80046a2:	607b      	str	r3, [r7, #4]
 80046a4:	e00c      	b.n	80046c0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80046a6:	4b0a      	ldr	r3, [pc, #40]	; (80046d0 <osKernelInitialize+0x44>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d105      	bne.n	80046ba <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80046ae:	4b08      	ldr	r3, [pc, #32]	; (80046d0 <osKernelInitialize+0x44>)
 80046b0:	2201      	movs	r2, #1
 80046b2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80046b4:	2300      	movs	r3, #0
 80046b6:	607b      	str	r3, [r7, #4]
 80046b8:	e002      	b.n	80046c0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80046ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80046be:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80046c0:	687b      	ldr	r3, [r7, #4]
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	370c      	adds	r7, #12
 80046c6:	46bd      	mov	sp, r7
 80046c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046cc:	4770      	bx	lr
 80046ce:	bf00      	nop
 80046d0:	20000d20 	.word	0x20000d20

080046d4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b082      	sub	sp, #8
 80046d8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80046da:	f3ef 8305 	mrs	r3, IPSR
 80046de:	603b      	str	r3, [r7, #0]
  return(result);
 80046e0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d003      	beq.n	80046ee <osKernelStart+0x1a>
    stat = osErrorISR;
 80046e6:	f06f 0305 	mvn.w	r3, #5
 80046ea:	607b      	str	r3, [r7, #4]
 80046ec:	e010      	b.n	8004710 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80046ee:	4b0b      	ldr	r3, [pc, #44]	; (800471c <osKernelStart+0x48>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	2b01      	cmp	r3, #1
 80046f4:	d109      	bne.n	800470a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80046f6:	f7ff ffbf 	bl	8004678 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80046fa:	4b08      	ldr	r3, [pc, #32]	; (800471c <osKernelStart+0x48>)
 80046fc:	2202      	movs	r2, #2
 80046fe:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004700:	f001 f8e0 	bl	80058c4 <vTaskStartScheduler>
      stat = osOK;
 8004704:	2300      	movs	r3, #0
 8004706:	607b      	str	r3, [r7, #4]
 8004708:	e002      	b.n	8004710 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800470a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800470e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004710:	687b      	ldr	r3, [r7, #4]
}
 8004712:	4618      	mov	r0, r3
 8004714:	3708      	adds	r7, #8
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}
 800471a:	bf00      	nop
 800471c:	20000d20 	.word	0x20000d20

08004720 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004720:	b580      	push	{r7, lr}
 8004722:	b08e      	sub	sp, #56	; 0x38
 8004724:	af04      	add	r7, sp, #16
 8004726:	60f8      	str	r0, [r7, #12]
 8004728:	60b9      	str	r1, [r7, #8]
 800472a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800472c:	2300      	movs	r3, #0
 800472e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004730:	f3ef 8305 	mrs	r3, IPSR
 8004734:	617b      	str	r3, [r7, #20]
  return(result);
 8004736:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004738:	2b00      	cmp	r3, #0
 800473a:	d17e      	bne.n	800483a <osThreadNew+0x11a>
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d07b      	beq.n	800483a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004742:	2380      	movs	r3, #128	; 0x80
 8004744:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004746:	2318      	movs	r3, #24
 8004748:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800474a:	2300      	movs	r3, #0
 800474c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800474e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004752:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d045      	beq.n	80047e6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d002      	beq.n	8004768 <osThreadNew+0x48>
        name = attr->name;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	699b      	ldr	r3, [r3, #24]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d002      	beq.n	8004776 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	699b      	ldr	r3, [r3, #24]
 8004774:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004776:	69fb      	ldr	r3, [r7, #28]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d008      	beq.n	800478e <osThreadNew+0x6e>
 800477c:	69fb      	ldr	r3, [r7, #28]
 800477e:	2b38      	cmp	r3, #56	; 0x38
 8004780:	d805      	bhi.n	800478e <osThreadNew+0x6e>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	f003 0301 	and.w	r3, r3, #1
 800478a:	2b00      	cmp	r3, #0
 800478c:	d001      	beq.n	8004792 <osThreadNew+0x72>
        return (NULL);
 800478e:	2300      	movs	r3, #0
 8004790:	e054      	b.n	800483c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	695b      	ldr	r3, [r3, #20]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d003      	beq.n	80047a2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	695b      	ldr	r3, [r3, #20]
 800479e:	089b      	lsrs	r3, r3, #2
 80047a0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d00e      	beq.n	80047c8 <osThreadNew+0xa8>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	68db      	ldr	r3, [r3, #12]
 80047ae:	2bab      	cmp	r3, #171	; 0xab
 80047b0:	d90a      	bls.n	80047c8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d006      	beq.n	80047c8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	695b      	ldr	r3, [r3, #20]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d002      	beq.n	80047c8 <osThreadNew+0xa8>
        mem = 1;
 80047c2:	2301      	movs	r3, #1
 80047c4:	61bb      	str	r3, [r7, #24]
 80047c6:	e010      	b.n	80047ea <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d10c      	bne.n	80047ea <osThreadNew+0xca>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	68db      	ldr	r3, [r3, #12]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d108      	bne.n	80047ea <osThreadNew+0xca>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	691b      	ldr	r3, [r3, #16]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d104      	bne.n	80047ea <osThreadNew+0xca>
          mem = 0;
 80047e0:	2300      	movs	r3, #0
 80047e2:	61bb      	str	r3, [r7, #24]
 80047e4:	e001      	b.n	80047ea <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80047e6:	2300      	movs	r3, #0
 80047e8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80047ea:	69bb      	ldr	r3, [r7, #24]
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	d110      	bne.n	8004812 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80047f4:	687a      	ldr	r2, [r7, #4]
 80047f6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80047f8:	9202      	str	r2, [sp, #8]
 80047fa:	9301      	str	r3, [sp, #4]
 80047fc:	69fb      	ldr	r3, [r7, #28]
 80047fe:	9300      	str	r3, [sp, #0]
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	6a3a      	ldr	r2, [r7, #32]
 8004804:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004806:	68f8      	ldr	r0, [r7, #12]
 8004808:	f000 fe6c 	bl	80054e4 <xTaskCreateStatic>
 800480c:	4603      	mov	r3, r0
 800480e:	613b      	str	r3, [r7, #16]
 8004810:	e013      	b.n	800483a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004812:	69bb      	ldr	r3, [r7, #24]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d110      	bne.n	800483a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004818:	6a3b      	ldr	r3, [r7, #32]
 800481a:	b29a      	uxth	r2, r3
 800481c:	f107 0310 	add.w	r3, r7, #16
 8004820:	9301      	str	r3, [sp, #4]
 8004822:	69fb      	ldr	r3, [r7, #28]
 8004824:	9300      	str	r3, [sp, #0]
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800482a:	68f8      	ldr	r0, [r7, #12]
 800482c:	f000 feb7 	bl	800559e <xTaskCreate>
 8004830:	4603      	mov	r3, r0
 8004832:	2b01      	cmp	r3, #1
 8004834:	d001      	beq.n	800483a <osThreadNew+0x11a>
            hTask = NULL;
 8004836:	2300      	movs	r3, #0
 8004838:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800483a:	693b      	ldr	r3, [r7, #16]
}
 800483c:	4618      	mov	r0, r3
 800483e:	3728      	adds	r7, #40	; 0x28
 8004840:	46bd      	mov	sp, r7
 8004842:	bd80      	pop	{r7, pc}

08004844 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004844:	b580      	push	{r7, lr}
 8004846:	b084      	sub	sp, #16
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800484c:	f3ef 8305 	mrs	r3, IPSR
 8004850:	60bb      	str	r3, [r7, #8]
  return(result);
 8004852:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004854:	2b00      	cmp	r3, #0
 8004856:	d003      	beq.n	8004860 <osDelay+0x1c>
    stat = osErrorISR;
 8004858:	f06f 0305 	mvn.w	r3, #5
 800485c:	60fb      	str	r3, [r7, #12]
 800485e:	e007      	b.n	8004870 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004860:	2300      	movs	r3, #0
 8004862:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d002      	beq.n	8004870 <osDelay+0x2c>
      vTaskDelay(ticks);
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	f000 fff6 	bl	800585c <vTaskDelay>
    }
  }

  return (stat);
 8004870:	68fb      	ldr	r3, [r7, #12]
}
 8004872:	4618      	mov	r0, r3
 8004874:	3710      	adds	r7, #16
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}
	...

0800487c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800487c:	b480      	push	{r7}
 800487e:	b085      	sub	sp, #20
 8004880:	af00      	add	r7, sp, #0
 8004882:	60f8      	str	r0, [r7, #12]
 8004884:	60b9      	str	r1, [r7, #8]
 8004886:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	4a07      	ldr	r2, [pc, #28]	; (80048a8 <vApplicationGetIdleTaskMemory+0x2c>)
 800488c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	4a06      	ldr	r2, [pc, #24]	; (80048ac <vApplicationGetIdleTaskMemory+0x30>)
 8004892:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2280      	movs	r2, #128	; 0x80
 8004898:	601a      	str	r2, [r3, #0]
}
 800489a:	bf00      	nop
 800489c:	3714      	adds	r7, #20
 800489e:	46bd      	mov	sp, r7
 80048a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a4:	4770      	bx	lr
 80048a6:	bf00      	nop
 80048a8:	20000d24 	.word	0x20000d24
 80048ac:	20000dd0 	.word	0x20000dd0

080048b0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80048b0:	b480      	push	{r7}
 80048b2:	b085      	sub	sp, #20
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	60f8      	str	r0, [r7, #12]
 80048b8:	60b9      	str	r1, [r7, #8]
 80048ba:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	4a07      	ldr	r2, [pc, #28]	; (80048dc <vApplicationGetTimerTaskMemory+0x2c>)
 80048c0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	4a06      	ldr	r2, [pc, #24]	; (80048e0 <vApplicationGetTimerTaskMemory+0x30>)
 80048c6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80048ce:	601a      	str	r2, [r3, #0]
}
 80048d0:	bf00      	nop
 80048d2:	3714      	adds	r7, #20
 80048d4:	46bd      	mov	sp, r7
 80048d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048da:	4770      	bx	lr
 80048dc:	20000fd0 	.word	0x20000fd0
 80048e0:	2000107c 	.word	0x2000107c

080048e4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80048e4:	b480      	push	{r7}
 80048e6:	b083      	sub	sp, #12
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	f103 0208 	add.w	r2, r3, #8
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80048fc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	f103 0208 	add.w	r2, r3, #8
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	f103 0208 	add.w	r2, r3, #8
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2200      	movs	r2, #0
 8004916:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004918:	bf00      	nop
 800491a:	370c      	adds	r7, #12
 800491c:	46bd      	mov	sp, r7
 800491e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004922:	4770      	bx	lr

08004924 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004924:	b480      	push	{r7}
 8004926:	b083      	sub	sp, #12
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2200      	movs	r2, #0
 8004930:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004932:	bf00      	nop
 8004934:	370c      	adds	r7, #12
 8004936:	46bd      	mov	sp, r7
 8004938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493c:	4770      	bx	lr

0800493e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800493e:	b480      	push	{r7}
 8004940:	b085      	sub	sp, #20
 8004942:	af00      	add	r7, sp, #0
 8004944:	6078      	str	r0, [r7, #4]
 8004946:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	68fa      	ldr	r2, [r7, #12]
 8004952:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	689a      	ldr	r2, [r3, #8]
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	689b      	ldr	r3, [r3, #8]
 8004960:	683a      	ldr	r2, [r7, #0]
 8004962:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	683a      	ldr	r2, [r7, #0]
 8004968:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	687a      	ldr	r2, [r7, #4]
 800496e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	1c5a      	adds	r2, r3, #1
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	601a      	str	r2, [r3, #0]
}
 800497a:	bf00      	nop
 800497c:	3714      	adds	r7, #20
 800497e:	46bd      	mov	sp, r7
 8004980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004984:	4770      	bx	lr

08004986 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004986:	b480      	push	{r7}
 8004988:	b085      	sub	sp, #20
 800498a:	af00      	add	r7, sp, #0
 800498c:	6078      	str	r0, [r7, #4]
 800498e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800499c:	d103      	bne.n	80049a6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	691b      	ldr	r3, [r3, #16]
 80049a2:	60fb      	str	r3, [r7, #12]
 80049a4:	e00c      	b.n	80049c0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	3308      	adds	r3, #8
 80049aa:	60fb      	str	r3, [r7, #12]
 80049ac:	e002      	b.n	80049b4 <vListInsert+0x2e>
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	60fb      	str	r3, [r7, #12]
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	68ba      	ldr	r2, [r7, #8]
 80049bc:	429a      	cmp	r2, r3
 80049be:	d2f6      	bcs.n	80049ae <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	685a      	ldr	r2, [r3, #4]
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	683a      	ldr	r2, [r7, #0]
 80049ce:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	68fa      	ldr	r2, [r7, #12]
 80049d4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	683a      	ldr	r2, [r7, #0]
 80049da:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	687a      	ldr	r2, [r7, #4]
 80049e0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	1c5a      	adds	r2, r3, #1
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	601a      	str	r2, [r3, #0]
}
 80049ec:	bf00      	nop
 80049ee:	3714      	adds	r7, #20
 80049f0:	46bd      	mov	sp, r7
 80049f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f6:	4770      	bx	lr

080049f8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80049f8:	b480      	push	{r7}
 80049fa:	b085      	sub	sp, #20
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	691b      	ldr	r3, [r3, #16]
 8004a04:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	687a      	ldr	r2, [r7, #4]
 8004a0c:	6892      	ldr	r2, [r2, #8]
 8004a0e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	687a      	ldr	r2, [r7, #4]
 8004a16:	6852      	ldr	r2, [r2, #4]
 8004a18:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	687a      	ldr	r2, [r7, #4]
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d103      	bne.n	8004a2c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	689a      	ldr	r2, [r3, #8]
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	1e5a      	subs	r2, r3, #1
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	3714      	adds	r7, #20
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr

08004a4c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b084      	sub	sp, #16
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
 8004a54:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d10a      	bne.n	8004a76 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a64:	f383 8811 	msr	BASEPRI, r3
 8004a68:	f3bf 8f6f 	isb	sy
 8004a6c:	f3bf 8f4f 	dsb	sy
 8004a70:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004a72:	bf00      	nop
 8004a74:	e7fe      	b.n	8004a74 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004a76:	f002 f8fd 	bl	8006c74 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a82:	68f9      	ldr	r1, [r7, #12]
 8004a84:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004a86:	fb01 f303 	mul.w	r3, r1, r3
 8004a8a:	441a      	add	r2, r3
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2200      	movs	r2, #0
 8004a94:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681a      	ldr	r2, [r3, #0]
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aa6:	3b01      	subs	r3, #1
 8004aa8:	68f9      	ldr	r1, [r7, #12]
 8004aaa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004aac:	fb01 f303 	mul.w	r3, r1, r3
 8004ab0:	441a      	add	r2, r3
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	22ff      	movs	r2, #255	; 0xff
 8004aba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	22ff      	movs	r2, #255	; 0xff
 8004ac2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d114      	bne.n	8004af6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	691b      	ldr	r3, [r3, #16]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d01a      	beq.n	8004b0a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	3310      	adds	r3, #16
 8004ad8:	4618      	mov	r0, r3
 8004ada:	f001 f9ab 	bl	8005e34 <xTaskRemoveFromEventList>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d012      	beq.n	8004b0a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004ae4:	4b0c      	ldr	r3, [pc, #48]	; (8004b18 <xQueueGenericReset+0xcc>)
 8004ae6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004aea:	601a      	str	r2, [r3, #0]
 8004aec:	f3bf 8f4f 	dsb	sy
 8004af0:	f3bf 8f6f 	isb	sy
 8004af4:	e009      	b.n	8004b0a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	3310      	adds	r3, #16
 8004afa:	4618      	mov	r0, r3
 8004afc:	f7ff fef2 	bl	80048e4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	3324      	adds	r3, #36	; 0x24
 8004b04:	4618      	mov	r0, r3
 8004b06:	f7ff feed 	bl	80048e4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004b0a:	f002 f8e3 	bl	8006cd4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004b0e:	2301      	movs	r3, #1
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	3710      	adds	r7, #16
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}
 8004b18:	e000ed04 	.word	0xe000ed04

08004b1c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b08e      	sub	sp, #56	; 0x38
 8004b20:	af02      	add	r7, sp, #8
 8004b22:	60f8      	str	r0, [r7, #12]
 8004b24:	60b9      	str	r1, [r7, #8]
 8004b26:	607a      	str	r2, [r7, #4]
 8004b28:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d10a      	bne.n	8004b46 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b34:	f383 8811 	msr	BASEPRI, r3
 8004b38:	f3bf 8f6f 	isb	sy
 8004b3c:	f3bf 8f4f 	dsb	sy
 8004b40:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004b42:	bf00      	nop
 8004b44:	e7fe      	b.n	8004b44 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d10a      	bne.n	8004b62 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b50:	f383 8811 	msr	BASEPRI, r3
 8004b54:	f3bf 8f6f 	isb	sy
 8004b58:	f3bf 8f4f 	dsb	sy
 8004b5c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004b5e:	bf00      	nop
 8004b60:	e7fe      	b.n	8004b60 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d002      	beq.n	8004b6e <xQueueGenericCreateStatic+0x52>
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d001      	beq.n	8004b72 <xQueueGenericCreateStatic+0x56>
 8004b6e:	2301      	movs	r3, #1
 8004b70:	e000      	b.n	8004b74 <xQueueGenericCreateStatic+0x58>
 8004b72:	2300      	movs	r3, #0
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d10a      	bne.n	8004b8e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004b78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b7c:	f383 8811 	msr	BASEPRI, r3
 8004b80:	f3bf 8f6f 	isb	sy
 8004b84:	f3bf 8f4f 	dsb	sy
 8004b88:	623b      	str	r3, [r7, #32]
}
 8004b8a:	bf00      	nop
 8004b8c:	e7fe      	b.n	8004b8c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d102      	bne.n	8004b9a <xQueueGenericCreateStatic+0x7e>
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d101      	bne.n	8004b9e <xQueueGenericCreateStatic+0x82>
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e000      	b.n	8004ba0 <xQueueGenericCreateStatic+0x84>
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d10a      	bne.n	8004bba <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ba8:	f383 8811 	msr	BASEPRI, r3
 8004bac:	f3bf 8f6f 	isb	sy
 8004bb0:	f3bf 8f4f 	dsb	sy
 8004bb4:	61fb      	str	r3, [r7, #28]
}
 8004bb6:	bf00      	nop
 8004bb8:	e7fe      	b.n	8004bb8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004bba:	2350      	movs	r3, #80	; 0x50
 8004bbc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	2b50      	cmp	r3, #80	; 0x50
 8004bc2:	d00a      	beq.n	8004bda <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bc8:	f383 8811 	msr	BASEPRI, r3
 8004bcc:	f3bf 8f6f 	isb	sy
 8004bd0:	f3bf 8f4f 	dsb	sy
 8004bd4:	61bb      	str	r3, [r7, #24]
}
 8004bd6:	bf00      	nop
 8004bd8:	e7fe      	b.n	8004bd8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004bda:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d00d      	beq.n	8004c02 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004be8:	2201      	movs	r2, #1
 8004bea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004bee:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bf4:	9300      	str	r3, [sp, #0]
 8004bf6:	4613      	mov	r3, r2
 8004bf8:	687a      	ldr	r2, [r7, #4]
 8004bfa:	68b9      	ldr	r1, [r7, #8]
 8004bfc:	68f8      	ldr	r0, [r7, #12]
 8004bfe:	f000 f83f 	bl	8004c80 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004c04:	4618      	mov	r0, r3
 8004c06:	3730      	adds	r7, #48	; 0x30
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}

08004c0c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b08a      	sub	sp, #40	; 0x28
 8004c10:	af02      	add	r7, sp, #8
 8004c12:	60f8      	str	r0, [r7, #12]
 8004c14:	60b9      	str	r1, [r7, #8]
 8004c16:	4613      	mov	r3, r2
 8004c18:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d10a      	bne.n	8004c36 <xQueueGenericCreate+0x2a>
	__asm volatile
 8004c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c24:	f383 8811 	msr	BASEPRI, r3
 8004c28:	f3bf 8f6f 	isb	sy
 8004c2c:	f3bf 8f4f 	dsb	sy
 8004c30:	613b      	str	r3, [r7, #16]
}
 8004c32:	bf00      	nop
 8004c34:	e7fe      	b.n	8004c34 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	68ba      	ldr	r2, [r7, #8]
 8004c3a:	fb02 f303 	mul.w	r3, r2, r3
 8004c3e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004c40:	69fb      	ldr	r3, [r7, #28]
 8004c42:	3350      	adds	r3, #80	; 0x50
 8004c44:	4618      	mov	r0, r3
 8004c46:	f002 f937 	bl	8006eb8 <pvPortMalloc>
 8004c4a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004c4c:	69bb      	ldr	r3, [r7, #24]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d011      	beq.n	8004c76 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004c52:	69bb      	ldr	r3, [r7, #24]
 8004c54:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	3350      	adds	r3, #80	; 0x50
 8004c5a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004c5c:	69bb      	ldr	r3, [r7, #24]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004c64:	79fa      	ldrb	r2, [r7, #7]
 8004c66:	69bb      	ldr	r3, [r7, #24]
 8004c68:	9300      	str	r3, [sp, #0]
 8004c6a:	4613      	mov	r3, r2
 8004c6c:	697a      	ldr	r2, [r7, #20]
 8004c6e:	68b9      	ldr	r1, [r7, #8]
 8004c70:	68f8      	ldr	r0, [r7, #12]
 8004c72:	f000 f805 	bl	8004c80 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004c76:	69bb      	ldr	r3, [r7, #24]
	}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	3720      	adds	r7, #32
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}

08004c80 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b084      	sub	sp, #16
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	60f8      	str	r0, [r7, #12]
 8004c88:	60b9      	str	r1, [r7, #8]
 8004c8a:	607a      	str	r2, [r7, #4]
 8004c8c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d103      	bne.n	8004c9c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004c94:	69bb      	ldr	r3, [r7, #24]
 8004c96:	69ba      	ldr	r2, [r7, #24]
 8004c98:	601a      	str	r2, [r3, #0]
 8004c9a:	e002      	b.n	8004ca2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004c9c:	69bb      	ldr	r3, [r7, #24]
 8004c9e:	687a      	ldr	r2, [r7, #4]
 8004ca0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004ca2:	69bb      	ldr	r3, [r7, #24]
 8004ca4:	68fa      	ldr	r2, [r7, #12]
 8004ca6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004ca8:	69bb      	ldr	r3, [r7, #24]
 8004caa:	68ba      	ldr	r2, [r7, #8]
 8004cac:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004cae:	2101      	movs	r1, #1
 8004cb0:	69b8      	ldr	r0, [r7, #24]
 8004cb2:	f7ff fecb 	bl	8004a4c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004cb6:	69bb      	ldr	r3, [r7, #24]
 8004cb8:	78fa      	ldrb	r2, [r7, #3]
 8004cba:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004cbe:	bf00      	nop
 8004cc0:	3710      	adds	r7, #16
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}
	...

08004cc8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b08e      	sub	sp, #56	; 0x38
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	60f8      	str	r0, [r7, #12]
 8004cd0:	60b9      	str	r1, [r7, #8]
 8004cd2:	607a      	str	r2, [r7, #4]
 8004cd4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d10a      	bne.n	8004cfa <xQueueGenericSend+0x32>
	__asm volatile
 8004ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ce8:	f383 8811 	msr	BASEPRI, r3
 8004cec:	f3bf 8f6f 	isb	sy
 8004cf0:	f3bf 8f4f 	dsb	sy
 8004cf4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004cf6:	bf00      	nop
 8004cf8:	e7fe      	b.n	8004cf8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d103      	bne.n	8004d08 <xQueueGenericSend+0x40>
 8004d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d101      	bne.n	8004d0c <xQueueGenericSend+0x44>
 8004d08:	2301      	movs	r3, #1
 8004d0a:	e000      	b.n	8004d0e <xQueueGenericSend+0x46>
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d10a      	bne.n	8004d28 <xQueueGenericSend+0x60>
	__asm volatile
 8004d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d16:	f383 8811 	msr	BASEPRI, r3
 8004d1a:	f3bf 8f6f 	isb	sy
 8004d1e:	f3bf 8f4f 	dsb	sy
 8004d22:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004d24:	bf00      	nop
 8004d26:	e7fe      	b.n	8004d26 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	2b02      	cmp	r3, #2
 8004d2c:	d103      	bne.n	8004d36 <xQueueGenericSend+0x6e>
 8004d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d32:	2b01      	cmp	r3, #1
 8004d34:	d101      	bne.n	8004d3a <xQueueGenericSend+0x72>
 8004d36:	2301      	movs	r3, #1
 8004d38:	e000      	b.n	8004d3c <xQueueGenericSend+0x74>
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d10a      	bne.n	8004d56 <xQueueGenericSend+0x8e>
	__asm volatile
 8004d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d44:	f383 8811 	msr	BASEPRI, r3
 8004d48:	f3bf 8f6f 	isb	sy
 8004d4c:	f3bf 8f4f 	dsb	sy
 8004d50:	623b      	str	r3, [r7, #32]
}
 8004d52:	bf00      	nop
 8004d54:	e7fe      	b.n	8004d54 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004d56:	f001 fa2f 	bl	80061b8 <xTaskGetSchedulerState>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d102      	bne.n	8004d66 <xQueueGenericSend+0x9e>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d101      	bne.n	8004d6a <xQueueGenericSend+0xa2>
 8004d66:	2301      	movs	r3, #1
 8004d68:	e000      	b.n	8004d6c <xQueueGenericSend+0xa4>
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d10a      	bne.n	8004d86 <xQueueGenericSend+0xbe>
	__asm volatile
 8004d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d74:	f383 8811 	msr	BASEPRI, r3
 8004d78:	f3bf 8f6f 	isb	sy
 8004d7c:	f3bf 8f4f 	dsb	sy
 8004d80:	61fb      	str	r3, [r7, #28]
}
 8004d82:	bf00      	nop
 8004d84:	e7fe      	b.n	8004d84 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004d86:	f001 ff75 	bl	8006c74 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d92:	429a      	cmp	r2, r3
 8004d94:	d302      	bcc.n	8004d9c <xQueueGenericSend+0xd4>
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	2b02      	cmp	r3, #2
 8004d9a:	d129      	bne.n	8004df0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004d9c:	683a      	ldr	r2, [r7, #0]
 8004d9e:	68b9      	ldr	r1, [r7, #8]
 8004da0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004da2:	f000 fa0b 	bl	80051bc <prvCopyDataToQueue>
 8004da6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d010      	beq.n	8004dd2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004db2:	3324      	adds	r3, #36	; 0x24
 8004db4:	4618      	mov	r0, r3
 8004db6:	f001 f83d 	bl	8005e34 <xTaskRemoveFromEventList>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d013      	beq.n	8004de8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004dc0:	4b3f      	ldr	r3, [pc, #252]	; (8004ec0 <xQueueGenericSend+0x1f8>)
 8004dc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004dc6:	601a      	str	r2, [r3, #0]
 8004dc8:	f3bf 8f4f 	dsb	sy
 8004dcc:	f3bf 8f6f 	isb	sy
 8004dd0:	e00a      	b.n	8004de8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d007      	beq.n	8004de8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004dd8:	4b39      	ldr	r3, [pc, #228]	; (8004ec0 <xQueueGenericSend+0x1f8>)
 8004dda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004dde:	601a      	str	r2, [r3, #0]
 8004de0:	f3bf 8f4f 	dsb	sy
 8004de4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004de8:	f001 ff74 	bl	8006cd4 <vPortExitCritical>
				return pdPASS;
 8004dec:	2301      	movs	r3, #1
 8004dee:	e063      	b.n	8004eb8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d103      	bne.n	8004dfe <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004df6:	f001 ff6d 	bl	8006cd4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	e05c      	b.n	8004eb8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004dfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d106      	bne.n	8004e12 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004e04:	f107 0314 	add.w	r3, r7, #20
 8004e08:	4618      	mov	r0, r3
 8004e0a:	f001 f877 	bl	8005efc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004e12:	f001 ff5f 	bl	8006cd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004e16:	f000 fdc7 	bl	80059a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004e1a:	f001 ff2b 	bl	8006c74 <vPortEnterCritical>
 8004e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e20:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004e24:	b25b      	sxtb	r3, r3
 8004e26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e2a:	d103      	bne.n	8004e34 <xQueueGenericSend+0x16c>
 8004e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e2e:	2200      	movs	r2, #0
 8004e30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e36:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e3a:	b25b      	sxtb	r3, r3
 8004e3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e40:	d103      	bne.n	8004e4a <xQueueGenericSend+0x182>
 8004e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e44:	2200      	movs	r2, #0
 8004e46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e4a:	f001 ff43 	bl	8006cd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004e4e:	1d3a      	adds	r2, r7, #4
 8004e50:	f107 0314 	add.w	r3, r7, #20
 8004e54:	4611      	mov	r1, r2
 8004e56:	4618      	mov	r0, r3
 8004e58:	f001 f866 	bl	8005f28 <xTaskCheckForTimeOut>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d124      	bne.n	8004eac <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004e62:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e64:	f000 faa2 	bl	80053ac <prvIsQueueFull>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d018      	beq.n	8004ea0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e70:	3310      	adds	r3, #16
 8004e72:	687a      	ldr	r2, [r7, #4]
 8004e74:	4611      	mov	r1, r2
 8004e76:	4618      	mov	r0, r3
 8004e78:	f000 ff8c 	bl	8005d94 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004e7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e7e:	f000 fa2d 	bl	80052dc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004e82:	f000 fd9f 	bl	80059c4 <xTaskResumeAll>
 8004e86:	4603      	mov	r3, r0
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	f47f af7c 	bne.w	8004d86 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004e8e:	4b0c      	ldr	r3, [pc, #48]	; (8004ec0 <xQueueGenericSend+0x1f8>)
 8004e90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e94:	601a      	str	r2, [r3, #0]
 8004e96:	f3bf 8f4f 	dsb	sy
 8004e9a:	f3bf 8f6f 	isb	sy
 8004e9e:	e772      	b.n	8004d86 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004ea0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004ea2:	f000 fa1b 	bl	80052dc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004ea6:	f000 fd8d 	bl	80059c4 <xTaskResumeAll>
 8004eaa:	e76c      	b.n	8004d86 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004eac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004eae:	f000 fa15 	bl	80052dc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004eb2:	f000 fd87 	bl	80059c4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004eb6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	3738      	adds	r7, #56	; 0x38
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd80      	pop	{r7, pc}
 8004ec0:	e000ed04 	.word	0xe000ed04

08004ec4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b090      	sub	sp, #64	; 0x40
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	60f8      	str	r0, [r7, #12]
 8004ecc:	60b9      	str	r1, [r7, #8]
 8004ece:	607a      	str	r2, [r7, #4]
 8004ed0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d10a      	bne.n	8004ef2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ee0:	f383 8811 	msr	BASEPRI, r3
 8004ee4:	f3bf 8f6f 	isb	sy
 8004ee8:	f3bf 8f4f 	dsb	sy
 8004eec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004eee:	bf00      	nop
 8004ef0:	e7fe      	b.n	8004ef0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d103      	bne.n	8004f00 <xQueueGenericSendFromISR+0x3c>
 8004ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d101      	bne.n	8004f04 <xQueueGenericSendFromISR+0x40>
 8004f00:	2301      	movs	r3, #1
 8004f02:	e000      	b.n	8004f06 <xQueueGenericSendFromISR+0x42>
 8004f04:	2300      	movs	r3, #0
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d10a      	bne.n	8004f20 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f0e:	f383 8811 	msr	BASEPRI, r3
 8004f12:	f3bf 8f6f 	isb	sy
 8004f16:	f3bf 8f4f 	dsb	sy
 8004f1a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004f1c:	bf00      	nop
 8004f1e:	e7fe      	b.n	8004f1e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	2b02      	cmp	r3, #2
 8004f24:	d103      	bne.n	8004f2e <xQueueGenericSendFromISR+0x6a>
 8004f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f2a:	2b01      	cmp	r3, #1
 8004f2c:	d101      	bne.n	8004f32 <xQueueGenericSendFromISR+0x6e>
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e000      	b.n	8004f34 <xQueueGenericSendFromISR+0x70>
 8004f32:	2300      	movs	r3, #0
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d10a      	bne.n	8004f4e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f3c:	f383 8811 	msr	BASEPRI, r3
 8004f40:	f3bf 8f6f 	isb	sy
 8004f44:	f3bf 8f4f 	dsb	sy
 8004f48:	623b      	str	r3, [r7, #32]
}
 8004f4a:	bf00      	nop
 8004f4c:	e7fe      	b.n	8004f4c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004f4e:	f001 ff73 	bl	8006e38 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004f52:	f3ef 8211 	mrs	r2, BASEPRI
 8004f56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f5a:	f383 8811 	msr	BASEPRI, r3
 8004f5e:	f3bf 8f6f 	isb	sy
 8004f62:	f3bf 8f4f 	dsb	sy
 8004f66:	61fa      	str	r2, [r7, #28]
 8004f68:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004f6a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004f6c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004f6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f76:	429a      	cmp	r2, r3
 8004f78:	d302      	bcc.n	8004f80 <xQueueGenericSendFromISR+0xbc>
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	2b02      	cmp	r3, #2
 8004f7e:	d12f      	bne.n	8004fe0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f82:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004f8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004f90:	683a      	ldr	r2, [r7, #0]
 8004f92:	68b9      	ldr	r1, [r7, #8]
 8004f94:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004f96:	f000 f911 	bl	80051bc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004f9a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004f9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004fa2:	d112      	bne.n	8004fca <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d016      	beq.n	8004fda <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004fac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fae:	3324      	adds	r3, #36	; 0x24
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	f000 ff3f 	bl	8005e34 <xTaskRemoveFromEventList>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d00e      	beq.n	8004fda <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d00b      	beq.n	8004fda <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2201      	movs	r2, #1
 8004fc6:	601a      	str	r2, [r3, #0]
 8004fc8:	e007      	b.n	8004fda <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004fca:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004fce:	3301      	adds	r3, #1
 8004fd0:	b2db      	uxtb	r3, r3
 8004fd2:	b25a      	sxtb	r2, r3
 8004fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004fde:	e001      	b.n	8004fe4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fe4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fe6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004fee:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004ff0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	3740      	adds	r7, #64	; 0x40
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}
	...

08004ffc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b08c      	sub	sp, #48	; 0x30
 8005000:	af00      	add	r7, sp, #0
 8005002:	60f8      	str	r0, [r7, #12]
 8005004:	60b9      	str	r1, [r7, #8]
 8005006:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005008:	2300      	movs	r3, #0
 800500a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005012:	2b00      	cmp	r3, #0
 8005014:	d10a      	bne.n	800502c <xQueueReceive+0x30>
	__asm volatile
 8005016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800501a:	f383 8811 	msr	BASEPRI, r3
 800501e:	f3bf 8f6f 	isb	sy
 8005022:	f3bf 8f4f 	dsb	sy
 8005026:	623b      	str	r3, [r7, #32]
}
 8005028:	bf00      	nop
 800502a:	e7fe      	b.n	800502a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d103      	bne.n	800503a <xQueueReceive+0x3e>
 8005032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005036:	2b00      	cmp	r3, #0
 8005038:	d101      	bne.n	800503e <xQueueReceive+0x42>
 800503a:	2301      	movs	r3, #1
 800503c:	e000      	b.n	8005040 <xQueueReceive+0x44>
 800503e:	2300      	movs	r3, #0
 8005040:	2b00      	cmp	r3, #0
 8005042:	d10a      	bne.n	800505a <xQueueReceive+0x5e>
	__asm volatile
 8005044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005048:	f383 8811 	msr	BASEPRI, r3
 800504c:	f3bf 8f6f 	isb	sy
 8005050:	f3bf 8f4f 	dsb	sy
 8005054:	61fb      	str	r3, [r7, #28]
}
 8005056:	bf00      	nop
 8005058:	e7fe      	b.n	8005058 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800505a:	f001 f8ad 	bl	80061b8 <xTaskGetSchedulerState>
 800505e:	4603      	mov	r3, r0
 8005060:	2b00      	cmp	r3, #0
 8005062:	d102      	bne.n	800506a <xQueueReceive+0x6e>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d101      	bne.n	800506e <xQueueReceive+0x72>
 800506a:	2301      	movs	r3, #1
 800506c:	e000      	b.n	8005070 <xQueueReceive+0x74>
 800506e:	2300      	movs	r3, #0
 8005070:	2b00      	cmp	r3, #0
 8005072:	d10a      	bne.n	800508a <xQueueReceive+0x8e>
	__asm volatile
 8005074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005078:	f383 8811 	msr	BASEPRI, r3
 800507c:	f3bf 8f6f 	isb	sy
 8005080:	f3bf 8f4f 	dsb	sy
 8005084:	61bb      	str	r3, [r7, #24]
}
 8005086:	bf00      	nop
 8005088:	e7fe      	b.n	8005088 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800508a:	f001 fdf3 	bl	8006c74 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800508e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005092:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005096:	2b00      	cmp	r3, #0
 8005098:	d01f      	beq.n	80050da <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800509a:	68b9      	ldr	r1, [r7, #8]
 800509c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800509e:	f000 f8f7 	bl	8005290 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80050a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a4:	1e5a      	subs	r2, r3, #1
 80050a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050a8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80050aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ac:	691b      	ldr	r3, [r3, #16]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d00f      	beq.n	80050d2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80050b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050b4:	3310      	adds	r3, #16
 80050b6:	4618      	mov	r0, r3
 80050b8:	f000 febc 	bl	8005e34 <xTaskRemoveFromEventList>
 80050bc:	4603      	mov	r3, r0
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d007      	beq.n	80050d2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80050c2:	4b3d      	ldr	r3, [pc, #244]	; (80051b8 <xQueueReceive+0x1bc>)
 80050c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050c8:	601a      	str	r2, [r3, #0]
 80050ca:	f3bf 8f4f 	dsb	sy
 80050ce:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80050d2:	f001 fdff 	bl	8006cd4 <vPortExitCritical>
				return pdPASS;
 80050d6:	2301      	movs	r3, #1
 80050d8:	e069      	b.n	80051ae <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d103      	bne.n	80050e8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80050e0:	f001 fdf8 	bl	8006cd4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80050e4:	2300      	movs	r3, #0
 80050e6:	e062      	b.n	80051ae <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80050e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d106      	bne.n	80050fc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80050ee:	f107 0310 	add.w	r3, r7, #16
 80050f2:	4618      	mov	r0, r3
 80050f4:	f000 ff02 	bl	8005efc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80050f8:	2301      	movs	r3, #1
 80050fa:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80050fc:	f001 fdea 	bl	8006cd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005100:	f000 fc52 	bl	80059a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005104:	f001 fdb6 	bl	8006c74 <vPortEnterCritical>
 8005108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800510a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800510e:	b25b      	sxtb	r3, r3
 8005110:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005114:	d103      	bne.n	800511e <xQueueReceive+0x122>
 8005116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005118:	2200      	movs	r2, #0
 800511a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800511e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005120:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005124:	b25b      	sxtb	r3, r3
 8005126:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800512a:	d103      	bne.n	8005134 <xQueueReceive+0x138>
 800512c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800512e:	2200      	movs	r2, #0
 8005130:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005134:	f001 fdce 	bl	8006cd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005138:	1d3a      	adds	r2, r7, #4
 800513a:	f107 0310 	add.w	r3, r7, #16
 800513e:	4611      	mov	r1, r2
 8005140:	4618      	mov	r0, r3
 8005142:	f000 fef1 	bl	8005f28 <xTaskCheckForTimeOut>
 8005146:	4603      	mov	r3, r0
 8005148:	2b00      	cmp	r3, #0
 800514a:	d123      	bne.n	8005194 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800514c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800514e:	f000 f917 	bl	8005380 <prvIsQueueEmpty>
 8005152:	4603      	mov	r3, r0
 8005154:	2b00      	cmp	r3, #0
 8005156:	d017      	beq.n	8005188 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800515a:	3324      	adds	r3, #36	; 0x24
 800515c:	687a      	ldr	r2, [r7, #4]
 800515e:	4611      	mov	r1, r2
 8005160:	4618      	mov	r0, r3
 8005162:	f000 fe17 	bl	8005d94 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005166:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005168:	f000 f8b8 	bl	80052dc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800516c:	f000 fc2a 	bl	80059c4 <xTaskResumeAll>
 8005170:	4603      	mov	r3, r0
 8005172:	2b00      	cmp	r3, #0
 8005174:	d189      	bne.n	800508a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005176:	4b10      	ldr	r3, [pc, #64]	; (80051b8 <xQueueReceive+0x1bc>)
 8005178:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800517c:	601a      	str	r2, [r3, #0]
 800517e:	f3bf 8f4f 	dsb	sy
 8005182:	f3bf 8f6f 	isb	sy
 8005186:	e780      	b.n	800508a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005188:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800518a:	f000 f8a7 	bl	80052dc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800518e:	f000 fc19 	bl	80059c4 <xTaskResumeAll>
 8005192:	e77a      	b.n	800508a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005194:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005196:	f000 f8a1 	bl	80052dc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800519a:	f000 fc13 	bl	80059c4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800519e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80051a0:	f000 f8ee 	bl	8005380 <prvIsQueueEmpty>
 80051a4:	4603      	mov	r3, r0
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	f43f af6f 	beq.w	800508a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80051ac:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80051ae:	4618      	mov	r0, r3
 80051b0:	3730      	adds	r7, #48	; 0x30
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}
 80051b6:	bf00      	nop
 80051b8:	e000ed04 	.word	0xe000ed04

080051bc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b086      	sub	sp, #24
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	60f8      	str	r0, [r7, #12]
 80051c4:	60b9      	str	r1, [r7, #8]
 80051c6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80051c8:	2300      	movs	r3, #0
 80051ca:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051d0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d10d      	bne.n	80051f6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d14d      	bne.n	800527e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	689b      	ldr	r3, [r3, #8]
 80051e6:	4618      	mov	r0, r3
 80051e8:	f001 f804 	bl	80061f4 <xTaskPriorityDisinherit>
 80051ec:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	2200      	movs	r2, #0
 80051f2:	609a      	str	r2, [r3, #8]
 80051f4:	e043      	b.n	800527e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d119      	bne.n	8005230 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	6858      	ldr	r0, [r3, #4]
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005204:	461a      	mov	r2, r3
 8005206:	68b9      	ldr	r1, [r7, #8]
 8005208:	f002 f8c4 	bl	8007394 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	685a      	ldr	r2, [r3, #4]
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005214:	441a      	add	r2, r3
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	685a      	ldr	r2, [r3, #4]
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	689b      	ldr	r3, [r3, #8]
 8005222:	429a      	cmp	r2, r3
 8005224:	d32b      	bcc.n	800527e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681a      	ldr	r2, [r3, #0]
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	605a      	str	r2, [r3, #4]
 800522e:	e026      	b.n	800527e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	68d8      	ldr	r0, [r3, #12]
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005238:	461a      	mov	r2, r3
 800523a:	68b9      	ldr	r1, [r7, #8]
 800523c:	f002 f8aa 	bl	8007394 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	68da      	ldr	r2, [r3, #12]
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005248:	425b      	negs	r3, r3
 800524a:	441a      	add	r2, r3
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	68da      	ldr	r2, [r3, #12]
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	429a      	cmp	r2, r3
 800525a:	d207      	bcs.n	800526c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	689a      	ldr	r2, [r3, #8]
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005264:	425b      	negs	r3, r3
 8005266:	441a      	add	r2, r3
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2b02      	cmp	r3, #2
 8005270:	d105      	bne.n	800527e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d002      	beq.n	800527e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005278:	693b      	ldr	r3, [r7, #16]
 800527a:	3b01      	subs	r3, #1
 800527c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	1c5a      	adds	r2, r3, #1
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005286:	697b      	ldr	r3, [r7, #20]
}
 8005288:	4618      	mov	r0, r3
 800528a:	3718      	adds	r7, #24
 800528c:	46bd      	mov	sp, r7
 800528e:	bd80      	pop	{r7, pc}

08005290 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b082      	sub	sp, #8
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
 8005298:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d018      	beq.n	80052d4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	68da      	ldr	r2, [r3, #12]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052aa:	441a      	add	r2, r3
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	68da      	ldr	r2, [r3, #12]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	689b      	ldr	r3, [r3, #8]
 80052b8:	429a      	cmp	r2, r3
 80052ba:	d303      	bcc.n	80052c4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681a      	ldr	r2, [r3, #0]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	68d9      	ldr	r1, [r3, #12]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052cc:	461a      	mov	r2, r3
 80052ce:	6838      	ldr	r0, [r7, #0]
 80052d0:	f002 f860 	bl	8007394 <memcpy>
	}
}
 80052d4:	bf00      	nop
 80052d6:	3708      	adds	r7, #8
 80052d8:	46bd      	mov	sp, r7
 80052da:	bd80      	pop	{r7, pc}

080052dc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b084      	sub	sp, #16
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80052e4:	f001 fcc6 	bl	8006c74 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80052ee:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80052f0:	e011      	b.n	8005316 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d012      	beq.n	8005320 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	3324      	adds	r3, #36	; 0x24
 80052fe:	4618      	mov	r0, r3
 8005300:	f000 fd98 	bl	8005e34 <xTaskRemoveFromEventList>
 8005304:	4603      	mov	r3, r0
 8005306:	2b00      	cmp	r3, #0
 8005308:	d001      	beq.n	800530e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800530a:	f000 fe6f 	bl	8005fec <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800530e:	7bfb      	ldrb	r3, [r7, #15]
 8005310:	3b01      	subs	r3, #1
 8005312:	b2db      	uxtb	r3, r3
 8005314:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005316:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800531a:	2b00      	cmp	r3, #0
 800531c:	dce9      	bgt.n	80052f2 <prvUnlockQueue+0x16>
 800531e:	e000      	b.n	8005322 <prvUnlockQueue+0x46>
					break;
 8005320:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	22ff      	movs	r2, #255	; 0xff
 8005326:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800532a:	f001 fcd3 	bl	8006cd4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800532e:	f001 fca1 	bl	8006c74 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005338:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800533a:	e011      	b.n	8005360 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	691b      	ldr	r3, [r3, #16]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d012      	beq.n	800536a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	3310      	adds	r3, #16
 8005348:	4618      	mov	r0, r3
 800534a:	f000 fd73 	bl	8005e34 <xTaskRemoveFromEventList>
 800534e:	4603      	mov	r3, r0
 8005350:	2b00      	cmp	r3, #0
 8005352:	d001      	beq.n	8005358 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005354:	f000 fe4a 	bl	8005fec <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005358:	7bbb      	ldrb	r3, [r7, #14]
 800535a:	3b01      	subs	r3, #1
 800535c:	b2db      	uxtb	r3, r3
 800535e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005360:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005364:	2b00      	cmp	r3, #0
 8005366:	dce9      	bgt.n	800533c <prvUnlockQueue+0x60>
 8005368:	e000      	b.n	800536c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800536a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	22ff      	movs	r2, #255	; 0xff
 8005370:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005374:	f001 fcae 	bl	8006cd4 <vPortExitCritical>
}
 8005378:	bf00      	nop
 800537a:	3710      	adds	r7, #16
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}

08005380 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b084      	sub	sp, #16
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005388:	f001 fc74 	bl	8006c74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005390:	2b00      	cmp	r3, #0
 8005392:	d102      	bne.n	800539a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005394:	2301      	movs	r3, #1
 8005396:	60fb      	str	r3, [r7, #12]
 8005398:	e001      	b.n	800539e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800539a:	2300      	movs	r3, #0
 800539c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800539e:	f001 fc99 	bl	8006cd4 <vPortExitCritical>

	return xReturn;
 80053a2:	68fb      	ldr	r3, [r7, #12]
}
 80053a4:	4618      	mov	r0, r3
 80053a6:	3710      	adds	r7, #16
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bd80      	pop	{r7, pc}

080053ac <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b084      	sub	sp, #16
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80053b4:	f001 fc5e 	bl	8006c74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053c0:	429a      	cmp	r2, r3
 80053c2:	d102      	bne.n	80053ca <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80053c4:	2301      	movs	r3, #1
 80053c6:	60fb      	str	r3, [r7, #12]
 80053c8:	e001      	b.n	80053ce <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80053ca:	2300      	movs	r3, #0
 80053cc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80053ce:	f001 fc81 	bl	8006cd4 <vPortExitCritical>

	return xReturn;
 80053d2:	68fb      	ldr	r3, [r7, #12]
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	3710      	adds	r7, #16
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}

080053dc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80053dc:	b480      	push	{r7}
 80053de:	b085      	sub	sp, #20
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
 80053e4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80053e6:	2300      	movs	r3, #0
 80053e8:	60fb      	str	r3, [r7, #12]
 80053ea:	e014      	b.n	8005416 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80053ec:	4a0f      	ldr	r2, [pc, #60]	; (800542c <vQueueAddToRegistry+0x50>)
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d10b      	bne.n	8005410 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80053f8:	490c      	ldr	r1, [pc, #48]	; (800542c <vQueueAddToRegistry+0x50>)
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	683a      	ldr	r2, [r7, #0]
 80053fe:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005402:	4a0a      	ldr	r2, [pc, #40]	; (800542c <vQueueAddToRegistry+0x50>)
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	00db      	lsls	r3, r3, #3
 8005408:	4413      	add	r3, r2
 800540a:	687a      	ldr	r2, [r7, #4]
 800540c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800540e:	e006      	b.n	800541e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	3301      	adds	r3, #1
 8005414:	60fb      	str	r3, [r7, #12]
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	2b07      	cmp	r3, #7
 800541a:	d9e7      	bls.n	80053ec <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800541c:	bf00      	nop
 800541e:	bf00      	nop
 8005420:	3714      	adds	r7, #20
 8005422:	46bd      	mov	sp, r7
 8005424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005428:	4770      	bx	lr
 800542a:	bf00      	nop
 800542c:	2000147c 	.word	0x2000147c

08005430 <pcQueueGetName>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	const char *pcQueueGetName( QueueHandle_t xQueue ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005430:	b480      	push	{r7}
 8005432:	b085      	sub	sp, #20
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;
	const char *pcReturn = NULL; /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
 8005438:	2300      	movs	r3, #0
 800543a:	60bb      	str	r3, [r7, #8]

		/* Note there is nothing here to protect against another task adding or
		removing entries from the registry while it is being searched. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800543c:	2300      	movs	r3, #0
 800543e:	60fb      	str	r3, [r7, #12]
 8005440:	e010      	b.n	8005464 <pcQueueGetName+0x34>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8005442:	4a0d      	ldr	r2, [pc, #52]	; (8005478 <pcQueueGetName+0x48>)
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	00db      	lsls	r3, r3, #3
 8005448:	4413      	add	r3, r2
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	687a      	ldr	r2, [r7, #4]
 800544e:	429a      	cmp	r2, r3
 8005450:	d105      	bne.n	800545e <pcQueueGetName+0x2e>
			{
				pcReturn = xQueueRegistry[ ux ].pcQueueName;
 8005452:	4a09      	ldr	r2, [pc, #36]	; (8005478 <pcQueueGetName+0x48>)
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800545a:	60bb      	str	r3, [r7, #8]
				break;
 800545c:	e005      	b.n	800546a <pcQueueGetName+0x3a>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	3301      	adds	r3, #1
 8005462:	60fb      	str	r3, [r7, #12]
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2b07      	cmp	r3, #7
 8005468:	d9eb      	bls.n	8005442 <pcQueueGetName+0x12>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		return pcReturn;
 800546a:	68bb      	ldr	r3, [r7, #8]
	} /*lint !e818 xQueue cannot be a pointer to const because it is a typedef. */
 800546c:	4618      	mov	r0, r3
 800546e:	3714      	adds	r7, #20
 8005470:	46bd      	mov	sp, r7
 8005472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005476:	4770      	bx	lr
 8005478:	2000147c 	.word	0x2000147c

0800547c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800547c:	b580      	push	{r7, lr}
 800547e:	b086      	sub	sp, #24
 8005480:	af00      	add	r7, sp, #0
 8005482:	60f8      	str	r0, [r7, #12]
 8005484:	60b9      	str	r1, [r7, #8]
 8005486:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800548c:	f001 fbf2 	bl	8006c74 <vPortEnterCritical>
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005496:	b25b      	sxtb	r3, r3
 8005498:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800549c:	d103      	bne.n	80054a6 <vQueueWaitForMessageRestricted+0x2a>
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	2200      	movs	r2, #0
 80054a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80054ac:	b25b      	sxtb	r3, r3
 80054ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80054b2:	d103      	bne.n	80054bc <vQueueWaitForMessageRestricted+0x40>
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	2200      	movs	r2, #0
 80054b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80054bc:	f001 fc0a 	bl	8006cd4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d106      	bne.n	80054d6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80054c8:	697b      	ldr	r3, [r7, #20]
 80054ca:	3324      	adds	r3, #36	; 0x24
 80054cc:	687a      	ldr	r2, [r7, #4]
 80054ce:	68b9      	ldr	r1, [r7, #8]
 80054d0:	4618      	mov	r0, r3
 80054d2:	f000 fc83 	bl	8005ddc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80054d6:	6978      	ldr	r0, [r7, #20]
 80054d8:	f7ff ff00 	bl	80052dc <prvUnlockQueue>
	}
 80054dc:	bf00      	nop
 80054de:	3718      	adds	r7, #24
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}

080054e4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b08e      	sub	sp, #56	; 0x38
 80054e8:	af04      	add	r7, sp, #16
 80054ea:	60f8      	str	r0, [r7, #12]
 80054ec:	60b9      	str	r1, [r7, #8]
 80054ee:	607a      	str	r2, [r7, #4]
 80054f0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80054f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d10a      	bne.n	800550e <xTaskCreateStatic+0x2a>
	__asm volatile
 80054f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054fc:	f383 8811 	msr	BASEPRI, r3
 8005500:	f3bf 8f6f 	isb	sy
 8005504:	f3bf 8f4f 	dsb	sy
 8005508:	623b      	str	r3, [r7, #32]
}
 800550a:	bf00      	nop
 800550c:	e7fe      	b.n	800550c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800550e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005510:	2b00      	cmp	r3, #0
 8005512:	d10a      	bne.n	800552a <xTaskCreateStatic+0x46>
	__asm volatile
 8005514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005518:	f383 8811 	msr	BASEPRI, r3
 800551c:	f3bf 8f6f 	isb	sy
 8005520:	f3bf 8f4f 	dsb	sy
 8005524:	61fb      	str	r3, [r7, #28]
}
 8005526:	bf00      	nop
 8005528:	e7fe      	b.n	8005528 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800552a:	23ac      	movs	r3, #172	; 0xac
 800552c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	2bac      	cmp	r3, #172	; 0xac
 8005532:	d00a      	beq.n	800554a <xTaskCreateStatic+0x66>
	__asm volatile
 8005534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005538:	f383 8811 	msr	BASEPRI, r3
 800553c:	f3bf 8f6f 	isb	sy
 8005540:	f3bf 8f4f 	dsb	sy
 8005544:	61bb      	str	r3, [r7, #24]
}
 8005546:	bf00      	nop
 8005548:	e7fe      	b.n	8005548 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800554a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800554c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800554e:	2b00      	cmp	r3, #0
 8005550:	d01e      	beq.n	8005590 <xTaskCreateStatic+0xac>
 8005552:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005554:	2b00      	cmp	r3, #0
 8005556:	d01b      	beq.n	8005590 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800555a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800555c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800555e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005560:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005564:	2202      	movs	r2, #2
 8005566:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800556a:	2300      	movs	r3, #0
 800556c:	9303      	str	r3, [sp, #12]
 800556e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005570:	9302      	str	r3, [sp, #8]
 8005572:	f107 0314 	add.w	r3, r7, #20
 8005576:	9301      	str	r3, [sp, #4]
 8005578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800557a:	9300      	str	r3, [sp, #0]
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	687a      	ldr	r2, [r7, #4]
 8005580:	68b9      	ldr	r1, [r7, #8]
 8005582:	68f8      	ldr	r0, [r7, #12]
 8005584:	f000 f850 	bl	8005628 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005588:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800558a:	f000 f8f7 	bl	800577c <prvAddNewTaskToReadyList>
 800558e:	e001      	b.n	8005594 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005590:	2300      	movs	r3, #0
 8005592:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005594:	697b      	ldr	r3, [r7, #20]
	}
 8005596:	4618      	mov	r0, r3
 8005598:	3728      	adds	r7, #40	; 0x28
 800559a:	46bd      	mov	sp, r7
 800559c:	bd80      	pop	{r7, pc}

0800559e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800559e:	b580      	push	{r7, lr}
 80055a0:	b08c      	sub	sp, #48	; 0x30
 80055a2:	af04      	add	r7, sp, #16
 80055a4:	60f8      	str	r0, [r7, #12]
 80055a6:	60b9      	str	r1, [r7, #8]
 80055a8:	603b      	str	r3, [r7, #0]
 80055aa:	4613      	mov	r3, r2
 80055ac:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80055ae:	88fb      	ldrh	r3, [r7, #6]
 80055b0:	009b      	lsls	r3, r3, #2
 80055b2:	4618      	mov	r0, r3
 80055b4:	f001 fc80 	bl	8006eb8 <pvPortMalloc>
 80055b8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d00e      	beq.n	80055de <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80055c0:	20ac      	movs	r0, #172	; 0xac
 80055c2:	f001 fc79 	bl	8006eb8 <pvPortMalloc>
 80055c6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80055c8:	69fb      	ldr	r3, [r7, #28]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d003      	beq.n	80055d6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80055ce:	69fb      	ldr	r3, [r7, #28]
 80055d0:	697a      	ldr	r2, [r7, #20]
 80055d2:	631a      	str	r2, [r3, #48]	; 0x30
 80055d4:	e005      	b.n	80055e2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80055d6:	6978      	ldr	r0, [r7, #20]
 80055d8:	f001 fd3a 	bl	8007050 <vPortFree>
 80055dc:	e001      	b.n	80055e2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80055de:	2300      	movs	r3, #0
 80055e0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80055e2:	69fb      	ldr	r3, [r7, #28]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d017      	beq.n	8005618 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80055e8:	69fb      	ldr	r3, [r7, #28]
 80055ea:	2200      	movs	r2, #0
 80055ec:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80055f0:	88fa      	ldrh	r2, [r7, #6]
 80055f2:	2300      	movs	r3, #0
 80055f4:	9303      	str	r3, [sp, #12]
 80055f6:	69fb      	ldr	r3, [r7, #28]
 80055f8:	9302      	str	r3, [sp, #8]
 80055fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055fc:	9301      	str	r3, [sp, #4]
 80055fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005600:	9300      	str	r3, [sp, #0]
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	68b9      	ldr	r1, [r7, #8]
 8005606:	68f8      	ldr	r0, [r7, #12]
 8005608:	f000 f80e 	bl	8005628 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800560c:	69f8      	ldr	r0, [r7, #28]
 800560e:	f000 f8b5 	bl	800577c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005612:	2301      	movs	r3, #1
 8005614:	61bb      	str	r3, [r7, #24]
 8005616:	e002      	b.n	800561e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005618:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800561c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800561e:	69bb      	ldr	r3, [r7, #24]
	}
 8005620:	4618      	mov	r0, r3
 8005622:	3720      	adds	r7, #32
 8005624:	46bd      	mov	sp, r7
 8005626:	bd80      	pop	{r7, pc}

08005628 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b088      	sub	sp, #32
 800562c:	af00      	add	r7, sp, #0
 800562e:	60f8      	str	r0, [r7, #12]
 8005630:	60b9      	str	r1, [r7, #8]
 8005632:	607a      	str	r2, [r7, #4]
 8005634:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005638:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	009b      	lsls	r3, r3, #2
 800563e:	461a      	mov	r2, r3
 8005640:	21a5      	movs	r1, #165	; 0xa5
 8005642:	f001 fe23 	bl	800728c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005648:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005650:	3b01      	subs	r3, #1
 8005652:	009b      	lsls	r3, r3, #2
 8005654:	4413      	add	r3, r2
 8005656:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005658:	69bb      	ldr	r3, [r7, #24]
 800565a:	f023 0307 	bic.w	r3, r3, #7
 800565e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005660:	69bb      	ldr	r3, [r7, #24]
 8005662:	f003 0307 	and.w	r3, r3, #7
 8005666:	2b00      	cmp	r3, #0
 8005668:	d00a      	beq.n	8005680 <prvInitialiseNewTask+0x58>
	__asm volatile
 800566a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800566e:	f383 8811 	msr	BASEPRI, r3
 8005672:	f3bf 8f6f 	isb	sy
 8005676:	f3bf 8f4f 	dsb	sy
 800567a:	617b      	str	r3, [r7, #20]
}
 800567c:	bf00      	nop
 800567e:	e7fe      	b.n	800567e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d01f      	beq.n	80056c6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005686:	2300      	movs	r3, #0
 8005688:	61fb      	str	r3, [r7, #28]
 800568a:	e012      	b.n	80056b2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800568c:	68ba      	ldr	r2, [r7, #8]
 800568e:	69fb      	ldr	r3, [r7, #28]
 8005690:	4413      	add	r3, r2
 8005692:	7819      	ldrb	r1, [r3, #0]
 8005694:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005696:	69fb      	ldr	r3, [r7, #28]
 8005698:	4413      	add	r3, r2
 800569a:	3334      	adds	r3, #52	; 0x34
 800569c:	460a      	mov	r2, r1
 800569e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80056a0:	68ba      	ldr	r2, [r7, #8]
 80056a2:	69fb      	ldr	r3, [r7, #28]
 80056a4:	4413      	add	r3, r2
 80056a6:	781b      	ldrb	r3, [r3, #0]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d006      	beq.n	80056ba <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80056ac:	69fb      	ldr	r3, [r7, #28]
 80056ae:	3301      	adds	r3, #1
 80056b0:	61fb      	str	r3, [r7, #28]
 80056b2:	69fb      	ldr	r3, [r7, #28]
 80056b4:	2b0f      	cmp	r3, #15
 80056b6:	d9e9      	bls.n	800568c <prvInitialiseNewTask+0x64>
 80056b8:	e000      	b.n	80056bc <prvInitialiseNewTask+0x94>
			{
				break;
 80056ba:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80056bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056be:	2200      	movs	r2, #0
 80056c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80056c4:	e003      	b.n	80056ce <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80056c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056c8:	2200      	movs	r2, #0
 80056ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80056ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056d0:	2b37      	cmp	r3, #55	; 0x37
 80056d2:	d901      	bls.n	80056d8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80056d4:	2337      	movs	r3, #55	; 0x37
 80056d6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80056d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80056dc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80056de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80056e2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80056e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056e6:	2200      	movs	r2, #0
 80056e8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80056ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ec:	3304      	adds	r3, #4
 80056ee:	4618      	mov	r0, r3
 80056f0:	f7ff f918 	bl	8004924 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80056f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056f6:	3318      	adds	r3, #24
 80056f8:	4618      	mov	r0, r3
 80056fa:	f7ff f913 	bl	8004924 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80056fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005700:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005702:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005706:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800570a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800570c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800570e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005710:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005712:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8005714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005716:	2200      	movs	r2, #0
 8005718:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800571a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800571c:	2200      	movs	r2, #0
 800571e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005724:	2200      	movs	r2, #0
 8005726:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800572a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800572c:	3358      	adds	r3, #88	; 0x58
 800572e:	224c      	movs	r2, #76	; 0x4c
 8005730:	2100      	movs	r1, #0
 8005732:	4618      	mov	r0, r3
 8005734:	f001 fdaa 	bl	800728c <memset>
 8005738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800573a:	4a0d      	ldr	r2, [pc, #52]	; (8005770 <prvInitialiseNewTask+0x148>)
 800573c:	65da      	str	r2, [r3, #92]	; 0x5c
 800573e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005740:	4a0c      	ldr	r2, [pc, #48]	; (8005774 <prvInitialiseNewTask+0x14c>)
 8005742:	661a      	str	r2, [r3, #96]	; 0x60
 8005744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005746:	4a0c      	ldr	r2, [pc, #48]	; (8005778 <prvInitialiseNewTask+0x150>)
 8005748:	665a      	str	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800574a:	683a      	ldr	r2, [r7, #0]
 800574c:	68f9      	ldr	r1, [r7, #12]
 800574e:	69b8      	ldr	r0, [r7, #24]
 8005750:	f001 f960 	bl	8006a14 <pxPortInitialiseStack>
 8005754:	4602      	mov	r2, r0
 8005756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005758:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800575a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800575c:	2b00      	cmp	r3, #0
 800575e:	d002      	beq.n	8005766 <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005762:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005764:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005766:	bf00      	nop
 8005768:	3720      	adds	r7, #32
 800576a:	46bd      	mov	sp, r7
 800576c:	bd80      	pop	{r7, pc}
 800576e:	bf00      	nop
 8005770:	20005718 	.word	0x20005718
 8005774:	20005780 	.word	0x20005780
 8005778:	200057e8 	.word	0x200057e8

0800577c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b082      	sub	sp, #8
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005784:	f001 fa76 	bl	8006c74 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005788:	4b2d      	ldr	r3, [pc, #180]	; (8005840 <prvAddNewTaskToReadyList+0xc4>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	3301      	adds	r3, #1
 800578e:	4a2c      	ldr	r2, [pc, #176]	; (8005840 <prvAddNewTaskToReadyList+0xc4>)
 8005790:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005792:	4b2c      	ldr	r3, [pc, #176]	; (8005844 <prvAddNewTaskToReadyList+0xc8>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d109      	bne.n	80057ae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800579a:	4a2a      	ldr	r2, [pc, #168]	; (8005844 <prvAddNewTaskToReadyList+0xc8>)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80057a0:	4b27      	ldr	r3, [pc, #156]	; (8005840 <prvAddNewTaskToReadyList+0xc4>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	2b01      	cmp	r3, #1
 80057a6:	d110      	bne.n	80057ca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80057a8:	f000 fc44 	bl	8006034 <prvInitialiseTaskLists>
 80057ac:	e00d      	b.n	80057ca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80057ae:	4b26      	ldr	r3, [pc, #152]	; (8005848 <prvAddNewTaskToReadyList+0xcc>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d109      	bne.n	80057ca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80057b6:	4b23      	ldr	r3, [pc, #140]	; (8005844 <prvAddNewTaskToReadyList+0xc8>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057c0:	429a      	cmp	r2, r3
 80057c2:	d802      	bhi.n	80057ca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80057c4:	4a1f      	ldr	r2, [pc, #124]	; (8005844 <prvAddNewTaskToReadyList+0xc8>)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80057ca:	4b20      	ldr	r3, [pc, #128]	; (800584c <prvAddNewTaskToReadyList+0xd0>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	3301      	adds	r3, #1
 80057d0:	4a1e      	ldr	r2, [pc, #120]	; (800584c <prvAddNewTaskToReadyList+0xd0>)
 80057d2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80057d4:	4b1d      	ldr	r3, [pc, #116]	; (800584c <prvAddNewTaskToReadyList+0xd0>)
 80057d6:	681a      	ldr	r2, [r3, #0]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057e0:	4b1b      	ldr	r3, [pc, #108]	; (8005850 <prvAddNewTaskToReadyList+0xd4>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	429a      	cmp	r2, r3
 80057e6:	d903      	bls.n	80057f0 <prvAddNewTaskToReadyList+0x74>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ec:	4a18      	ldr	r2, [pc, #96]	; (8005850 <prvAddNewTaskToReadyList+0xd4>)
 80057ee:	6013      	str	r3, [r2, #0]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057f4:	4613      	mov	r3, r2
 80057f6:	009b      	lsls	r3, r3, #2
 80057f8:	4413      	add	r3, r2
 80057fa:	009b      	lsls	r3, r3, #2
 80057fc:	4a15      	ldr	r2, [pc, #84]	; (8005854 <prvAddNewTaskToReadyList+0xd8>)
 80057fe:	441a      	add	r2, r3
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	3304      	adds	r3, #4
 8005804:	4619      	mov	r1, r3
 8005806:	4610      	mov	r0, r2
 8005808:	f7ff f899 	bl	800493e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800580c:	f001 fa62 	bl	8006cd4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005810:	4b0d      	ldr	r3, [pc, #52]	; (8005848 <prvAddNewTaskToReadyList+0xcc>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d00e      	beq.n	8005836 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005818:	4b0a      	ldr	r3, [pc, #40]	; (8005844 <prvAddNewTaskToReadyList+0xc8>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005822:	429a      	cmp	r2, r3
 8005824:	d207      	bcs.n	8005836 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005826:	4b0c      	ldr	r3, [pc, #48]	; (8005858 <prvAddNewTaskToReadyList+0xdc>)
 8005828:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800582c:	601a      	str	r2, [r3, #0]
 800582e:	f3bf 8f4f 	dsb	sy
 8005832:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005836:	bf00      	nop
 8005838:	3708      	adds	r7, #8
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}
 800583e:	bf00      	nop
 8005840:	20001990 	.word	0x20001990
 8005844:	200014bc 	.word	0x200014bc
 8005848:	2000199c 	.word	0x2000199c
 800584c:	200019ac 	.word	0x200019ac
 8005850:	20001998 	.word	0x20001998
 8005854:	200014c0 	.word	0x200014c0
 8005858:	e000ed04 	.word	0xe000ed04

0800585c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800585c:	b580      	push	{r7, lr}
 800585e:	b084      	sub	sp, #16
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005864:	2300      	movs	r3, #0
 8005866:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d017      	beq.n	800589e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800586e:	4b13      	ldr	r3, [pc, #76]	; (80058bc <vTaskDelay+0x60>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d00a      	beq.n	800588c <vTaskDelay+0x30>
	__asm volatile
 8005876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800587a:	f383 8811 	msr	BASEPRI, r3
 800587e:	f3bf 8f6f 	isb	sy
 8005882:	f3bf 8f4f 	dsb	sy
 8005886:	60bb      	str	r3, [r7, #8]
}
 8005888:	bf00      	nop
 800588a:	e7fe      	b.n	800588a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800588c:	f000 f88c 	bl	80059a8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005890:	2100      	movs	r1, #0
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f000 fd1c 	bl	80062d0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005898:	f000 f894 	bl	80059c4 <xTaskResumeAll>
 800589c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d107      	bne.n	80058b4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80058a4:	4b06      	ldr	r3, [pc, #24]	; (80058c0 <vTaskDelay+0x64>)
 80058a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058aa:	601a      	str	r2, [r3, #0]
 80058ac:	f3bf 8f4f 	dsb	sy
 80058b0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80058b4:	bf00      	nop
 80058b6:	3710      	adds	r7, #16
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}
 80058bc:	200019b8 	.word	0x200019b8
 80058c0:	e000ed04 	.word	0xe000ed04

080058c4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b08a      	sub	sp, #40	; 0x28
 80058c8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80058ca:	2300      	movs	r3, #0
 80058cc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80058ce:	2300      	movs	r3, #0
 80058d0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80058d2:	463a      	mov	r2, r7
 80058d4:	1d39      	adds	r1, r7, #4
 80058d6:	f107 0308 	add.w	r3, r7, #8
 80058da:	4618      	mov	r0, r3
 80058dc:	f7fe ffce 	bl	800487c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80058e0:	6839      	ldr	r1, [r7, #0]
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	68ba      	ldr	r2, [r7, #8]
 80058e6:	9202      	str	r2, [sp, #8]
 80058e8:	9301      	str	r3, [sp, #4]
 80058ea:	2300      	movs	r3, #0
 80058ec:	9300      	str	r3, [sp, #0]
 80058ee:	2300      	movs	r3, #0
 80058f0:	460a      	mov	r2, r1
 80058f2:	4925      	ldr	r1, [pc, #148]	; (8005988 <vTaskStartScheduler+0xc4>)
 80058f4:	4825      	ldr	r0, [pc, #148]	; (800598c <vTaskStartScheduler+0xc8>)
 80058f6:	f7ff fdf5 	bl	80054e4 <xTaskCreateStatic>
 80058fa:	4603      	mov	r3, r0
 80058fc:	4a24      	ldr	r2, [pc, #144]	; (8005990 <vTaskStartScheduler+0xcc>)
 80058fe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005900:	4b23      	ldr	r3, [pc, #140]	; (8005990 <vTaskStartScheduler+0xcc>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d002      	beq.n	800590e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005908:	2301      	movs	r3, #1
 800590a:	617b      	str	r3, [r7, #20]
 800590c:	e001      	b.n	8005912 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800590e:	2300      	movs	r3, #0
 8005910:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	2b01      	cmp	r3, #1
 8005916:	d102      	bne.n	800591e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005918:	f000 fd2e 	bl	8006378 <xTimerCreateTimerTask>
 800591c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	2b01      	cmp	r3, #1
 8005922:	d11d      	bne.n	8005960 <vTaskStartScheduler+0x9c>
	__asm volatile
 8005924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005928:	f383 8811 	msr	BASEPRI, r3
 800592c:	f3bf 8f6f 	isb	sy
 8005930:	f3bf 8f4f 	dsb	sy
 8005934:	613b      	str	r3, [r7, #16]
}
 8005936:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005938:	4b16      	ldr	r3, [pc, #88]	; (8005994 <vTaskStartScheduler+0xd0>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	3358      	adds	r3, #88	; 0x58
 800593e:	4a16      	ldr	r2, [pc, #88]	; (8005998 <vTaskStartScheduler+0xd4>)
 8005940:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005942:	4b16      	ldr	r3, [pc, #88]	; (800599c <vTaskStartScheduler+0xd8>)
 8005944:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005948:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800594a:	4b15      	ldr	r3, [pc, #84]	; (80059a0 <vTaskStartScheduler+0xdc>)
 800594c:	2201      	movs	r2, #1
 800594e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005950:	4b14      	ldr	r3, [pc, #80]	; (80059a4 <vTaskStartScheduler+0xe0>)
 8005952:	2200      	movs	r2, #0
 8005954:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8005956:	f7fb fb27 	bl	8000fa8 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800595a:	f001 f8e9 	bl	8006b30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800595e:	e00e      	b.n	800597e <vTaskStartScheduler+0xba>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005960:	697b      	ldr	r3, [r7, #20]
 8005962:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005966:	d10a      	bne.n	800597e <vTaskStartScheduler+0xba>
	__asm volatile
 8005968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800596c:	f383 8811 	msr	BASEPRI, r3
 8005970:	f3bf 8f6f 	isb	sy
 8005974:	f3bf 8f4f 	dsb	sy
 8005978:	60fb      	str	r3, [r7, #12]
}
 800597a:	bf00      	nop
 800597c:	e7fe      	b.n	800597c <vTaskStartScheduler+0xb8>
}
 800597e:	bf00      	nop
 8005980:	3718      	adds	r7, #24
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}
 8005986:	bf00      	nop
 8005988:	080075e0 	.word	0x080075e0
 800598c:	08006005 	.word	0x08006005
 8005990:	200019b4 	.word	0x200019b4
 8005994:	200014bc 	.word	0x200014bc
 8005998:	2000005c 	.word	0x2000005c
 800599c:	200019b0 	.word	0x200019b0
 80059a0:	2000199c 	.word	0x2000199c
 80059a4:	20001994 	.word	0x20001994

080059a8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80059a8:	b480      	push	{r7}
 80059aa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80059ac:	4b04      	ldr	r3, [pc, #16]	; (80059c0 <vTaskSuspendAll+0x18>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	3301      	adds	r3, #1
 80059b2:	4a03      	ldr	r2, [pc, #12]	; (80059c0 <vTaskSuspendAll+0x18>)
 80059b4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80059b6:	bf00      	nop
 80059b8:	46bd      	mov	sp, r7
 80059ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059be:	4770      	bx	lr
 80059c0:	200019b8 	.word	0x200019b8

080059c4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b084      	sub	sp, #16
 80059c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80059ca:	2300      	movs	r3, #0
 80059cc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80059ce:	2300      	movs	r3, #0
 80059d0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80059d2:	4b42      	ldr	r3, [pc, #264]	; (8005adc <xTaskResumeAll+0x118>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d10a      	bne.n	80059f0 <xTaskResumeAll+0x2c>
	__asm volatile
 80059da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059de:	f383 8811 	msr	BASEPRI, r3
 80059e2:	f3bf 8f6f 	isb	sy
 80059e6:	f3bf 8f4f 	dsb	sy
 80059ea:	603b      	str	r3, [r7, #0]
}
 80059ec:	bf00      	nop
 80059ee:	e7fe      	b.n	80059ee <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80059f0:	f001 f940 	bl	8006c74 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80059f4:	4b39      	ldr	r3, [pc, #228]	; (8005adc <xTaskResumeAll+0x118>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	3b01      	subs	r3, #1
 80059fa:	4a38      	ldr	r2, [pc, #224]	; (8005adc <xTaskResumeAll+0x118>)
 80059fc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80059fe:	4b37      	ldr	r3, [pc, #220]	; (8005adc <xTaskResumeAll+0x118>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d162      	bne.n	8005acc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005a06:	4b36      	ldr	r3, [pc, #216]	; (8005ae0 <xTaskResumeAll+0x11c>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d05e      	beq.n	8005acc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005a0e:	e02f      	b.n	8005a70 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a10:	4b34      	ldr	r3, [pc, #208]	; (8005ae4 <xTaskResumeAll+0x120>)
 8005a12:	68db      	ldr	r3, [r3, #12]
 8005a14:	68db      	ldr	r3, [r3, #12]
 8005a16:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	3318      	adds	r3, #24
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	f7fe ffeb 	bl	80049f8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	3304      	adds	r3, #4
 8005a26:	4618      	mov	r0, r3
 8005a28:	f7fe ffe6 	bl	80049f8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a30:	4b2d      	ldr	r3, [pc, #180]	; (8005ae8 <xTaskResumeAll+0x124>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	429a      	cmp	r2, r3
 8005a36:	d903      	bls.n	8005a40 <xTaskResumeAll+0x7c>
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a3c:	4a2a      	ldr	r2, [pc, #168]	; (8005ae8 <xTaskResumeAll+0x124>)
 8005a3e:	6013      	str	r3, [r2, #0]
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a44:	4613      	mov	r3, r2
 8005a46:	009b      	lsls	r3, r3, #2
 8005a48:	4413      	add	r3, r2
 8005a4a:	009b      	lsls	r3, r3, #2
 8005a4c:	4a27      	ldr	r2, [pc, #156]	; (8005aec <xTaskResumeAll+0x128>)
 8005a4e:	441a      	add	r2, r3
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	3304      	adds	r3, #4
 8005a54:	4619      	mov	r1, r3
 8005a56:	4610      	mov	r0, r2
 8005a58:	f7fe ff71 	bl	800493e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a60:	4b23      	ldr	r3, [pc, #140]	; (8005af0 <xTaskResumeAll+0x12c>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a66:	429a      	cmp	r2, r3
 8005a68:	d302      	bcc.n	8005a70 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005a6a:	4b22      	ldr	r3, [pc, #136]	; (8005af4 <xTaskResumeAll+0x130>)
 8005a6c:	2201      	movs	r2, #1
 8005a6e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005a70:	4b1c      	ldr	r3, [pc, #112]	; (8005ae4 <xTaskResumeAll+0x120>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d1cb      	bne.n	8005a10 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d001      	beq.n	8005a82 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005a7e:	f000 fb7b 	bl	8006178 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005a82:	4b1d      	ldr	r3, [pc, #116]	; (8005af8 <xTaskResumeAll+0x134>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d010      	beq.n	8005ab0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005a8e:	f000 f847 	bl	8005b20 <xTaskIncrementTick>
 8005a92:	4603      	mov	r3, r0
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d002      	beq.n	8005a9e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005a98:	4b16      	ldr	r3, [pc, #88]	; (8005af4 <xTaskResumeAll+0x130>)
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	3b01      	subs	r3, #1
 8005aa2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d1f1      	bne.n	8005a8e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005aaa:	4b13      	ldr	r3, [pc, #76]	; (8005af8 <xTaskResumeAll+0x134>)
 8005aac:	2200      	movs	r2, #0
 8005aae:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005ab0:	4b10      	ldr	r3, [pc, #64]	; (8005af4 <xTaskResumeAll+0x130>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d009      	beq.n	8005acc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005ab8:	2301      	movs	r3, #1
 8005aba:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005abc:	4b0f      	ldr	r3, [pc, #60]	; (8005afc <xTaskResumeAll+0x138>)
 8005abe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ac2:	601a      	str	r2, [r3, #0]
 8005ac4:	f3bf 8f4f 	dsb	sy
 8005ac8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005acc:	f001 f902 	bl	8006cd4 <vPortExitCritical>

	return xAlreadyYielded;
 8005ad0:	68bb      	ldr	r3, [r7, #8]
}
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	3710      	adds	r7, #16
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}
 8005ada:	bf00      	nop
 8005adc:	200019b8 	.word	0x200019b8
 8005ae0:	20001990 	.word	0x20001990
 8005ae4:	20001950 	.word	0x20001950
 8005ae8:	20001998 	.word	0x20001998
 8005aec:	200014c0 	.word	0x200014c0
 8005af0:	200014bc 	.word	0x200014bc
 8005af4:	200019a4 	.word	0x200019a4
 8005af8:	200019a0 	.word	0x200019a0
 8005afc:	e000ed04 	.word	0xe000ed04

08005b00 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005b00:	b480      	push	{r7}
 8005b02:	b083      	sub	sp, #12
 8005b04:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005b06:	4b05      	ldr	r3, [pc, #20]	; (8005b1c <xTaskGetTickCount+0x1c>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005b0c:	687b      	ldr	r3, [r7, #4]
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	370c      	adds	r7, #12
 8005b12:	46bd      	mov	sp, r7
 8005b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b18:	4770      	bx	lr
 8005b1a:	bf00      	nop
 8005b1c:	20001994 	.word	0x20001994

08005b20 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b086      	sub	sp, #24
 8005b24:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005b26:	2300      	movs	r3, #0
 8005b28:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b2a:	4b4f      	ldr	r3, [pc, #316]	; (8005c68 <xTaskIncrementTick+0x148>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	f040 808f 	bne.w	8005c52 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005b34:	4b4d      	ldr	r3, [pc, #308]	; (8005c6c <xTaskIncrementTick+0x14c>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	3301      	adds	r3, #1
 8005b3a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005b3c:	4a4b      	ldr	r2, [pc, #300]	; (8005c6c <xTaskIncrementTick+0x14c>)
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005b42:	693b      	ldr	r3, [r7, #16]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d120      	bne.n	8005b8a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005b48:	4b49      	ldr	r3, [pc, #292]	; (8005c70 <xTaskIncrementTick+0x150>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d00a      	beq.n	8005b68 <xTaskIncrementTick+0x48>
	__asm volatile
 8005b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b56:	f383 8811 	msr	BASEPRI, r3
 8005b5a:	f3bf 8f6f 	isb	sy
 8005b5e:	f3bf 8f4f 	dsb	sy
 8005b62:	603b      	str	r3, [r7, #0]
}
 8005b64:	bf00      	nop
 8005b66:	e7fe      	b.n	8005b66 <xTaskIncrementTick+0x46>
 8005b68:	4b41      	ldr	r3, [pc, #260]	; (8005c70 <xTaskIncrementTick+0x150>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	60fb      	str	r3, [r7, #12]
 8005b6e:	4b41      	ldr	r3, [pc, #260]	; (8005c74 <xTaskIncrementTick+0x154>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a3f      	ldr	r2, [pc, #252]	; (8005c70 <xTaskIncrementTick+0x150>)
 8005b74:	6013      	str	r3, [r2, #0]
 8005b76:	4a3f      	ldr	r2, [pc, #252]	; (8005c74 <xTaskIncrementTick+0x154>)
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	6013      	str	r3, [r2, #0]
 8005b7c:	4b3e      	ldr	r3, [pc, #248]	; (8005c78 <xTaskIncrementTick+0x158>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	3301      	adds	r3, #1
 8005b82:	4a3d      	ldr	r2, [pc, #244]	; (8005c78 <xTaskIncrementTick+0x158>)
 8005b84:	6013      	str	r3, [r2, #0]
 8005b86:	f000 faf7 	bl	8006178 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005b8a:	4b3c      	ldr	r3, [pc, #240]	; (8005c7c <xTaskIncrementTick+0x15c>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	693a      	ldr	r2, [r7, #16]
 8005b90:	429a      	cmp	r2, r3
 8005b92:	d349      	bcc.n	8005c28 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005b94:	4b36      	ldr	r3, [pc, #216]	; (8005c70 <xTaskIncrementTick+0x150>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d104      	bne.n	8005ba8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b9e:	4b37      	ldr	r3, [pc, #220]	; (8005c7c <xTaskIncrementTick+0x15c>)
 8005ba0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005ba4:	601a      	str	r2, [r3, #0]
					break;
 8005ba6:	e03f      	b.n	8005c28 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ba8:	4b31      	ldr	r3, [pc, #196]	; (8005c70 <xTaskIncrementTick+0x150>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	68db      	ldr	r3, [r3, #12]
 8005bae:	68db      	ldr	r3, [r3, #12]
 8005bb0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	685b      	ldr	r3, [r3, #4]
 8005bb6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005bb8:	693a      	ldr	r2, [r7, #16]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	429a      	cmp	r2, r3
 8005bbe:	d203      	bcs.n	8005bc8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005bc0:	4a2e      	ldr	r2, [pc, #184]	; (8005c7c <xTaskIncrementTick+0x15c>)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005bc6:	e02f      	b.n	8005c28 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	3304      	adds	r3, #4
 8005bcc:	4618      	mov	r0, r3
 8005bce:	f7fe ff13 	bl	80049f8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d004      	beq.n	8005be4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	3318      	adds	r3, #24
 8005bde:	4618      	mov	r0, r3
 8005be0:	f7fe ff0a 	bl	80049f8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005be8:	4b25      	ldr	r3, [pc, #148]	; (8005c80 <xTaskIncrementTick+0x160>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	429a      	cmp	r2, r3
 8005bee:	d903      	bls.n	8005bf8 <xTaskIncrementTick+0xd8>
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bf4:	4a22      	ldr	r2, [pc, #136]	; (8005c80 <xTaskIncrementTick+0x160>)
 8005bf6:	6013      	str	r3, [r2, #0]
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bfc:	4613      	mov	r3, r2
 8005bfe:	009b      	lsls	r3, r3, #2
 8005c00:	4413      	add	r3, r2
 8005c02:	009b      	lsls	r3, r3, #2
 8005c04:	4a1f      	ldr	r2, [pc, #124]	; (8005c84 <xTaskIncrementTick+0x164>)
 8005c06:	441a      	add	r2, r3
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	3304      	adds	r3, #4
 8005c0c:	4619      	mov	r1, r3
 8005c0e:	4610      	mov	r0, r2
 8005c10:	f7fe fe95 	bl	800493e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c18:	4b1b      	ldr	r3, [pc, #108]	; (8005c88 <xTaskIncrementTick+0x168>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c1e:	429a      	cmp	r2, r3
 8005c20:	d3b8      	bcc.n	8005b94 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005c22:	2301      	movs	r3, #1
 8005c24:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005c26:	e7b5      	b.n	8005b94 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005c28:	4b17      	ldr	r3, [pc, #92]	; (8005c88 <xTaskIncrementTick+0x168>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c2e:	4915      	ldr	r1, [pc, #84]	; (8005c84 <xTaskIncrementTick+0x164>)
 8005c30:	4613      	mov	r3, r2
 8005c32:	009b      	lsls	r3, r3, #2
 8005c34:	4413      	add	r3, r2
 8005c36:	009b      	lsls	r3, r3, #2
 8005c38:	440b      	add	r3, r1
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	2b01      	cmp	r3, #1
 8005c3e:	d901      	bls.n	8005c44 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005c40:	2301      	movs	r3, #1
 8005c42:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005c44:	4b11      	ldr	r3, [pc, #68]	; (8005c8c <xTaskIncrementTick+0x16c>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d007      	beq.n	8005c5c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	617b      	str	r3, [r7, #20]
 8005c50:	e004      	b.n	8005c5c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005c52:	4b0f      	ldr	r3, [pc, #60]	; (8005c90 <xTaskIncrementTick+0x170>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	3301      	adds	r3, #1
 8005c58:	4a0d      	ldr	r2, [pc, #52]	; (8005c90 <xTaskIncrementTick+0x170>)
 8005c5a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005c5c:	697b      	ldr	r3, [r7, #20]
}
 8005c5e:	4618      	mov	r0, r3
 8005c60:	3718      	adds	r7, #24
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bd80      	pop	{r7, pc}
 8005c66:	bf00      	nop
 8005c68:	200019b8 	.word	0x200019b8
 8005c6c:	20001994 	.word	0x20001994
 8005c70:	20001948 	.word	0x20001948
 8005c74:	2000194c 	.word	0x2000194c
 8005c78:	200019a8 	.word	0x200019a8
 8005c7c:	200019b0 	.word	0x200019b0
 8005c80:	20001998 	.word	0x20001998
 8005c84:	200014c0 	.word	0x200014c0
 8005c88:	200014bc 	.word	0x200014bc
 8005c8c:	200019a4 	.word	0x200019a4
 8005c90:	200019a0 	.word	0x200019a0

08005c94 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b084      	sub	sp, #16
 8005c98:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005c9a:	4b36      	ldr	r3, [pc, #216]	; (8005d74 <vTaskSwitchContext+0xe0>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d003      	beq.n	8005caa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005ca2:	4b35      	ldr	r3, [pc, #212]	; (8005d78 <vTaskSwitchContext+0xe4>)
 8005ca4:	2201      	movs	r2, #1
 8005ca6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005ca8:	e05f      	b.n	8005d6a <vTaskSwitchContext+0xd6>
		xYieldPending = pdFALSE;
 8005caa:	4b33      	ldr	r3, [pc, #204]	; (8005d78 <vTaskSwitchContext+0xe4>)
 8005cac:	2200      	movs	r2, #0
 8005cae:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8005cb0:	f7fb f981 	bl	8000fb6 <getRunTimeCounterValue>
 8005cb4:	4603      	mov	r3, r0
 8005cb6:	4a31      	ldr	r2, [pc, #196]	; (8005d7c <vTaskSwitchContext+0xe8>)
 8005cb8:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8005cba:	4b30      	ldr	r3, [pc, #192]	; (8005d7c <vTaskSwitchContext+0xe8>)
 8005cbc:	681a      	ldr	r2, [r3, #0]
 8005cbe:	4b30      	ldr	r3, [pc, #192]	; (8005d80 <vTaskSwitchContext+0xec>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	429a      	cmp	r2, r3
 8005cc4:	d909      	bls.n	8005cda <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8005cc6:	4b2f      	ldr	r3, [pc, #188]	; (8005d84 <vTaskSwitchContext+0xf0>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005ccc:	4a2b      	ldr	r2, [pc, #172]	; (8005d7c <vTaskSwitchContext+0xe8>)
 8005cce:	6810      	ldr	r0, [r2, #0]
 8005cd0:	4a2b      	ldr	r2, [pc, #172]	; (8005d80 <vTaskSwitchContext+0xec>)
 8005cd2:	6812      	ldr	r2, [r2, #0]
 8005cd4:	1a82      	subs	r2, r0, r2
 8005cd6:	440a      	add	r2, r1
 8005cd8:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 8005cda:	4b28      	ldr	r3, [pc, #160]	; (8005d7c <vTaskSwitchContext+0xe8>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a28      	ldr	r2, [pc, #160]	; (8005d80 <vTaskSwitchContext+0xec>)
 8005ce0:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ce2:	4b29      	ldr	r3, [pc, #164]	; (8005d88 <vTaskSwitchContext+0xf4>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	60fb      	str	r3, [r7, #12]
 8005ce8:	e010      	b.n	8005d0c <vTaskSwitchContext+0x78>
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d10a      	bne.n	8005d06 <vTaskSwitchContext+0x72>
	__asm volatile
 8005cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cf4:	f383 8811 	msr	BASEPRI, r3
 8005cf8:	f3bf 8f6f 	isb	sy
 8005cfc:	f3bf 8f4f 	dsb	sy
 8005d00:	607b      	str	r3, [r7, #4]
}
 8005d02:	bf00      	nop
 8005d04:	e7fe      	b.n	8005d04 <vTaskSwitchContext+0x70>
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	3b01      	subs	r3, #1
 8005d0a:	60fb      	str	r3, [r7, #12]
 8005d0c:	491f      	ldr	r1, [pc, #124]	; (8005d8c <vTaskSwitchContext+0xf8>)
 8005d0e:	68fa      	ldr	r2, [r7, #12]
 8005d10:	4613      	mov	r3, r2
 8005d12:	009b      	lsls	r3, r3, #2
 8005d14:	4413      	add	r3, r2
 8005d16:	009b      	lsls	r3, r3, #2
 8005d18:	440b      	add	r3, r1
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d0e4      	beq.n	8005cea <vTaskSwitchContext+0x56>
 8005d20:	68fa      	ldr	r2, [r7, #12]
 8005d22:	4613      	mov	r3, r2
 8005d24:	009b      	lsls	r3, r3, #2
 8005d26:	4413      	add	r3, r2
 8005d28:	009b      	lsls	r3, r3, #2
 8005d2a:	4a18      	ldr	r2, [pc, #96]	; (8005d8c <vTaskSwitchContext+0xf8>)
 8005d2c:	4413      	add	r3, r2
 8005d2e:	60bb      	str	r3, [r7, #8]
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	685a      	ldr	r2, [r3, #4]
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	605a      	str	r2, [r3, #4]
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	685a      	ldr	r2, [r3, #4]
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	3308      	adds	r3, #8
 8005d42:	429a      	cmp	r2, r3
 8005d44:	d104      	bne.n	8005d50 <vTaskSwitchContext+0xbc>
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	685b      	ldr	r3, [r3, #4]
 8005d4a:	685a      	ldr	r2, [r3, #4]
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	605a      	str	r2, [r3, #4]
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	68db      	ldr	r3, [r3, #12]
 8005d56:	4a0b      	ldr	r2, [pc, #44]	; (8005d84 <vTaskSwitchContext+0xf0>)
 8005d58:	6013      	str	r3, [r2, #0]
 8005d5a:	4a0b      	ldr	r2, [pc, #44]	; (8005d88 <vTaskSwitchContext+0xf4>)
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005d60:	4b08      	ldr	r3, [pc, #32]	; (8005d84 <vTaskSwitchContext+0xf0>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	3358      	adds	r3, #88	; 0x58
 8005d66:	4a0a      	ldr	r2, [pc, #40]	; (8005d90 <vTaskSwitchContext+0xfc>)
 8005d68:	6013      	str	r3, [r2, #0]
}
 8005d6a:	bf00      	nop
 8005d6c:	3710      	adds	r7, #16
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd80      	pop	{r7, pc}
 8005d72:	bf00      	nop
 8005d74:	200019b8 	.word	0x200019b8
 8005d78:	200019a4 	.word	0x200019a4
 8005d7c:	200019c0 	.word	0x200019c0
 8005d80:	200019bc 	.word	0x200019bc
 8005d84:	200014bc 	.word	0x200014bc
 8005d88:	20001998 	.word	0x20001998
 8005d8c:	200014c0 	.word	0x200014c0
 8005d90:	2000005c 	.word	0x2000005c

08005d94 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b084      	sub	sp, #16
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
 8005d9c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d10a      	bne.n	8005dba <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005da8:	f383 8811 	msr	BASEPRI, r3
 8005dac:	f3bf 8f6f 	isb	sy
 8005db0:	f3bf 8f4f 	dsb	sy
 8005db4:	60fb      	str	r3, [r7, #12]
}
 8005db6:	bf00      	nop
 8005db8:	e7fe      	b.n	8005db8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005dba:	4b07      	ldr	r3, [pc, #28]	; (8005dd8 <vTaskPlaceOnEventList+0x44>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	3318      	adds	r3, #24
 8005dc0:	4619      	mov	r1, r3
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	f7fe fddf 	bl	8004986 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005dc8:	2101      	movs	r1, #1
 8005dca:	6838      	ldr	r0, [r7, #0]
 8005dcc:	f000 fa80 	bl	80062d0 <prvAddCurrentTaskToDelayedList>
}
 8005dd0:	bf00      	nop
 8005dd2:	3710      	adds	r7, #16
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	bd80      	pop	{r7, pc}
 8005dd8:	200014bc 	.word	0x200014bc

08005ddc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b086      	sub	sp, #24
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	60f8      	str	r0, [r7, #12]
 8005de4:	60b9      	str	r1, [r7, #8]
 8005de6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d10a      	bne.n	8005e04 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005df2:	f383 8811 	msr	BASEPRI, r3
 8005df6:	f3bf 8f6f 	isb	sy
 8005dfa:	f3bf 8f4f 	dsb	sy
 8005dfe:	617b      	str	r3, [r7, #20]
}
 8005e00:	bf00      	nop
 8005e02:	e7fe      	b.n	8005e02 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005e04:	4b0a      	ldr	r3, [pc, #40]	; (8005e30 <vTaskPlaceOnEventListRestricted+0x54>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	3318      	adds	r3, #24
 8005e0a:	4619      	mov	r1, r3
 8005e0c:	68f8      	ldr	r0, [r7, #12]
 8005e0e:	f7fe fd96 	bl	800493e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d002      	beq.n	8005e1e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005e18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005e1c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005e1e:	6879      	ldr	r1, [r7, #4]
 8005e20:	68b8      	ldr	r0, [r7, #8]
 8005e22:	f000 fa55 	bl	80062d0 <prvAddCurrentTaskToDelayedList>
	}
 8005e26:	bf00      	nop
 8005e28:	3718      	adds	r7, #24
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bd80      	pop	{r7, pc}
 8005e2e:	bf00      	nop
 8005e30:	200014bc 	.word	0x200014bc

08005e34 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b086      	sub	sp, #24
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	68db      	ldr	r3, [r3, #12]
 8005e40:	68db      	ldr	r3, [r3, #12]
 8005e42:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005e44:	693b      	ldr	r3, [r7, #16]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d10a      	bne.n	8005e60 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e4e:	f383 8811 	msr	BASEPRI, r3
 8005e52:	f3bf 8f6f 	isb	sy
 8005e56:	f3bf 8f4f 	dsb	sy
 8005e5a:	60fb      	str	r3, [r7, #12]
}
 8005e5c:	bf00      	nop
 8005e5e:	e7fe      	b.n	8005e5e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005e60:	693b      	ldr	r3, [r7, #16]
 8005e62:	3318      	adds	r3, #24
 8005e64:	4618      	mov	r0, r3
 8005e66:	f7fe fdc7 	bl	80049f8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e6a:	4b1e      	ldr	r3, [pc, #120]	; (8005ee4 <xTaskRemoveFromEventList+0xb0>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d11d      	bne.n	8005eae <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005e72:	693b      	ldr	r3, [r7, #16]
 8005e74:	3304      	adds	r3, #4
 8005e76:	4618      	mov	r0, r3
 8005e78:	f7fe fdbe 	bl	80049f8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005e7c:	693b      	ldr	r3, [r7, #16]
 8005e7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e80:	4b19      	ldr	r3, [pc, #100]	; (8005ee8 <xTaskRemoveFromEventList+0xb4>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	429a      	cmp	r2, r3
 8005e86:	d903      	bls.n	8005e90 <xTaskRemoveFromEventList+0x5c>
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e8c:	4a16      	ldr	r2, [pc, #88]	; (8005ee8 <xTaskRemoveFromEventList+0xb4>)
 8005e8e:	6013      	str	r3, [r2, #0]
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e94:	4613      	mov	r3, r2
 8005e96:	009b      	lsls	r3, r3, #2
 8005e98:	4413      	add	r3, r2
 8005e9a:	009b      	lsls	r3, r3, #2
 8005e9c:	4a13      	ldr	r2, [pc, #76]	; (8005eec <xTaskRemoveFromEventList+0xb8>)
 8005e9e:	441a      	add	r2, r3
 8005ea0:	693b      	ldr	r3, [r7, #16]
 8005ea2:	3304      	adds	r3, #4
 8005ea4:	4619      	mov	r1, r3
 8005ea6:	4610      	mov	r0, r2
 8005ea8:	f7fe fd49 	bl	800493e <vListInsertEnd>
 8005eac:	e005      	b.n	8005eba <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005eae:	693b      	ldr	r3, [r7, #16]
 8005eb0:	3318      	adds	r3, #24
 8005eb2:	4619      	mov	r1, r3
 8005eb4:	480e      	ldr	r0, [pc, #56]	; (8005ef0 <xTaskRemoveFromEventList+0xbc>)
 8005eb6:	f7fe fd42 	bl	800493e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ebe:	4b0d      	ldr	r3, [pc, #52]	; (8005ef4 <xTaskRemoveFromEventList+0xc0>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ec4:	429a      	cmp	r2, r3
 8005ec6:	d905      	bls.n	8005ed4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005ec8:	2301      	movs	r3, #1
 8005eca:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005ecc:	4b0a      	ldr	r3, [pc, #40]	; (8005ef8 <xTaskRemoveFromEventList+0xc4>)
 8005ece:	2201      	movs	r2, #1
 8005ed0:	601a      	str	r2, [r3, #0]
 8005ed2:	e001      	b.n	8005ed8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005ed8:	697b      	ldr	r3, [r7, #20]
}
 8005eda:	4618      	mov	r0, r3
 8005edc:	3718      	adds	r7, #24
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}
 8005ee2:	bf00      	nop
 8005ee4:	200019b8 	.word	0x200019b8
 8005ee8:	20001998 	.word	0x20001998
 8005eec:	200014c0 	.word	0x200014c0
 8005ef0:	20001950 	.word	0x20001950
 8005ef4:	200014bc 	.word	0x200014bc
 8005ef8:	200019a4 	.word	0x200019a4

08005efc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005efc:	b480      	push	{r7}
 8005efe:	b083      	sub	sp, #12
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005f04:	4b06      	ldr	r3, [pc, #24]	; (8005f20 <vTaskInternalSetTimeOutState+0x24>)
 8005f06:	681a      	ldr	r2, [r3, #0]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005f0c:	4b05      	ldr	r3, [pc, #20]	; (8005f24 <vTaskInternalSetTimeOutState+0x28>)
 8005f0e:	681a      	ldr	r2, [r3, #0]
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	605a      	str	r2, [r3, #4]
}
 8005f14:	bf00      	nop
 8005f16:	370c      	adds	r7, #12
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1e:	4770      	bx	lr
 8005f20:	200019a8 	.word	0x200019a8
 8005f24:	20001994 	.word	0x20001994

08005f28 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b088      	sub	sp, #32
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
 8005f30:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d10a      	bne.n	8005f4e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f3c:	f383 8811 	msr	BASEPRI, r3
 8005f40:	f3bf 8f6f 	isb	sy
 8005f44:	f3bf 8f4f 	dsb	sy
 8005f48:	613b      	str	r3, [r7, #16]
}
 8005f4a:	bf00      	nop
 8005f4c:	e7fe      	b.n	8005f4c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d10a      	bne.n	8005f6a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f58:	f383 8811 	msr	BASEPRI, r3
 8005f5c:	f3bf 8f6f 	isb	sy
 8005f60:	f3bf 8f4f 	dsb	sy
 8005f64:	60fb      	str	r3, [r7, #12]
}
 8005f66:	bf00      	nop
 8005f68:	e7fe      	b.n	8005f68 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005f6a:	f000 fe83 	bl	8006c74 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005f6e:	4b1d      	ldr	r3, [pc, #116]	; (8005fe4 <xTaskCheckForTimeOut+0xbc>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	69ba      	ldr	r2, [r7, #24]
 8005f7a:	1ad3      	subs	r3, r2, r3
 8005f7c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f86:	d102      	bne.n	8005f8e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005f88:	2300      	movs	r3, #0
 8005f8a:	61fb      	str	r3, [r7, #28]
 8005f8c:	e023      	b.n	8005fd6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681a      	ldr	r2, [r3, #0]
 8005f92:	4b15      	ldr	r3, [pc, #84]	; (8005fe8 <xTaskCheckForTimeOut+0xc0>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	429a      	cmp	r2, r3
 8005f98:	d007      	beq.n	8005faa <xTaskCheckForTimeOut+0x82>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	69ba      	ldr	r2, [r7, #24]
 8005fa0:	429a      	cmp	r2, r3
 8005fa2:	d302      	bcc.n	8005faa <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	61fb      	str	r3, [r7, #28]
 8005fa8:	e015      	b.n	8005fd6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	697a      	ldr	r2, [r7, #20]
 8005fb0:	429a      	cmp	r2, r3
 8005fb2:	d20b      	bcs.n	8005fcc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	681a      	ldr	r2, [r3, #0]
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	1ad2      	subs	r2, r2, r3
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	f7ff ff9b 	bl	8005efc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	61fb      	str	r3, [r7, #28]
 8005fca:	e004      	b.n	8005fd6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005fd6:	f000 fe7d 	bl	8006cd4 <vPortExitCritical>

	return xReturn;
 8005fda:	69fb      	ldr	r3, [r7, #28]
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	3720      	adds	r7, #32
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bd80      	pop	{r7, pc}
 8005fe4:	20001994 	.word	0x20001994
 8005fe8:	200019a8 	.word	0x200019a8

08005fec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005fec:	b480      	push	{r7}
 8005fee:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005ff0:	4b03      	ldr	r3, [pc, #12]	; (8006000 <vTaskMissedYield+0x14>)
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	601a      	str	r2, [r3, #0]
}
 8005ff6:	bf00      	nop
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffe:	4770      	bx	lr
 8006000:	200019a4 	.word	0x200019a4

08006004 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b082      	sub	sp, #8
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800600c:	f000 f852 	bl	80060b4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006010:	4b06      	ldr	r3, [pc, #24]	; (800602c <prvIdleTask+0x28>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	2b01      	cmp	r3, #1
 8006016:	d9f9      	bls.n	800600c <prvIdleTask+0x8>
			{
				taskYIELD();
 8006018:	4b05      	ldr	r3, [pc, #20]	; (8006030 <prvIdleTask+0x2c>)
 800601a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800601e:	601a      	str	r2, [r3, #0]
 8006020:	f3bf 8f4f 	dsb	sy
 8006024:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006028:	e7f0      	b.n	800600c <prvIdleTask+0x8>
 800602a:	bf00      	nop
 800602c:	200014c0 	.word	0x200014c0
 8006030:	e000ed04 	.word	0xe000ed04

08006034 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b082      	sub	sp, #8
 8006038:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800603a:	2300      	movs	r3, #0
 800603c:	607b      	str	r3, [r7, #4]
 800603e:	e00c      	b.n	800605a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006040:	687a      	ldr	r2, [r7, #4]
 8006042:	4613      	mov	r3, r2
 8006044:	009b      	lsls	r3, r3, #2
 8006046:	4413      	add	r3, r2
 8006048:	009b      	lsls	r3, r3, #2
 800604a:	4a12      	ldr	r2, [pc, #72]	; (8006094 <prvInitialiseTaskLists+0x60>)
 800604c:	4413      	add	r3, r2
 800604e:	4618      	mov	r0, r3
 8006050:	f7fe fc48 	bl	80048e4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	3301      	adds	r3, #1
 8006058:	607b      	str	r3, [r7, #4]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2b37      	cmp	r3, #55	; 0x37
 800605e:	d9ef      	bls.n	8006040 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006060:	480d      	ldr	r0, [pc, #52]	; (8006098 <prvInitialiseTaskLists+0x64>)
 8006062:	f7fe fc3f 	bl	80048e4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006066:	480d      	ldr	r0, [pc, #52]	; (800609c <prvInitialiseTaskLists+0x68>)
 8006068:	f7fe fc3c 	bl	80048e4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800606c:	480c      	ldr	r0, [pc, #48]	; (80060a0 <prvInitialiseTaskLists+0x6c>)
 800606e:	f7fe fc39 	bl	80048e4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006072:	480c      	ldr	r0, [pc, #48]	; (80060a4 <prvInitialiseTaskLists+0x70>)
 8006074:	f7fe fc36 	bl	80048e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006078:	480b      	ldr	r0, [pc, #44]	; (80060a8 <prvInitialiseTaskLists+0x74>)
 800607a:	f7fe fc33 	bl	80048e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800607e:	4b0b      	ldr	r3, [pc, #44]	; (80060ac <prvInitialiseTaskLists+0x78>)
 8006080:	4a05      	ldr	r2, [pc, #20]	; (8006098 <prvInitialiseTaskLists+0x64>)
 8006082:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006084:	4b0a      	ldr	r3, [pc, #40]	; (80060b0 <prvInitialiseTaskLists+0x7c>)
 8006086:	4a05      	ldr	r2, [pc, #20]	; (800609c <prvInitialiseTaskLists+0x68>)
 8006088:	601a      	str	r2, [r3, #0]
}
 800608a:	bf00      	nop
 800608c:	3708      	adds	r7, #8
 800608e:	46bd      	mov	sp, r7
 8006090:	bd80      	pop	{r7, pc}
 8006092:	bf00      	nop
 8006094:	200014c0 	.word	0x200014c0
 8006098:	20001920 	.word	0x20001920
 800609c:	20001934 	.word	0x20001934
 80060a0:	20001950 	.word	0x20001950
 80060a4:	20001964 	.word	0x20001964
 80060a8:	2000197c 	.word	0x2000197c
 80060ac:	20001948 	.word	0x20001948
 80060b0:	2000194c 	.word	0x2000194c

080060b4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b082      	sub	sp, #8
 80060b8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80060ba:	e019      	b.n	80060f0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80060bc:	f000 fdda 	bl	8006c74 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060c0:	4b10      	ldr	r3, [pc, #64]	; (8006104 <prvCheckTasksWaitingTermination+0x50>)
 80060c2:	68db      	ldr	r3, [r3, #12]
 80060c4:	68db      	ldr	r3, [r3, #12]
 80060c6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	3304      	adds	r3, #4
 80060cc:	4618      	mov	r0, r3
 80060ce:	f7fe fc93 	bl	80049f8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80060d2:	4b0d      	ldr	r3, [pc, #52]	; (8006108 <prvCheckTasksWaitingTermination+0x54>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	3b01      	subs	r3, #1
 80060d8:	4a0b      	ldr	r2, [pc, #44]	; (8006108 <prvCheckTasksWaitingTermination+0x54>)
 80060da:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80060dc:	4b0b      	ldr	r3, [pc, #44]	; (800610c <prvCheckTasksWaitingTermination+0x58>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	3b01      	subs	r3, #1
 80060e2:	4a0a      	ldr	r2, [pc, #40]	; (800610c <prvCheckTasksWaitingTermination+0x58>)
 80060e4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80060e6:	f000 fdf5 	bl	8006cd4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80060ea:	6878      	ldr	r0, [r7, #4]
 80060ec:	f000 f810 	bl	8006110 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80060f0:	4b06      	ldr	r3, [pc, #24]	; (800610c <prvCheckTasksWaitingTermination+0x58>)
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d1e1      	bne.n	80060bc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80060f8:	bf00      	nop
 80060fa:	bf00      	nop
 80060fc:	3708      	adds	r7, #8
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}
 8006102:	bf00      	nop
 8006104:	20001964 	.word	0x20001964
 8006108:	20001990 	.word	0x20001990
 800610c:	20001978 	.word	0x20001978

08006110 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006110:	b580      	push	{r7, lr}
 8006112:	b084      	sub	sp, #16
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	3358      	adds	r3, #88	; 0x58
 800611c:	4618      	mov	r0, r3
 800611e:	f001 f8bd 	bl	800729c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8006128:	2b00      	cmp	r3, #0
 800612a:	d108      	bne.n	800613e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006130:	4618      	mov	r0, r3
 8006132:	f000 ff8d 	bl	8007050 <vPortFree>
				vPortFree( pxTCB );
 8006136:	6878      	ldr	r0, [r7, #4]
 8006138:	f000 ff8a 	bl	8007050 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800613c:	e018      	b.n	8006170 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8006144:	2b01      	cmp	r3, #1
 8006146:	d103      	bne.n	8006150 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006148:	6878      	ldr	r0, [r7, #4]
 800614a:	f000 ff81 	bl	8007050 <vPortFree>
	}
 800614e:	e00f      	b.n	8006170 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8006156:	2b02      	cmp	r3, #2
 8006158:	d00a      	beq.n	8006170 <prvDeleteTCB+0x60>
	__asm volatile
 800615a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800615e:	f383 8811 	msr	BASEPRI, r3
 8006162:	f3bf 8f6f 	isb	sy
 8006166:	f3bf 8f4f 	dsb	sy
 800616a:	60fb      	str	r3, [r7, #12]
}
 800616c:	bf00      	nop
 800616e:	e7fe      	b.n	800616e <prvDeleteTCB+0x5e>
	}
 8006170:	bf00      	nop
 8006172:	3710      	adds	r7, #16
 8006174:	46bd      	mov	sp, r7
 8006176:	bd80      	pop	{r7, pc}

08006178 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006178:	b480      	push	{r7}
 800617a:	b083      	sub	sp, #12
 800617c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800617e:	4b0c      	ldr	r3, [pc, #48]	; (80061b0 <prvResetNextTaskUnblockTime+0x38>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d104      	bne.n	8006192 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006188:	4b0a      	ldr	r3, [pc, #40]	; (80061b4 <prvResetNextTaskUnblockTime+0x3c>)
 800618a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800618e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006190:	e008      	b.n	80061a4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006192:	4b07      	ldr	r3, [pc, #28]	; (80061b0 <prvResetNextTaskUnblockTime+0x38>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	68db      	ldr	r3, [r3, #12]
 8006198:	68db      	ldr	r3, [r3, #12]
 800619a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	4a04      	ldr	r2, [pc, #16]	; (80061b4 <prvResetNextTaskUnblockTime+0x3c>)
 80061a2:	6013      	str	r3, [r2, #0]
}
 80061a4:	bf00      	nop
 80061a6:	370c      	adds	r7, #12
 80061a8:	46bd      	mov	sp, r7
 80061aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ae:	4770      	bx	lr
 80061b0:	20001948 	.word	0x20001948
 80061b4:	200019b0 	.word	0x200019b0

080061b8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80061b8:	b480      	push	{r7}
 80061ba:	b083      	sub	sp, #12
 80061bc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80061be:	4b0b      	ldr	r3, [pc, #44]	; (80061ec <xTaskGetSchedulerState+0x34>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d102      	bne.n	80061cc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80061c6:	2301      	movs	r3, #1
 80061c8:	607b      	str	r3, [r7, #4]
 80061ca:	e008      	b.n	80061de <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80061cc:	4b08      	ldr	r3, [pc, #32]	; (80061f0 <xTaskGetSchedulerState+0x38>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d102      	bne.n	80061da <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80061d4:	2302      	movs	r3, #2
 80061d6:	607b      	str	r3, [r7, #4]
 80061d8:	e001      	b.n	80061de <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80061da:	2300      	movs	r3, #0
 80061dc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80061de:	687b      	ldr	r3, [r7, #4]
	}
 80061e0:	4618      	mov	r0, r3
 80061e2:	370c      	adds	r7, #12
 80061e4:	46bd      	mov	sp, r7
 80061e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ea:	4770      	bx	lr
 80061ec:	2000199c 	.word	0x2000199c
 80061f0:	200019b8 	.word	0x200019b8

080061f4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b086      	sub	sp, #24
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006200:	2300      	movs	r3, #0
 8006202:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d056      	beq.n	80062b8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800620a:	4b2e      	ldr	r3, [pc, #184]	; (80062c4 <xTaskPriorityDisinherit+0xd0>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	693a      	ldr	r2, [r7, #16]
 8006210:	429a      	cmp	r2, r3
 8006212:	d00a      	beq.n	800622a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006218:	f383 8811 	msr	BASEPRI, r3
 800621c:	f3bf 8f6f 	isb	sy
 8006220:	f3bf 8f4f 	dsb	sy
 8006224:	60fb      	str	r3, [r7, #12]
}
 8006226:	bf00      	nop
 8006228:	e7fe      	b.n	8006228 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800622a:	693b      	ldr	r3, [r7, #16]
 800622c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800622e:	2b00      	cmp	r3, #0
 8006230:	d10a      	bne.n	8006248 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006236:	f383 8811 	msr	BASEPRI, r3
 800623a:	f3bf 8f6f 	isb	sy
 800623e:	f3bf 8f4f 	dsb	sy
 8006242:	60bb      	str	r3, [r7, #8]
}
 8006244:	bf00      	nop
 8006246:	e7fe      	b.n	8006246 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006248:	693b      	ldr	r3, [r7, #16]
 800624a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800624c:	1e5a      	subs	r2, r3, #1
 800624e:	693b      	ldr	r3, [r7, #16]
 8006250:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006252:	693b      	ldr	r3, [r7, #16]
 8006254:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006256:	693b      	ldr	r3, [r7, #16]
 8006258:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800625a:	429a      	cmp	r2, r3
 800625c:	d02c      	beq.n	80062b8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800625e:	693b      	ldr	r3, [r7, #16]
 8006260:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006262:	2b00      	cmp	r3, #0
 8006264:	d128      	bne.n	80062b8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	3304      	adds	r3, #4
 800626a:	4618      	mov	r0, r3
 800626c:	f7fe fbc4 	bl	80049f8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006274:	693b      	ldr	r3, [r7, #16]
 8006276:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006278:	693b      	ldr	r3, [r7, #16]
 800627a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800627c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006280:	693b      	ldr	r3, [r7, #16]
 8006282:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006284:	693b      	ldr	r3, [r7, #16]
 8006286:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006288:	4b0f      	ldr	r3, [pc, #60]	; (80062c8 <xTaskPriorityDisinherit+0xd4>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	429a      	cmp	r2, r3
 800628e:	d903      	bls.n	8006298 <xTaskPriorityDisinherit+0xa4>
 8006290:	693b      	ldr	r3, [r7, #16]
 8006292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006294:	4a0c      	ldr	r2, [pc, #48]	; (80062c8 <xTaskPriorityDisinherit+0xd4>)
 8006296:	6013      	str	r3, [r2, #0]
 8006298:	693b      	ldr	r3, [r7, #16]
 800629a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800629c:	4613      	mov	r3, r2
 800629e:	009b      	lsls	r3, r3, #2
 80062a0:	4413      	add	r3, r2
 80062a2:	009b      	lsls	r3, r3, #2
 80062a4:	4a09      	ldr	r2, [pc, #36]	; (80062cc <xTaskPriorityDisinherit+0xd8>)
 80062a6:	441a      	add	r2, r3
 80062a8:	693b      	ldr	r3, [r7, #16]
 80062aa:	3304      	adds	r3, #4
 80062ac:	4619      	mov	r1, r3
 80062ae:	4610      	mov	r0, r2
 80062b0:	f7fe fb45 	bl	800493e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80062b4:	2301      	movs	r3, #1
 80062b6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80062b8:	697b      	ldr	r3, [r7, #20]
	}
 80062ba:	4618      	mov	r0, r3
 80062bc:	3718      	adds	r7, #24
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd80      	pop	{r7, pc}
 80062c2:	bf00      	nop
 80062c4:	200014bc 	.word	0x200014bc
 80062c8:	20001998 	.word	0x20001998
 80062cc:	200014c0 	.word	0x200014c0

080062d0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b084      	sub	sp, #16
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
 80062d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80062da:	4b21      	ldr	r3, [pc, #132]	; (8006360 <prvAddCurrentTaskToDelayedList+0x90>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80062e0:	4b20      	ldr	r3, [pc, #128]	; (8006364 <prvAddCurrentTaskToDelayedList+0x94>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	3304      	adds	r3, #4
 80062e6:	4618      	mov	r0, r3
 80062e8:	f7fe fb86 	bl	80049f8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80062f2:	d10a      	bne.n	800630a <prvAddCurrentTaskToDelayedList+0x3a>
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d007      	beq.n	800630a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80062fa:	4b1a      	ldr	r3, [pc, #104]	; (8006364 <prvAddCurrentTaskToDelayedList+0x94>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	3304      	adds	r3, #4
 8006300:	4619      	mov	r1, r3
 8006302:	4819      	ldr	r0, [pc, #100]	; (8006368 <prvAddCurrentTaskToDelayedList+0x98>)
 8006304:	f7fe fb1b 	bl	800493e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006308:	e026      	b.n	8006358 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800630a:	68fa      	ldr	r2, [r7, #12]
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	4413      	add	r3, r2
 8006310:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006312:	4b14      	ldr	r3, [pc, #80]	; (8006364 <prvAddCurrentTaskToDelayedList+0x94>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	68ba      	ldr	r2, [r7, #8]
 8006318:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800631a:	68ba      	ldr	r2, [r7, #8]
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	429a      	cmp	r2, r3
 8006320:	d209      	bcs.n	8006336 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006322:	4b12      	ldr	r3, [pc, #72]	; (800636c <prvAddCurrentTaskToDelayedList+0x9c>)
 8006324:	681a      	ldr	r2, [r3, #0]
 8006326:	4b0f      	ldr	r3, [pc, #60]	; (8006364 <prvAddCurrentTaskToDelayedList+0x94>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	3304      	adds	r3, #4
 800632c:	4619      	mov	r1, r3
 800632e:	4610      	mov	r0, r2
 8006330:	f7fe fb29 	bl	8004986 <vListInsert>
}
 8006334:	e010      	b.n	8006358 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006336:	4b0e      	ldr	r3, [pc, #56]	; (8006370 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006338:	681a      	ldr	r2, [r3, #0]
 800633a:	4b0a      	ldr	r3, [pc, #40]	; (8006364 <prvAddCurrentTaskToDelayedList+0x94>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	3304      	adds	r3, #4
 8006340:	4619      	mov	r1, r3
 8006342:	4610      	mov	r0, r2
 8006344:	f7fe fb1f 	bl	8004986 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006348:	4b0a      	ldr	r3, [pc, #40]	; (8006374 <prvAddCurrentTaskToDelayedList+0xa4>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	68ba      	ldr	r2, [r7, #8]
 800634e:	429a      	cmp	r2, r3
 8006350:	d202      	bcs.n	8006358 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006352:	4a08      	ldr	r2, [pc, #32]	; (8006374 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	6013      	str	r3, [r2, #0]
}
 8006358:	bf00      	nop
 800635a:	3710      	adds	r7, #16
 800635c:	46bd      	mov	sp, r7
 800635e:	bd80      	pop	{r7, pc}
 8006360:	20001994 	.word	0x20001994
 8006364:	200014bc 	.word	0x200014bc
 8006368:	2000197c 	.word	0x2000197c
 800636c:	2000194c 	.word	0x2000194c
 8006370:	20001948 	.word	0x20001948
 8006374:	200019b0 	.word	0x200019b0

08006378 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b08a      	sub	sp, #40	; 0x28
 800637c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800637e:	2300      	movs	r3, #0
 8006380:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006382:	f000 fb07 	bl	8006994 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006386:	4b1c      	ldr	r3, [pc, #112]	; (80063f8 <xTimerCreateTimerTask+0x80>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d021      	beq.n	80063d2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800638e:	2300      	movs	r3, #0
 8006390:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006392:	2300      	movs	r3, #0
 8006394:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006396:	1d3a      	adds	r2, r7, #4
 8006398:	f107 0108 	add.w	r1, r7, #8
 800639c:	f107 030c 	add.w	r3, r7, #12
 80063a0:	4618      	mov	r0, r3
 80063a2:	f7fe fa85 	bl	80048b0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80063a6:	6879      	ldr	r1, [r7, #4]
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	68fa      	ldr	r2, [r7, #12]
 80063ac:	9202      	str	r2, [sp, #8]
 80063ae:	9301      	str	r3, [sp, #4]
 80063b0:	2302      	movs	r3, #2
 80063b2:	9300      	str	r3, [sp, #0]
 80063b4:	2300      	movs	r3, #0
 80063b6:	460a      	mov	r2, r1
 80063b8:	4910      	ldr	r1, [pc, #64]	; (80063fc <xTimerCreateTimerTask+0x84>)
 80063ba:	4811      	ldr	r0, [pc, #68]	; (8006400 <xTimerCreateTimerTask+0x88>)
 80063bc:	f7ff f892 	bl	80054e4 <xTaskCreateStatic>
 80063c0:	4603      	mov	r3, r0
 80063c2:	4a10      	ldr	r2, [pc, #64]	; (8006404 <xTimerCreateTimerTask+0x8c>)
 80063c4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80063c6:	4b0f      	ldr	r3, [pc, #60]	; (8006404 <xTimerCreateTimerTask+0x8c>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d001      	beq.n	80063d2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80063ce:	2301      	movs	r3, #1
 80063d0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d10a      	bne.n	80063ee <xTimerCreateTimerTask+0x76>
	__asm volatile
 80063d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063dc:	f383 8811 	msr	BASEPRI, r3
 80063e0:	f3bf 8f6f 	isb	sy
 80063e4:	f3bf 8f4f 	dsb	sy
 80063e8:	613b      	str	r3, [r7, #16]
}
 80063ea:	bf00      	nop
 80063ec:	e7fe      	b.n	80063ec <xTimerCreateTimerTask+0x74>
	return xReturn;
 80063ee:	697b      	ldr	r3, [r7, #20]
}
 80063f0:	4618      	mov	r0, r3
 80063f2:	3718      	adds	r7, #24
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bd80      	pop	{r7, pc}
 80063f8:	200019f4 	.word	0x200019f4
 80063fc:	08007610 	.word	0x08007610
 8006400:	0800653d 	.word	0x0800653d
 8006404:	200019f8 	.word	0x200019f8

08006408 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b08a      	sub	sp, #40	; 0x28
 800640c:	af00      	add	r7, sp, #0
 800640e:	60f8      	str	r0, [r7, #12]
 8006410:	60b9      	str	r1, [r7, #8]
 8006412:	607a      	str	r2, [r7, #4]
 8006414:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006416:	2300      	movs	r3, #0
 8006418:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d10a      	bne.n	8006436 <xTimerGenericCommand+0x2e>
	__asm volatile
 8006420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006424:	f383 8811 	msr	BASEPRI, r3
 8006428:	f3bf 8f6f 	isb	sy
 800642c:	f3bf 8f4f 	dsb	sy
 8006430:	623b      	str	r3, [r7, #32]
}
 8006432:	bf00      	nop
 8006434:	e7fe      	b.n	8006434 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006436:	4b1a      	ldr	r3, [pc, #104]	; (80064a0 <xTimerGenericCommand+0x98>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d02a      	beq.n	8006494 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	2b05      	cmp	r3, #5
 800644e:	dc18      	bgt.n	8006482 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006450:	f7ff feb2 	bl	80061b8 <xTaskGetSchedulerState>
 8006454:	4603      	mov	r3, r0
 8006456:	2b02      	cmp	r3, #2
 8006458:	d109      	bne.n	800646e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800645a:	4b11      	ldr	r3, [pc, #68]	; (80064a0 <xTimerGenericCommand+0x98>)
 800645c:	6818      	ldr	r0, [r3, #0]
 800645e:	f107 0110 	add.w	r1, r7, #16
 8006462:	2300      	movs	r3, #0
 8006464:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006466:	f7fe fc2f 	bl	8004cc8 <xQueueGenericSend>
 800646a:	6278      	str	r0, [r7, #36]	; 0x24
 800646c:	e012      	b.n	8006494 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800646e:	4b0c      	ldr	r3, [pc, #48]	; (80064a0 <xTimerGenericCommand+0x98>)
 8006470:	6818      	ldr	r0, [r3, #0]
 8006472:	f107 0110 	add.w	r1, r7, #16
 8006476:	2300      	movs	r3, #0
 8006478:	2200      	movs	r2, #0
 800647a:	f7fe fc25 	bl	8004cc8 <xQueueGenericSend>
 800647e:	6278      	str	r0, [r7, #36]	; 0x24
 8006480:	e008      	b.n	8006494 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006482:	4b07      	ldr	r3, [pc, #28]	; (80064a0 <xTimerGenericCommand+0x98>)
 8006484:	6818      	ldr	r0, [r3, #0]
 8006486:	f107 0110 	add.w	r1, r7, #16
 800648a:	2300      	movs	r3, #0
 800648c:	683a      	ldr	r2, [r7, #0]
 800648e:	f7fe fd19 	bl	8004ec4 <xQueueGenericSendFromISR>
 8006492:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006496:	4618      	mov	r0, r3
 8006498:	3728      	adds	r7, #40	; 0x28
 800649a:	46bd      	mov	sp, r7
 800649c:	bd80      	pop	{r7, pc}
 800649e:	bf00      	nop
 80064a0:	200019f4 	.word	0x200019f4

080064a4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b088      	sub	sp, #32
 80064a8:	af02      	add	r7, sp, #8
 80064aa:	6078      	str	r0, [r7, #4]
 80064ac:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80064ae:	4b22      	ldr	r3, [pc, #136]	; (8006538 <prvProcessExpiredTimer+0x94>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	68db      	ldr	r3, [r3, #12]
 80064b4:	68db      	ldr	r3, [r3, #12]
 80064b6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80064b8:	697b      	ldr	r3, [r7, #20]
 80064ba:	3304      	adds	r3, #4
 80064bc:	4618      	mov	r0, r3
 80064be:	f7fe fa9b 	bl	80049f8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80064c8:	f003 0304 	and.w	r3, r3, #4
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d022      	beq.n	8006516 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	699a      	ldr	r2, [r3, #24]
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	18d1      	adds	r1, r2, r3
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	683a      	ldr	r2, [r7, #0]
 80064dc:	6978      	ldr	r0, [r7, #20]
 80064de:	f000 f8d1 	bl	8006684 <prvInsertTimerInActiveList>
 80064e2:	4603      	mov	r3, r0
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d01f      	beq.n	8006528 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80064e8:	2300      	movs	r3, #0
 80064ea:	9300      	str	r3, [sp, #0]
 80064ec:	2300      	movs	r3, #0
 80064ee:	687a      	ldr	r2, [r7, #4]
 80064f0:	2100      	movs	r1, #0
 80064f2:	6978      	ldr	r0, [r7, #20]
 80064f4:	f7ff ff88 	bl	8006408 <xTimerGenericCommand>
 80064f8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80064fa:	693b      	ldr	r3, [r7, #16]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d113      	bne.n	8006528 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006504:	f383 8811 	msr	BASEPRI, r3
 8006508:	f3bf 8f6f 	isb	sy
 800650c:	f3bf 8f4f 	dsb	sy
 8006510:	60fb      	str	r3, [r7, #12]
}
 8006512:	bf00      	nop
 8006514:	e7fe      	b.n	8006514 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006516:	697b      	ldr	r3, [r7, #20]
 8006518:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800651c:	f023 0301 	bic.w	r3, r3, #1
 8006520:	b2da      	uxtb	r2, r3
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006528:	697b      	ldr	r3, [r7, #20]
 800652a:	6a1b      	ldr	r3, [r3, #32]
 800652c:	6978      	ldr	r0, [r7, #20]
 800652e:	4798      	blx	r3
}
 8006530:	bf00      	nop
 8006532:	3718      	adds	r7, #24
 8006534:	46bd      	mov	sp, r7
 8006536:	bd80      	pop	{r7, pc}
 8006538:	200019ec 	.word	0x200019ec

0800653c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b084      	sub	sp, #16
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006544:	f107 0308 	add.w	r3, r7, #8
 8006548:	4618      	mov	r0, r3
 800654a:	f000 f857 	bl	80065fc <prvGetNextExpireTime>
 800654e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	4619      	mov	r1, r3
 8006554:	68f8      	ldr	r0, [r7, #12]
 8006556:	f000 f803 	bl	8006560 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800655a:	f000 f8d5 	bl	8006708 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800655e:	e7f1      	b.n	8006544 <prvTimerTask+0x8>

08006560 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b084      	sub	sp, #16
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
 8006568:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800656a:	f7ff fa1d 	bl	80059a8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800656e:	f107 0308 	add.w	r3, r7, #8
 8006572:	4618      	mov	r0, r3
 8006574:	f000 f866 	bl	8006644 <prvSampleTimeNow>
 8006578:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d130      	bne.n	80065e2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d10a      	bne.n	800659c <prvProcessTimerOrBlockTask+0x3c>
 8006586:	687a      	ldr	r2, [r7, #4]
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	429a      	cmp	r2, r3
 800658c:	d806      	bhi.n	800659c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800658e:	f7ff fa19 	bl	80059c4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006592:	68f9      	ldr	r1, [r7, #12]
 8006594:	6878      	ldr	r0, [r7, #4]
 8006596:	f7ff ff85 	bl	80064a4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800659a:	e024      	b.n	80065e6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d008      	beq.n	80065b4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80065a2:	4b13      	ldr	r3, [pc, #76]	; (80065f0 <prvProcessTimerOrBlockTask+0x90>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d101      	bne.n	80065b0 <prvProcessTimerOrBlockTask+0x50>
 80065ac:	2301      	movs	r3, #1
 80065ae:	e000      	b.n	80065b2 <prvProcessTimerOrBlockTask+0x52>
 80065b0:	2300      	movs	r3, #0
 80065b2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80065b4:	4b0f      	ldr	r3, [pc, #60]	; (80065f4 <prvProcessTimerOrBlockTask+0x94>)
 80065b6:	6818      	ldr	r0, [r3, #0]
 80065b8:	687a      	ldr	r2, [r7, #4]
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	1ad3      	subs	r3, r2, r3
 80065be:	683a      	ldr	r2, [r7, #0]
 80065c0:	4619      	mov	r1, r3
 80065c2:	f7fe ff5b 	bl	800547c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80065c6:	f7ff f9fd 	bl	80059c4 <xTaskResumeAll>
 80065ca:	4603      	mov	r3, r0
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d10a      	bne.n	80065e6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80065d0:	4b09      	ldr	r3, [pc, #36]	; (80065f8 <prvProcessTimerOrBlockTask+0x98>)
 80065d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065d6:	601a      	str	r2, [r3, #0]
 80065d8:	f3bf 8f4f 	dsb	sy
 80065dc:	f3bf 8f6f 	isb	sy
}
 80065e0:	e001      	b.n	80065e6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80065e2:	f7ff f9ef 	bl	80059c4 <xTaskResumeAll>
}
 80065e6:	bf00      	nop
 80065e8:	3710      	adds	r7, #16
 80065ea:	46bd      	mov	sp, r7
 80065ec:	bd80      	pop	{r7, pc}
 80065ee:	bf00      	nop
 80065f0:	200019f0 	.word	0x200019f0
 80065f4:	200019f4 	.word	0x200019f4
 80065f8:	e000ed04 	.word	0xe000ed04

080065fc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80065fc:	b480      	push	{r7}
 80065fe:	b085      	sub	sp, #20
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006604:	4b0e      	ldr	r3, [pc, #56]	; (8006640 <prvGetNextExpireTime+0x44>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d101      	bne.n	8006612 <prvGetNextExpireTime+0x16>
 800660e:	2201      	movs	r2, #1
 8006610:	e000      	b.n	8006614 <prvGetNextExpireTime+0x18>
 8006612:	2200      	movs	r2, #0
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d105      	bne.n	800662c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006620:	4b07      	ldr	r3, [pc, #28]	; (8006640 <prvGetNextExpireTime+0x44>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	68db      	ldr	r3, [r3, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	60fb      	str	r3, [r7, #12]
 800662a:	e001      	b.n	8006630 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800662c:	2300      	movs	r3, #0
 800662e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006630:	68fb      	ldr	r3, [r7, #12]
}
 8006632:	4618      	mov	r0, r3
 8006634:	3714      	adds	r7, #20
 8006636:	46bd      	mov	sp, r7
 8006638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663c:	4770      	bx	lr
 800663e:	bf00      	nop
 8006640:	200019ec 	.word	0x200019ec

08006644 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b084      	sub	sp, #16
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800664c:	f7ff fa58 	bl	8005b00 <xTaskGetTickCount>
 8006650:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006652:	4b0b      	ldr	r3, [pc, #44]	; (8006680 <prvSampleTimeNow+0x3c>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	68fa      	ldr	r2, [r7, #12]
 8006658:	429a      	cmp	r2, r3
 800665a:	d205      	bcs.n	8006668 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800665c:	f000 f936 	bl	80068cc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2201      	movs	r2, #1
 8006664:	601a      	str	r2, [r3, #0]
 8006666:	e002      	b.n	800666e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2200      	movs	r2, #0
 800666c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800666e:	4a04      	ldr	r2, [pc, #16]	; (8006680 <prvSampleTimeNow+0x3c>)
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006674:	68fb      	ldr	r3, [r7, #12]
}
 8006676:	4618      	mov	r0, r3
 8006678:	3710      	adds	r7, #16
 800667a:	46bd      	mov	sp, r7
 800667c:	bd80      	pop	{r7, pc}
 800667e:	bf00      	nop
 8006680:	200019fc 	.word	0x200019fc

08006684 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b086      	sub	sp, #24
 8006688:	af00      	add	r7, sp, #0
 800668a:	60f8      	str	r0, [r7, #12]
 800668c:	60b9      	str	r1, [r7, #8]
 800668e:	607a      	str	r2, [r7, #4]
 8006690:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006692:	2300      	movs	r3, #0
 8006694:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	68ba      	ldr	r2, [r7, #8]
 800669a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	68fa      	ldr	r2, [r7, #12]
 80066a0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80066a2:	68ba      	ldr	r2, [r7, #8]
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	429a      	cmp	r2, r3
 80066a8:	d812      	bhi.n	80066d0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80066aa:	687a      	ldr	r2, [r7, #4]
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	1ad2      	subs	r2, r2, r3
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	699b      	ldr	r3, [r3, #24]
 80066b4:	429a      	cmp	r2, r3
 80066b6:	d302      	bcc.n	80066be <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80066b8:	2301      	movs	r3, #1
 80066ba:	617b      	str	r3, [r7, #20]
 80066bc:	e01b      	b.n	80066f6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80066be:	4b10      	ldr	r3, [pc, #64]	; (8006700 <prvInsertTimerInActiveList+0x7c>)
 80066c0:	681a      	ldr	r2, [r3, #0]
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	3304      	adds	r3, #4
 80066c6:	4619      	mov	r1, r3
 80066c8:	4610      	mov	r0, r2
 80066ca:	f7fe f95c 	bl	8004986 <vListInsert>
 80066ce:	e012      	b.n	80066f6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80066d0:	687a      	ldr	r2, [r7, #4]
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	429a      	cmp	r2, r3
 80066d6:	d206      	bcs.n	80066e6 <prvInsertTimerInActiveList+0x62>
 80066d8:	68ba      	ldr	r2, [r7, #8]
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	429a      	cmp	r2, r3
 80066de:	d302      	bcc.n	80066e6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80066e0:	2301      	movs	r3, #1
 80066e2:	617b      	str	r3, [r7, #20]
 80066e4:	e007      	b.n	80066f6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80066e6:	4b07      	ldr	r3, [pc, #28]	; (8006704 <prvInsertTimerInActiveList+0x80>)
 80066e8:	681a      	ldr	r2, [r3, #0]
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	3304      	adds	r3, #4
 80066ee:	4619      	mov	r1, r3
 80066f0:	4610      	mov	r0, r2
 80066f2:	f7fe f948 	bl	8004986 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80066f6:	697b      	ldr	r3, [r7, #20]
}
 80066f8:	4618      	mov	r0, r3
 80066fa:	3718      	adds	r7, #24
 80066fc:	46bd      	mov	sp, r7
 80066fe:	bd80      	pop	{r7, pc}
 8006700:	200019f0 	.word	0x200019f0
 8006704:	200019ec 	.word	0x200019ec

08006708 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b08e      	sub	sp, #56	; 0x38
 800670c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800670e:	e0ca      	b.n	80068a6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2b00      	cmp	r3, #0
 8006714:	da18      	bge.n	8006748 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006716:	1d3b      	adds	r3, r7, #4
 8006718:	3304      	adds	r3, #4
 800671a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800671c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800671e:	2b00      	cmp	r3, #0
 8006720:	d10a      	bne.n	8006738 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006726:	f383 8811 	msr	BASEPRI, r3
 800672a:	f3bf 8f6f 	isb	sy
 800672e:	f3bf 8f4f 	dsb	sy
 8006732:	61fb      	str	r3, [r7, #28]
}
 8006734:	bf00      	nop
 8006736:	e7fe      	b.n	8006736 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800673e:	6850      	ldr	r0, [r2, #4]
 8006740:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006742:	6892      	ldr	r2, [r2, #8]
 8006744:	4611      	mov	r1, r2
 8006746:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2b00      	cmp	r3, #0
 800674c:	f2c0 80ab 	blt.w	80068a6 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006756:	695b      	ldr	r3, [r3, #20]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d004      	beq.n	8006766 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800675c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800675e:	3304      	adds	r3, #4
 8006760:	4618      	mov	r0, r3
 8006762:	f7fe f949 	bl	80049f8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006766:	463b      	mov	r3, r7
 8006768:	4618      	mov	r0, r3
 800676a:	f7ff ff6b 	bl	8006644 <prvSampleTimeNow>
 800676e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2b09      	cmp	r3, #9
 8006774:	f200 8096 	bhi.w	80068a4 <prvProcessReceivedCommands+0x19c>
 8006778:	a201      	add	r2, pc, #4	; (adr r2, 8006780 <prvProcessReceivedCommands+0x78>)
 800677a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800677e:	bf00      	nop
 8006780:	080067a9 	.word	0x080067a9
 8006784:	080067a9 	.word	0x080067a9
 8006788:	080067a9 	.word	0x080067a9
 800678c:	0800681d 	.word	0x0800681d
 8006790:	08006831 	.word	0x08006831
 8006794:	0800687b 	.word	0x0800687b
 8006798:	080067a9 	.word	0x080067a9
 800679c:	080067a9 	.word	0x080067a9
 80067a0:	0800681d 	.word	0x0800681d
 80067a4:	08006831 	.word	0x08006831
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80067a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80067ae:	f043 0301 	orr.w	r3, r3, #1
 80067b2:	b2da      	uxtb	r2, r3
 80067b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80067ba:	68ba      	ldr	r2, [r7, #8]
 80067bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067be:	699b      	ldr	r3, [r3, #24]
 80067c0:	18d1      	adds	r1, r2, r3
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80067c8:	f7ff ff5c 	bl	8006684 <prvInsertTimerInActiveList>
 80067cc:	4603      	mov	r3, r0
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d069      	beq.n	80068a6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80067d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067d4:	6a1b      	ldr	r3, [r3, #32]
 80067d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80067d8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80067da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80067e0:	f003 0304 	and.w	r3, r3, #4
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d05e      	beq.n	80068a6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80067e8:	68ba      	ldr	r2, [r7, #8]
 80067ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ec:	699b      	ldr	r3, [r3, #24]
 80067ee:	441a      	add	r2, r3
 80067f0:	2300      	movs	r3, #0
 80067f2:	9300      	str	r3, [sp, #0]
 80067f4:	2300      	movs	r3, #0
 80067f6:	2100      	movs	r1, #0
 80067f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80067fa:	f7ff fe05 	bl	8006408 <xTimerGenericCommand>
 80067fe:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006800:	6a3b      	ldr	r3, [r7, #32]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d14f      	bne.n	80068a6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8006806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800680a:	f383 8811 	msr	BASEPRI, r3
 800680e:	f3bf 8f6f 	isb	sy
 8006812:	f3bf 8f4f 	dsb	sy
 8006816:	61bb      	str	r3, [r7, #24]
}
 8006818:	bf00      	nop
 800681a:	e7fe      	b.n	800681a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800681c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800681e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006822:	f023 0301 	bic.w	r3, r3, #1
 8006826:	b2da      	uxtb	r2, r3
 8006828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800682a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800682e:	e03a      	b.n	80068a6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006832:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006836:	f043 0301 	orr.w	r3, r3, #1
 800683a:	b2da      	uxtb	r2, r3
 800683c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800683e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006842:	68ba      	ldr	r2, [r7, #8]
 8006844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006846:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800684a:	699b      	ldr	r3, [r3, #24]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d10a      	bne.n	8006866 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006854:	f383 8811 	msr	BASEPRI, r3
 8006858:	f3bf 8f6f 	isb	sy
 800685c:	f3bf 8f4f 	dsb	sy
 8006860:	617b      	str	r3, [r7, #20]
}
 8006862:	bf00      	nop
 8006864:	e7fe      	b.n	8006864 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006868:	699a      	ldr	r2, [r3, #24]
 800686a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800686c:	18d1      	adds	r1, r2, r3
 800686e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006870:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006872:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006874:	f7ff ff06 	bl	8006684 <prvInsertTimerInActiveList>
					break;
 8006878:	e015      	b.n	80068a6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800687a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800687c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006880:	f003 0302 	and.w	r3, r3, #2
 8006884:	2b00      	cmp	r3, #0
 8006886:	d103      	bne.n	8006890 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006888:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800688a:	f000 fbe1 	bl	8007050 <vPortFree>
 800688e:	e00a      	b.n	80068a6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006892:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006896:	f023 0301 	bic.w	r3, r3, #1
 800689a:	b2da      	uxtb	r2, r3
 800689c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800689e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80068a2:	e000      	b.n	80068a6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 80068a4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80068a6:	4b08      	ldr	r3, [pc, #32]	; (80068c8 <prvProcessReceivedCommands+0x1c0>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	1d39      	adds	r1, r7, #4
 80068ac:	2200      	movs	r2, #0
 80068ae:	4618      	mov	r0, r3
 80068b0:	f7fe fba4 	bl	8004ffc <xQueueReceive>
 80068b4:	4603      	mov	r3, r0
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	f47f af2a 	bne.w	8006710 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80068bc:	bf00      	nop
 80068be:	bf00      	nop
 80068c0:	3730      	adds	r7, #48	; 0x30
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd80      	pop	{r7, pc}
 80068c6:	bf00      	nop
 80068c8:	200019f4 	.word	0x200019f4

080068cc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b088      	sub	sp, #32
 80068d0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80068d2:	e048      	b.n	8006966 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80068d4:	4b2d      	ldr	r3, [pc, #180]	; (800698c <prvSwitchTimerLists+0xc0>)
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	68db      	ldr	r3, [r3, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80068de:	4b2b      	ldr	r3, [pc, #172]	; (800698c <prvSwitchTimerLists+0xc0>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	68db      	ldr	r3, [r3, #12]
 80068e4:	68db      	ldr	r3, [r3, #12]
 80068e6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	3304      	adds	r3, #4
 80068ec:	4618      	mov	r0, r3
 80068ee:	f7fe f883 	bl	80049f8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	6a1b      	ldr	r3, [r3, #32]
 80068f6:	68f8      	ldr	r0, [r7, #12]
 80068f8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006900:	f003 0304 	and.w	r3, r3, #4
 8006904:	2b00      	cmp	r3, #0
 8006906:	d02e      	beq.n	8006966 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	699b      	ldr	r3, [r3, #24]
 800690c:	693a      	ldr	r2, [r7, #16]
 800690e:	4413      	add	r3, r2
 8006910:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006912:	68ba      	ldr	r2, [r7, #8]
 8006914:	693b      	ldr	r3, [r7, #16]
 8006916:	429a      	cmp	r2, r3
 8006918:	d90e      	bls.n	8006938 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	68ba      	ldr	r2, [r7, #8]
 800691e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	68fa      	ldr	r2, [r7, #12]
 8006924:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006926:	4b19      	ldr	r3, [pc, #100]	; (800698c <prvSwitchTimerLists+0xc0>)
 8006928:	681a      	ldr	r2, [r3, #0]
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	3304      	adds	r3, #4
 800692e:	4619      	mov	r1, r3
 8006930:	4610      	mov	r0, r2
 8006932:	f7fe f828 	bl	8004986 <vListInsert>
 8006936:	e016      	b.n	8006966 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006938:	2300      	movs	r3, #0
 800693a:	9300      	str	r3, [sp, #0]
 800693c:	2300      	movs	r3, #0
 800693e:	693a      	ldr	r2, [r7, #16]
 8006940:	2100      	movs	r1, #0
 8006942:	68f8      	ldr	r0, [r7, #12]
 8006944:	f7ff fd60 	bl	8006408 <xTimerGenericCommand>
 8006948:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d10a      	bne.n	8006966 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006954:	f383 8811 	msr	BASEPRI, r3
 8006958:	f3bf 8f6f 	isb	sy
 800695c:	f3bf 8f4f 	dsb	sy
 8006960:	603b      	str	r3, [r7, #0]
}
 8006962:	bf00      	nop
 8006964:	e7fe      	b.n	8006964 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006966:	4b09      	ldr	r3, [pc, #36]	; (800698c <prvSwitchTimerLists+0xc0>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d1b1      	bne.n	80068d4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006970:	4b06      	ldr	r3, [pc, #24]	; (800698c <prvSwitchTimerLists+0xc0>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006976:	4b06      	ldr	r3, [pc, #24]	; (8006990 <prvSwitchTimerLists+0xc4>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	4a04      	ldr	r2, [pc, #16]	; (800698c <prvSwitchTimerLists+0xc0>)
 800697c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800697e:	4a04      	ldr	r2, [pc, #16]	; (8006990 <prvSwitchTimerLists+0xc4>)
 8006980:	697b      	ldr	r3, [r7, #20]
 8006982:	6013      	str	r3, [r2, #0]
}
 8006984:	bf00      	nop
 8006986:	3718      	adds	r7, #24
 8006988:	46bd      	mov	sp, r7
 800698a:	bd80      	pop	{r7, pc}
 800698c:	200019ec 	.word	0x200019ec
 8006990:	200019f0 	.word	0x200019f0

08006994 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b082      	sub	sp, #8
 8006998:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800699a:	f000 f96b 	bl	8006c74 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800699e:	4b15      	ldr	r3, [pc, #84]	; (80069f4 <prvCheckForValidListAndQueue+0x60>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d120      	bne.n	80069e8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80069a6:	4814      	ldr	r0, [pc, #80]	; (80069f8 <prvCheckForValidListAndQueue+0x64>)
 80069a8:	f7fd ff9c 	bl	80048e4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80069ac:	4813      	ldr	r0, [pc, #76]	; (80069fc <prvCheckForValidListAndQueue+0x68>)
 80069ae:	f7fd ff99 	bl	80048e4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80069b2:	4b13      	ldr	r3, [pc, #76]	; (8006a00 <prvCheckForValidListAndQueue+0x6c>)
 80069b4:	4a10      	ldr	r2, [pc, #64]	; (80069f8 <prvCheckForValidListAndQueue+0x64>)
 80069b6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80069b8:	4b12      	ldr	r3, [pc, #72]	; (8006a04 <prvCheckForValidListAndQueue+0x70>)
 80069ba:	4a10      	ldr	r2, [pc, #64]	; (80069fc <prvCheckForValidListAndQueue+0x68>)
 80069bc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80069be:	2300      	movs	r3, #0
 80069c0:	9300      	str	r3, [sp, #0]
 80069c2:	4b11      	ldr	r3, [pc, #68]	; (8006a08 <prvCheckForValidListAndQueue+0x74>)
 80069c4:	4a11      	ldr	r2, [pc, #68]	; (8006a0c <prvCheckForValidListAndQueue+0x78>)
 80069c6:	2110      	movs	r1, #16
 80069c8:	200a      	movs	r0, #10
 80069ca:	f7fe f8a7 	bl	8004b1c <xQueueGenericCreateStatic>
 80069ce:	4603      	mov	r3, r0
 80069d0:	4a08      	ldr	r2, [pc, #32]	; (80069f4 <prvCheckForValidListAndQueue+0x60>)
 80069d2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80069d4:	4b07      	ldr	r3, [pc, #28]	; (80069f4 <prvCheckForValidListAndQueue+0x60>)
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d005      	beq.n	80069e8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80069dc:	4b05      	ldr	r3, [pc, #20]	; (80069f4 <prvCheckForValidListAndQueue+0x60>)
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	490b      	ldr	r1, [pc, #44]	; (8006a10 <prvCheckForValidListAndQueue+0x7c>)
 80069e2:	4618      	mov	r0, r3
 80069e4:	f7fe fcfa 	bl	80053dc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80069e8:	f000 f974 	bl	8006cd4 <vPortExitCritical>
}
 80069ec:	bf00      	nop
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}
 80069f2:	bf00      	nop
 80069f4:	200019f4 	.word	0x200019f4
 80069f8:	200019c4 	.word	0x200019c4
 80069fc:	200019d8 	.word	0x200019d8
 8006a00:	200019ec 	.word	0x200019ec
 8006a04:	200019f0 	.word	0x200019f0
 8006a08:	20001aa0 	.word	0x20001aa0
 8006a0c:	20001a00 	.word	0x20001a00
 8006a10:	08007618 	.word	0x08007618

08006a14 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006a14:	b480      	push	{r7}
 8006a16:	b085      	sub	sp, #20
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	60f8      	str	r0, [r7, #12]
 8006a1c:	60b9      	str	r1, [r7, #8]
 8006a1e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	3b04      	subs	r3, #4
 8006a24:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006a2c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	3b04      	subs	r3, #4
 8006a32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	f023 0201 	bic.w	r2, r3, #1
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	3b04      	subs	r3, #4
 8006a42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006a44:	4a0c      	ldr	r2, [pc, #48]	; (8006a78 <pxPortInitialiseStack+0x64>)
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	3b14      	subs	r3, #20
 8006a4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006a50:	687a      	ldr	r2, [r7, #4]
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	3b04      	subs	r3, #4
 8006a5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	f06f 0202 	mvn.w	r2, #2
 8006a62:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	3b20      	subs	r3, #32
 8006a68:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
}
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	3714      	adds	r7, #20
 8006a70:	46bd      	mov	sp, r7
 8006a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a76:	4770      	bx	lr
 8006a78:	08006a7d 	.word	0x08006a7d

08006a7c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	b085      	sub	sp, #20
 8006a80:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006a82:	2300      	movs	r3, #0
 8006a84:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006a86:	4b12      	ldr	r3, [pc, #72]	; (8006ad0 <prvTaskExitError+0x54>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a8e:	d00a      	beq.n	8006aa6 <prvTaskExitError+0x2a>
	__asm volatile
 8006a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a94:	f383 8811 	msr	BASEPRI, r3
 8006a98:	f3bf 8f6f 	isb	sy
 8006a9c:	f3bf 8f4f 	dsb	sy
 8006aa0:	60fb      	str	r3, [r7, #12]
}
 8006aa2:	bf00      	nop
 8006aa4:	e7fe      	b.n	8006aa4 <prvTaskExitError+0x28>
	__asm volatile
 8006aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aaa:	f383 8811 	msr	BASEPRI, r3
 8006aae:	f3bf 8f6f 	isb	sy
 8006ab2:	f3bf 8f4f 	dsb	sy
 8006ab6:	60bb      	str	r3, [r7, #8]
}
 8006ab8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006aba:	bf00      	nop
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d0fc      	beq.n	8006abc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006ac2:	bf00      	nop
 8006ac4:	bf00      	nop
 8006ac6:	3714      	adds	r7, #20
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ace:	4770      	bx	lr
 8006ad0:	2000000c 	.word	0x2000000c
	...

08006ae0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006ae0:	4b07      	ldr	r3, [pc, #28]	; (8006b00 <pxCurrentTCBConst2>)
 8006ae2:	6819      	ldr	r1, [r3, #0]
 8006ae4:	6808      	ldr	r0, [r1, #0]
 8006ae6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006aea:	f380 8809 	msr	PSP, r0
 8006aee:	f3bf 8f6f 	isb	sy
 8006af2:	f04f 0000 	mov.w	r0, #0
 8006af6:	f380 8811 	msr	BASEPRI, r0
 8006afa:	4770      	bx	lr
 8006afc:	f3af 8000 	nop.w

08006b00 <pxCurrentTCBConst2>:
 8006b00:	200014bc 	.word	0x200014bc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006b04:	bf00      	nop
 8006b06:	bf00      	nop

08006b08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006b08:	4808      	ldr	r0, [pc, #32]	; (8006b2c <prvPortStartFirstTask+0x24>)
 8006b0a:	6800      	ldr	r0, [r0, #0]
 8006b0c:	6800      	ldr	r0, [r0, #0]
 8006b0e:	f380 8808 	msr	MSP, r0
 8006b12:	f04f 0000 	mov.w	r0, #0
 8006b16:	f380 8814 	msr	CONTROL, r0
 8006b1a:	b662      	cpsie	i
 8006b1c:	b661      	cpsie	f
 8006b1e:	f3bf 8f4f 	dsb	sy
 8006b22:	f3bf 8f6f 	isb	sy
 8006b26:	df00      	svc	0
 8006b28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006b2a:	bf00      	nop
 8006b2c:	e000ed08 	.word	0xe000ed08

08006b30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b086      	sub	sp, #24
 8006b34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006b36:	4b46      	ldr	r3, [pc, #280]	; (8006c50 <xPortStartScheduler+0x120>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	4a46      	ldr	r2, [pc, #280]	; (8006c54 <xPortStartScheduler+0x124>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d10a      	bne.n	8006b56 <xPortStartScheduler+0x26>
	__asm volatile
 8006b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b44:	f383 8811 	msr	BASEPRI, r3
 8006b48:	f3bf 8f6f 	isb	sy
 8006b4c:	f3bf 8f4f 	dsb	sy
 8006b50:	613b      	str	r3, [r7, #16]
}
 8006b52:	bf00      	nop
 8006b54:	e7fe      	b.n	8006b54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006b56:	4b3e      	ldr	r3, [pc, #248]	; (8006c50 <xPortStartScheduler+0x120>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4a3f      	ldr	r2, [pc, #252]	; (8006c58 <xPortStartScheduler+0x128>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d10a      	bne.n	8006b76 <xPortStartScheduler+0x46>
	__asm volatile
 8006b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b64:	f383 8811 	msr	BASEPRI, r3
 8006b68:	f3bf 8f6f 	isb	sy
 8006b6c:	f3bf 8f4f 	dsb	sy
 8006b70:	60fb      	str	r3, [r7, #12]
}
 8006b72:	bf00      	nop
 8006b74:	e7fe      	b.n	8006b74 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006b76:	4b39      	ldr	r3, [pc, #228]	; (8006c5c <xPortStartScheduler+0x12c>)
 8006b78:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006b7a:	697b      	ldr	r3, [r7, #20]
 8006b7c:	781b      	ldrb	r3, [r3, #0]
 8006b7e:	b2db      	uxtb	r3, r3
 8006b80:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006b82:	697b      	ldr	r3, [r7, #20]
 8006b84:	22ff      	movs	r2, #255	; 0xff
 8006b86:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006b88:	697b      	ldr	r3, [r7, #20]
 8006b8a:	781b      	ldrb	r3, [r3, #0]
 8006b8c:	b2db      	uxtb	r3, r3
 8006b8e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006b90:	78fb      	ldrb	r3, [r7, #3]
 8006b92:	b2db      	uxtb	r3, r3
 8006b94:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006b98:	b2da      	uxtb	r2, r3
 8006b9a:	4b31      	ldr	r3, [pc, #196]	; (8006c60 <xPortStartScheduler+0x130>)
 8006b9c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006b9e:	4b31      	ldr	r3, [pc, #196]	; (8006c64 <xPortStartScheduler+0x134>)
 8006ba0:	2207      	movs	r2, #7
 8006ba2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006ba4:	e009      	b.n	8006bba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006ba6:	4b2f      	ldr	r3, [pc, #188]	; (8006c64 <xPortStartScheduler+0x134>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	3b01      	subs	r3, #1
 8006bac:	4a2d      	ldr	r2, [pc, #180]	; (8006c64 <xPortStartScheduler+0x134>)
 8006bae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006bb0:	78fb      	ldrb	r3, [r7, #3]
 8006bb2:	b2db      	uxtb	r3, r3
 8006bb4:	005b      	lsls	r3, r3, #1
 8006bb6:	b2db      	uxtb	r3, r3
 8006bb8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006bba:	78fb      	ldrb	r3, [r7, #3]
 8006bbc:	b2db      	uxtb	r3, r3
 8006bbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bc2:	2b80      	cmp	r3, #128	; 0x80
 8006bc4:	d0ef      	beq.n	8006ba6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006bc6:	4b27      	ldr	r3, [pc, #156]	; (8006c64 <xPortStartScheduler+0x134>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f1c3 0307 	rsb	r3, r3, #7
 8006bce:	2b04      	cmp	r3, #4
 8006bd0:	d00a      	beq.n	8006be8 <xPortStartScheduler+0xb8>
	__asm volatile
 8006bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bd6:	f383 8811 	msr	BASEPRI, r3
 8006bda:	f3bf 8f6f 	isb	sy
 8006bde:	f3bf 8f4f 	dsb	sy
 8006be2:	60bb      	str	r3, [r7, #8]
}
 8006be4:	bf00      	nop
 8006be6:	e7fe      	b.n	8006be6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006be8:	4b1e      	ldr	r3, [pc, #120]	; (8006c64 <xPortStartScheduler+0x134>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	021b      	lsls	r3, r3, #8
 8006bee:	4a1d      	ldr	r2, [pc, #116]	; (8006c64 <xPortStartScheduler+0x134>)
 8006bf0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006bf2:	4b1c      	ldr	r3, [pc, #112]	; (8006c64 <xPortStartScheduler+0x134>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006bfa:	4a1a      	ldr	r2, [pc, #104]	; (8006c64 <xPortStartScheduler+0x134>)
 8006bfc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	b2da      	uxtb	r2, r3
 8006c02:	697b      	ldr	r3, [r7, #20]
 8006c04:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006c06:	4b18      	ldr	r3, [pc, #96]	; (8006c68 <xPortStartScheduler+0x138>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4a17      	ldr	r2, [pc, #92]	; (8006c68 <xPortStartScheduler+0x138>)
 8006c0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006c10:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006c12:	4b15      	ldr	r3, [pc, #84]	; (8006c68 <xPortStartScheduler+0x138>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4a14      	ldr	r2, [pc, #80]	; (8006c68 <xPortStartScheduler+0x138>)
 8006c18:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006c1c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006c1e:	f000 f8dd 	bl	8006ddc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006c22:	4b12      	ldr	r3, [pc, #72]	; (8006c6c <xPortStartScheduler+0x13c>)
 8006c24:	2200      	movs	r2, #0
 8006c26:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006c28:	f000 f8fc 	bl	8006e24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006c2c:	4b10      	ldr	r3, [pc, #64]	; (8006c70 <xPortStartScheduler+0x140>)
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	4a0f      	ldr	r2, [pc, #60]	; (8006c70 <xPortStartScheduler+0x140>)
 8006c32:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006c36:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006c38:	f7ff ff66 	bl	8006b08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006c3c:	f7ff f82a 	bl	8005c94 <vTaskSwitchContext>
	prvTaskExitError();
 8006c40:	f7ff ff1c 	bl	8006a7c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006c44:	2300      	movs	r3, #0
}
 8006c46:	4618      	mov	r0, r3
 8006c48:	3718      	adds	r7, #24
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bd80      	pop	{r7, pc}
 8006c4e:	bf00      	nop
 8006c50:	e000ed00 	.word	0xe000ed00
 8006c54:	410fc271 	.word	0x410fc271
 8006c58:	410fc270 	.word	0x410fc270
 8006c5c:	e000e400 	.word	0xe000e400
 8006c60:	20001af0 	.word	0x20001af0
 8006c64:	20001af4 	.word	0x20001af4
 8006c68:	e000ed20 	.word	0xe000ed20
 8006c6c:	2000000c 	.word	0x2000000c
 8006c70:	e000ef34 	.word	0xe000ef34

08006c74 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006c74:	b480      	push	{r7}
 8006c76:	b083      	sub	sp, #12
 8006c78:	af00      	add	r7, sp, #0
	__asm volatile
 8006c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c7e:	f383 8811 	msr	BASEPRI, r3
 8006c82:	f3bf 8f6f 	isb	sy
 8006c86:	f3bf 8f4f 	dsb	sy
 8006c8a:	607b      	str	r3, [r7, #4]
}
 8006c8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006c8e:	4b0f      	ldr	r3, [pc, #60]	; (8006ccc <vPortEnterCritical+0x58>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	3301      	adds	r3, #1
 8006c94:	4a0d      	ldr	r2, [pc, #52]	; (8006ccc <vPortEnterCritical+0x58>)
 8006c96:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006c98:	4b0c      	ldr	r3, [pc, #48]	; (8006ccc <vPortEnterCritical+0x58>)
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	2b01      	cmp	r3, #1
 8006c9e:	d10f      	bne.n	8006cc0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006ca0:	4b0b      	ldr	r3, [pc, #44]	; (8006cd0 <vPortEnterCritical+0x5c>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	b2db      	uxtb	r3, r3
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d00a      	beq.n	8006cc0 <vPortEnterCritical+0x4c>
	__asm volatile
 8006caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cae:	f383 8811 	msr	BASEPRI, r3
 8006cb2:	f3bf 8f6f 	isb	sy
 8006cb6:	f3bf 8f4f 	dsb	sy
 8006cba:	603b      	str	r3, [r7, #0]
}
 8006cbc:	bf00      	nop
 8006cbe:	e7fe      	b.n	8006cbe <vPortEnterCritical+0x4a>
	}
}
 8006cc0:	bf00      	nop
 8006cc2:	370c      	adds	r7, #12
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cca:	4770      	bx	lr
 8006ccc:	2000000c 	.word	0x2000000c
 8006cd0:	e000ed04 	.word	0xe000ed04

08006cd4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b083      	sub	sp, #12
 8006cd8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006cda:	4b12      	ldr	r3, [pc, #72]	; (8006d24 <vPortExitCritical+0x50>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d10a      	bne.n	8006cf8 <vPortExitCritical+0x24>
	__asm volatile
 8006ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ce6:	f383 8811 	msr	BASEPRI, r3
 8006cea:	f3bf 8f6f 	isb	sy
 8006cee:	f3bf 8f4f 	dsb	sy
 8006cf2:	607b      	str	r3, [r7, #4]
}
 8006cf4:	bf00      	nop
 8006cf6:	e7fe      	b.n	8006cf6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006cf8:	4b0a      	ldr	r3, [pc, #40]	; (8006d24 <vPortExitCritical+0x50>)
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	3b01      	subs	r3, #1
 8006cfe:	4a09      	ldr	r2, [pc, #36]	; (8006d24 <vPortExitCritical+0x50>)
 8006d00:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006d02:	4b08      	ldr	r3, [pc, #32]	; (8006d24 <vPortExitCritical+0x50>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d105      	bne.n	8006d16 <vPortExitCritical+0x42>
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	f383 8811 	msr	BASEPRI, r3
}
 8006d14:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006d16:	bf00      	nop
 8006d18:	370c      	adds	r7, #12
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d20:	4770      	bx	lr
 8006d22:	bf00      	nop
 8006d24:	2000000c 	.word	0x2000000c
	...

08006d30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006d30:	f3ef 8009 	mrs	r0, PSP
 8006d34:	f3bf 8f6f 	isb	sy
 8006d38:	4b15      	ldr	r3, [pc, #84]	; (8006d90 <pxCurrentTCBConst>)
 8006d3a:	681a      	ldr	r2, [r3, #0]
 8006d3c:	f01e 0f10 	tst.w	lr, #16
 8006d40:	bf08      	it	eq
 8006d42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006d46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d4a:	6010      	str	r0, [r2, #0]
 8006d4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006d50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006d54:	f380 8811 	msr	BASEPRI, r0
 8006d58:	f3bf 8f4f 	dsb	sy
 8006d5c:	f3bf 8f6f 	isb	sy
 8006d60:	f7fe ff98 	bl	8005c94 <vTaskSwitchContext>
 8006d64:	f04f 0000 	mov.w	r0, #0
 8006d68:	f380 8811 	msr	BASEPRI, r0
 8006d6c:	bc09      	pop	{r0, r3}
 8006d6e:	6819      	ldr	r1, [r3, #0]
 8006d70:	6808      	ldr	r0, [r1, #0]
 8006d72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d76:	f01e 0f10 	tst.w	lr, #16
 8006d7a:	bf08      	it	eq
 8006d7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006d80:	f380 8809 	msr	PSP, r0
 8006d84:	f3bf 8f6f 	isb	sy
 8006d88:	4770      	bx	lr
 8006d8a:	bf00      	nop
 8006d8c:	f3af 8000 	nop.w

08006d90 <pxCurrentTCBConst>:
 8006d90:	200014bc 	.word	0x200014bc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006d94:	bf00      	nop
 8006d96:	bf00      	nop

08006d98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b082      	sub	sp, #8
 8006d9c:	af00      	add	r7, sp, #0
	__asm volatile
 8006d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006da2:	f383 8811 	msr	BASEPRI, r3
 8006da6:	f3bf 8f6f 	isb	sy
 8006daa:	f3bf 8f4f 	dsb	sy
 8006dae:	607b      	str	r3, [r7, #4]
}
 8006db0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006db2:	f7fe feb5 	bl	8005b20 <xTaskIncrementTick>
 8006db6:	4603      	mov	r3, r0
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d003      	beq.n	8006dc4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006dbc:	4b06      	ldr	r3, [pc, #24]	; (8006dd8 <xPortSysTickHandler+0x40>)
 8006dbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006dc2:	601a      	str	r2, [r3, #0]
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	f383 8811 	msr	BASEPRI, r3
}
 8006dce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006dd0:	bf00      	nop
 8006dd2:	3708      	adds	r7, #8
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	bd80      	pop	{r7, pc}
 8006dd8:	e000ed04 	.word	0xe000ed04

08006ddc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006ddc:	b480      	push	{r7}
 8006dde:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006de0:	4b0b      	ldr	r3, [pc, #44]	; (8006e10 <vPortSetupTimerInterrupt+0x34>)
 8006de2:	2200      	movs	r2, #0
 8006de4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006de6:	4b0b      	ldr	r3, [pc, #44]	; (8006e14 <vPortSetupTimerInterrupt+0x38>)
 8006de8:	2200      	movs	r2, #0
 8006dea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006dec:	4b0a      	ldr	r3, [pc, #40]	; (8006e18 <vPortSetupTimerInterrupt+0x3c>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4a0a      	ldr	r2, [pc, #40]	; (8006e1c <vPortSetupTimerInterrupt+0x40>)
 8006df2:	fba2 2303 	umull	r2, r3, r2, r3
 8006df6:	099b      	lsrs	r3, r3, #6
 8006df8:	4a09      	ldr	r2, [pc, #36]	; (8006e20 <vPortSetupTimerInterrupt+0x44>)
 8006dfa:	3b01      	subs	r3, #1
 8006dfc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006dfe:	4b04      	ldr	r3, [pc, #16]	; (8006e10 <vPortSetupTimerInterrupt+0x34>)
 8006e00:	2207      	movs	r2, #7
 8006e02:	601a      	str	r2, [r3, #0]
}
 8006e04:	bf00      	nop
 8006e06:	46bd      	mov	sp, r7
 8006e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0c:	4770      	bx	lr
 8006e0e:	bf00      	nop
 8006e10:	e000e010 	.word	0xe000e010
 8006e14:	e000e018 	.word	0xe000e018
 8006e18:	20000000 	.word	0x20000000
 8006e1c:	10624dd3 	.word	0x10624dd3
 8006e20:	e000e014 	.word	0xe000e014

08006e24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006e24:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006e34 <vPortEnableVFP+0x10>
 8006e28:	6801      	ldr	r1, [r0, #0]
 8006e2a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006e2e:	6001      	str	r1, [r0, #0]
 8006e30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006e32:	bf00      	nop
 8006e34:	e000ed88 	.word	0xe000ed88

08006e38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006e38:	b480      	push	{r7}
 8006e3a:	b085      	sub	sp, #20
 8006e3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006e3e:	f3ef 8305 	mrs	r3, IPSR
 8006e42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	2b0f      	cmp	r3, #15
 8006e48:	d914      	bls.n	8006e74 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006e4a:	4a17      	ldr	r2, [pc, #92]	; (8006ea8 <vPortValidateInterruptPriority+0x70>)
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	4413      	add	r3, r2
 8006e50:	781b      	ldrb	r3, [r3, #0]
 8006e52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006e54:	4b15      	ldr	r3, [pc, #84]	; (8006eac <vPortValidateInterruptPriority+0x74>)
 8006e56:	781b      	ldrb	r3, [r3, #0]
 8006e58:	7afa      	ldrb	r2, [r7, #11]
 8006e5a:	429a      	cmp	r2, r3
 8006e5c:	d20a      	bcs.n	8006e74 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e62:	f383 8811 	msr	BASEPRI, r3
 8006e66:	f3bf 8f6f 	isb	sy
 8006e6a:	f3bf 8f4f 	dsb	sy
 8006e6e:	607b      	str	r3, [r7, #4]
}
 8006e70:	bf00      	nop
 8006e72:	e7fe      	b.n	8006e72 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006e74:	4b0e      	ldr	r3, [pc, #56]	; (8006eb0 <vPortValidateInterruptPriority+0x78>)
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006e7c:	4b0d      	ldr	r3, [pc, #52]	; (8006eb4 <vPortValidateInterruptPriority+0x7c>)
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	429a      	cmp	r2, r3
 8006e82:	d90a      	bls.n	8006e9a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e88:	f383 8811 	msr	BASEPRI, r3
 8006e8c:	f3bf 8f6f 	isb	sy
 8006e90:	f3bf 8f4f 	dsb	sy
 8006e94:	603b      	str	r3, [r7, #0]
}
 8006e96:	bf00      	nop
 8006e98:	e7fe      	b.n	8006e98 <vPortValidateInterruptPriority+0x60>
	}
 8006e9a:	bf00      	nop
 8006e9c:	3714      	adds	r7, #20
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea4:	4770      	bx	lr
 8006ea6:	bf00      	nop
 8006ea8:	e000e3f0 	.word	0xe000e3f0
 8006eac:	20001af0 	.word	0x20001af0
 8006eb0:	e000ed0c 	.word	0xe000ed0c
 8006eb4:	20001af4 	.word	0x20001af4

08006eb8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b08a      	sub	sp, #40	; 0x28
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006ec4:	f7fe fd70 	bl	80059a8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006ec8:	4b5b      	ldr	r3, [pc, #364]	; (8007038 <pvPortMalloc+0x180>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d101      	bne.n	8006ed4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006ed0:	f000 f920 	bl	8007114 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006ed4:	4b59      	ldr	r3, [pc, #356]	; (800703c <pvPortMalloc+0x184>)
 8006ed6:	681a      	ldr	r2, [r3, #0]
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	4013      	ands	r3, r2
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	f040 8093 	bne.w	8007008 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d01d      	beq.n	8006f24 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006ee8:	2208      	movs	r2, #8
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	4413      	add	r3, r2
 8006eee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f003 0307 	and.w	r3, r3, #7
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d014      	beq.n	8006f24 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	f023 0307 	bic.w	r3, r3, #7
 8006f00:	3308      	adds	r3, #8
 8006f02:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f003 0307 	and.w	r3, r3, #7
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d00a      	beq.n	8006f24 <pvPortMalloc+0x6c>
	__asm volatile
 8006f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f12:	f383 8811 	msr	BASEPRI, r3
 8006f16:	f3bf 8f6f 	isb	sy
 8006f1a:	f3bf 8f4f 	dsb	sy
 8006f1e:	617b      	str	r3, [r7, #20]
}
 8006f20:	bf00      	nop
 8006f22:	e7fe      	b.n	8006f22 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d06e      	beq.n	8007008 <pvPortMalloc+0x150>
 8006f2a:	4b45      	ldr	r3, [pc, #276]	; (8007040 <pvPortMalloc+0x188>)
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	687a      	ldr	r2, [r7, #4]
 8006f30:	429a      	cmp	r2, r3
 8006f32:	d869      	bhi.n	8007008 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006f34:	4b43      	ldr	r3, [pc, #268]	; (8007044 <pvPortMalloc+0x18c>)
 8006f36:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006f38:	4b42      	ldr	r3, [pc, #264]	; (8007044 <pvPortMalloc+0x18c>)
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006f3e:	e004      	b.n	8006f4a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f42:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f4c:	685b      	ldr	r3, [r3, #4]
 8006f4e:	687a      	ldr	r2, [r7, #4]
 8006f50:	429a      	cmp	r2, r3
 8006f52:	d903      	bls.n	8006f5c <pvPortMalloc+0xa4>
 8006f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d1f1      	bne.n	8006f40 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006f5c:	4b36      	ldr	r3, [pc, #216]	; (8007038 <pvPortMalloc+0x180>)
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f62:	429a      	cmp	r2, r3
 8006f64:	d050      	beq.n	8007008 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006f66:	6a3b      	ldr	r3, [r7, #32]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	2208      	movs	r2, #8
 8006f6c:	4413      	add	r3, r2
 8006f6e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f72:	681a      	ldr	r2, [r3, #0]
 8006f74:	6a3b      	ldr	r3, [r7, #32]
 8006f76:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f7a:	685a      	ldr	r2, [r3, #4]
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	1ad2      	subs	r2, r2, r3
 8006f80:	2308      	movs	r3, #8
 8006f82:	005b      	lsls	r3, r3, #1
 8006f84:	429a      	cmp	r2, r3
 8006f86:	d91f      	bls.n	8006fc8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006f88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	4413      	add	r3, r2
 8006f8e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006f90:	69bb      	ldr	r3, [r7, #24]
 8006f92:	f003 0307 	and.w	r3, r3, #7
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d00a      	beq.n	8006fb0 <pvPortMalloc+0xf8>
	__asm volatile
 8006f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f9e:	f383 8811 	msr	BASEPRI, r3
 8006fa2:	f3bf 8f6f 	isb	sy
 8006fa6:	f3bf 8f4f 	dsb	sy
 8006faa:	613b      	str	r3, [r7, #16]
}
 8006fac:	bf00      	nop
 8006fae:	e7fe      	b.n	8006fae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fb2:	685a      	ldr	r2, [r3, #4]
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	1ad2      	subs	r2, r2, r3
 8006fb8:	69bb      	ldr	r3, [r7, #24]
 8006fba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fbe:	687a      	ldr	r2, [r7, #4]
 8006fc0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006fc2:	69b8      	ldr	r0, [r7, #24]
 8006fc4:	f000 f908 	bl	80071d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006fc8:	4b1d      	ldr	r3, [pc, #116]	; (8007040 <pvPortMalloc+0x188>)
 8006fca:	681a      	ldr	r2, [r3, #0]
 8006fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fce:	685b      	ldr	r3, [r3, #4]
 8006fd0:	1ad3      	subs	r3, r2, r3
 8006fd2:	4a1b      	ldr	r2, [pc, #108]	; (8007040 <pvPortMalloc+0x188>)
 8006fd4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006fd6:	4b1a      	ldr	r3, [pc, #104]	; (8007040 <pvPortMalloc+0x188>)
 8006fd8:	681a      	ldr	r2, [r3, #0]
 8006fda:	4b1b      	ldr	r3, [pc, #108]	; (8007048 <pvPortMalloc+0x190>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	429a      	cmp	r2, r3
 8006fe0:	d203      	bcs.n	8006fea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006fe2:	4b17      	ldr	r3, [pc, #92]	; (8007040 <pvPortMalloc+0x188>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	4a18      	ldr	r2, [pc, #96]	; (8007048 <pvPortMalloc+0x190>)
 8006fe8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fec:	685a      	ldr	r2, [r3, #4]
 8006fee:	4b13      	ldr	r3, [pc, #76]	; (800703c <pvPortMalloc+0x184>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	431a      	orrs	r2, r3
 8006ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ff6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006ffe:	4b13      	ldr	r3, [pc, #76]	; (800704c <pvPortMalloc+0x194>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	3301      	adds	r3, #1
 8007004:	4a11      	ldr	r2, [pc, #68]	; (800704c <pvPortMalloc+0x194>)
 8007006:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007008:	f7fe fcdc 	bl	80059c4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800700c:	69fb      	ldr	r3, [r7, #28]
 800700e:	f003 0307 	and.w	r3, r3, #7
 8007012:	2b00      	cmp	r3, #0
 8007014:	d00a      	beq.n	800702c <pvPortMalloc+0x174>
	__asm volatile
 8007016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800701a:	f383 8811 	msr	BASEPRI, r3
 800701e:	f3bf 8f6f 	isb	sy
 8007022:	f3bf 8f4f 	dsb	sy
 8007026:	60fb      	str	r3, [r7, #12]
}
 8007028:	bf00      	nop
 800702a:	e7fe      	b.n	800702a <pvPortMalloc+0x172>
	return pvReturn;
 800702c:	69fb      	ldr	r3, [r7, #28]
}
 800702e:	4618      	mov	r0, r3
 8007030:	3728      	adds	r7, #40	; 0x28
 8007032:	46bd      	mov	sp, r7
 8007034:	bd80      	pop	{r7, pc}
 8007036:	bf00      	nop
 8007038:	20005700 	.word	0x20005700
 800703c:	20005714 	.word	0x20005714
 8007040:	20005704 	.word	0x20005704
 8007044:	200056f8 	.word	0x200056f8
 8007048:	20005708 	.word	0x20005708
 800704c:	2000570c 	.word	0x2000570c

08007050 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b086      	sub	sp, #24
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d04d      	beq.n	80070fe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007062:	2308      	movs	r3, #8
 8007064:	425b      	negs	r3, r3
 8007066:	697a      	ldr	r2, [r7, #20]
 8007068:	4413      	add	r3, r2
 800706a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800706c:	697b      	ldr	r3, [r7, #20]
 800706e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007070:	693b      	ldr	r3, [r7, #16]
 8007072:	685a      	ldr	r2, [r3, #4]
 8007074:	4b24      	ldr	r3, [pc, #144]	; (8007108 <vPortFree+0xb8>)
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	4013      	ands	r3, r2
 800707a:	2b00      	cmp	r3, #0
 800707c:	d10a      	bne.n	8007094 <vPortFree+0x44>
	__asm volatile
 800707e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007082:	f383 8811 	msr	BASEPRI, r3
 8007086:	f3bf 8f6f 	isb	sy
 800708a:	f3bf 8f4f 	dsb	sy
 800708e:	60fb      	str	r3, [r7, #12]
}
 8007090:	bf00      	nop
 8007092:	e7fe      	b.n	8007092 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007094:	693b      	ldr	r3, [r7, #16]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d00a      	beq.n	80070b2 <vPortFree+0x62>
	__asm volatile
 800709c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070a0:	f383 8811 	msr	BASEPRI, r3
 80070a4:	f3bf 8f6f 	isb	sy
 80070a8:	f3bf 8f4f 	dsb	sy
 80070ac:	60bb      	str	r3, [r7, #8]
}
 80070ae:	bf00      	nop
 80070b0:	e7fe      	b.n	80070b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80070b2:	693b      	ldr	r3, [r7, #16]
 80070b4:	685a      	ldr	r2, [r3, #4]
 80070b6:	4b14      	ldr	r3, [pc, #80]	; (8007108 <vPortFree+0xb8>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4013      	ands	r3, r2
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d01e      	beq.n	80070fe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80070c0:	693b      	ldr	r3, [r7, #16]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d11a      	bne.n	80070fe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80070c8:	693b      	ldr	r3, [r7, #16]
 80070ca:	685a      	ldr	r2, [r3, #4]
 80070cc:	4b0e      	ldr	r3, [pc, #56]	; (8007108 <vPortFree+0xb8>)
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	43db      	mvns	r3, r3
 80070d2:	401a      	ands	r2, r3
 80070d4:	693b      	ldr	r3, [r7, #16]
 80070d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80070d8:	f7fe fc66 	bl	80059a8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80070dc:	693b      	ldr	r3, [r7, #16]
 80070de:	685a      	ldr	r2, [r3, #4]
 80070e0:	4b0a      	ldr	r3, [pc, #40]	; (800710c <vPortFree+0xbc>)
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	4413      	add	r3, r2
 80070e6:	4a09      	ldr	r2, [pc, #36]	; (800710c <vPortFree+0xbc>)
 80070e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80070ea:	6938      	ldr	r0, [r7, #16]
 80070ec:	f000 f874 	bl	80071d8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80070f0:	4b07      	ldr	r3, [pc, #28]	; (8007110 <vPortFree+0xc0>)
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	3301      	adds	r3, #1
 80070f6:	4a06      	ldr	r2, [pc, #24]	; (8007110 <vPortFree+0xc0>)
 80070f8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80070fa:	f7fe fc63 	bl	80059c4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80070fe:	bf00      	nop
 8007100:	3718      	adds	r7, #24
 8007102:	46bd      	mov	sp, r7
 8007104:	bd80      	pop	{r7, pc}
 8007106:	bf00      	nop
 8007108:	20005714 	.word	0x20005714
 800710c:	20005704 	.word	0x20005704
 8007110:	20005710 	.word	0x20005710

08007114 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007114:	b480      	push	{r7}
 8007116:	b085      	sub	sp, #20
 8007118:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800711a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800711e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007120:	4b27      	ldr	r3, [pc, #156]	; (80071c0 <prvHeapInit+0xac>)
 8007122:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	f003 0307 	and.w	r3, r3, #7
 800712a:	2b00      	cmp	r3, #0
 800712c:	d00c      	beq.n	8007148 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	3307      	adds	r3, #7
 8007132:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	f023 0307 	bic.w	r3, r3, #7
 800713a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800713c:	68ba      	ldr	r2, [r7, #8]
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	1ad3      	subs	r3, r2, r3
 8007142:	4a1f      	ldr	r2, [pc, #124]	; (80071c0 <prvHeapInit+0xac>)
 8007144:	4413      	add	r3, r2
 8007146:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800714c:	4a1d      	ldr	r2, [pc, #116]	; (80071c4 <prvHeapInit+0xb0>)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007152:	4b1c      	ldr	r3, [pc, #112]	; (80071c4 <prvHeapInit+0xb0>)
 8007154:	2200      	movs	r2, #0
 8007156:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	68ba      	ldr	r2, [r7, #8]
 800715c:	4413      	add	r3, r2
 800715e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007160:	2208      	movs	r2, #8
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	1a9b      	subs	r3, r3, r2
 8007166:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	f023 0307 	bic.w	r3, r3, #7
 800716e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	4a15      	ldr	r2, [pc, #84]	; (80071c8 <prvHeapInit+0xb4>)
 8007174:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007176:	4b14      	ldr	r3, [pc, #80]	; (80071c8 <prvHeapInit+0xb4>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	2200      	movs	r2, #0
 800717c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800717e:	4b12      	ldr	r3, [pc, #72]	; (80071c8 <prvHeapInit+0xb4>)
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	2200      	movs	r2, #0
 8007184:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	68fa      	ldr	r2, [r7, #12]
 800718e:	1ad2      	subs	r2, r2, r3
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007194:	4b0c      	ldr	r3, [pc, #48]	; (80071c8 <prvHeapInit+0xb4>)
 8007196:	681a      	ldr	r2, [r3, #0]
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	685b      	ldr	r3, [r3, #4]
 80071a0:	4a0a      	ldr	r2, [pc, #40]	; (80071cc <prvHeapInit+0xb8>)
 80071a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	685b      	ldr	r3, [r3, #4]
 80071a8:	4a09      	ldr	r2, [pc, #36]	; (80071d0 <prvHeapInit+0xbc>)
 80071aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80071ac:	4b09      	ldr	r3, [pc, #36]	; (80071d4 <prvHeapInit+0xc0>)
 80071ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80071b2:	601a      	str	r2, [r3, #0]
}
 80071b4:	bf00      	nop
 80071b6:	3714      	adds	r7, #20
 80071b8:	46bd      	mov	sp, r7
 80071ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071be:	4770      	bx	lr
 80071c0:	20001af8 	.word	0x20001af8
 80071c4:	200056f8 	.word	0x200056f8
 80071c8:	20005700 	.word	0x20005700
 80071cc:	20005708 	.word	0x20005708
 80071d0:	20005704 	.word	0x20005704
 80071d4:	20005714 	.word	0x20005714

080071d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80071d8:	b480      	push	{r7}
 80071da:	b085      	sub	sp, #20
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80071e0:	4b28      	ldr	r3, [pc, #160]	; (8007284 <prvInsertBlockIntoFreeList+0xac>)
 80071e2:	60fb      	str	r3, [r7, #12]
 80071e4:	e002      	b.n	80071ec <prvInsertBlockIntoFreeList+0x14>
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	60fb      	str	r3, [r7, #12]
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	687a      	ldr	r2, [r7, #4]
 80071f2:	429a      	cmp	r2, r3
 80071f4:	d8f7      	bhi.n	80071e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	685b      	ldr	r3, [r3, #4]
 80071fe:	68ba      	ldr	r2, [r7, #8]
 8007200:	4413      	add	r3, r2
 8007202:	687a      	ldr	r2, [r7, #4]
 8007204:	429a      	cmp	r2, r3
 8007206:	d108      	bne.n	800721a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	685a      	ldr	r2, [r3, #4]
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	685b      	ldr	r3, [r3, #4]
 8007210:	441a      	add	r2, r3
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	685b      	ldr	r3, [r3, #4]
 8007222:	68ba      	ldr	r2, [r7, #8]
 8007224:	441a      	add	r2, r3
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	429a      	cmp	r2, r3
 800722c:	d118      	bne.n	8007260 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681a      	ldr	r2, [r3, #0]
 8007232:	4b15      	ldr	r3, [pc, #84]	; (8007288 <prvInsertBlockIntoFreeList+0xb0>)
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	429a      	cmp	r2, r3
 8007238:	d00d      	beq.n	8007256 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	685a      	ldr	r2, [r3, #4]
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	685b      	ldr	r3, [r3, #4]
 8007244:	441a      	add	r2, r3
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	681a      	ldr	r2, [r3, #0]
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	601a      	str	r2, [r3, #0]
 8007254:	e008      	b.n	8007268 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007256:	4b0c      	ldr	r3, [pc, #48]	; (8007288 <prvInsertBlockIntoFreeList+0xb0>)
 8007258:	681a      	ldr	r2, [r3, #0]
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	601a      	str	r2, [r3, #0]
 800725e:	e003      	b.n	8007268 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681a      	ldr	r2, [r3, #0]
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007268:	68fa      	ldr	r2, [r7, #12]
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	429a      	cmp	r2, r3
 800726e:	d002      	beq.n	8007276 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	687a      	ldr	r2, [r7, #4]
 8007274:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007276:	bf00      	nop
 8007278:	3714      	adds	r7, #20
 800727a:	46bd      	mov	sp, r7
 800727c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007280:	4770      	bx	lr
 8007282:	bf00      	nop
 8007284:	200056f8 	.word	0x200056f8
 8007288:	20005700 	.word	0x20005700

0800728c <memset>:
 800728c:	4402      	add	r2, r0
 800728e:	4603      	mov	r3, r0
 8007290:	4293      	cmp	r3, r2
 8007292:	d100      	bne.n	8007296 <memset+0xa>
 8007294:	4770      	bx	lr
 8007296:	f803 1b01 	strb.w	r1, [r3], #1
 800729a:	e7f9      	b.n	8007290 <memset+0x4>

0800729c <_reclaim_reent>:
 800729c:	4b29      	ldr	r3, [pc, #164]	; (8007344 <_reclaim_reent+0xa8>)
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	4283      	cmp	r3, r0
 80072a2:	b570      	push	{r4, r5, r6, lr}
 80072a4:	4604      	mov	r4, r0
 80072a6:	d04b      	beq.n	8007340 <_reclaim_reent+0xa4>
 80072a8:	69c3      	ldr	r3, [r0, #28]
 80072aa:	b143      	cbz	r3, 80072be <_reclaim_reent+0x22>
 80072ac:	68db      	ldr	r3, [r3, #12]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d144      	bne.n	800733c <_reclaim_reent+0xa0>
 80072b2:	69e3      	ldr	r3, [r4, #28]
 80072b4:	6819      	ldr	r1, [r3, #0]
 80072b6:	b111      	cbz	r1, 80072be <_reclaim_reent+0x22>
 80072b8:	4620      	mov	r0, r4
 80072ba:	f000 f879 	bl	80073b0 <_free_r>
 80072be:	6961      	ldr	r1, [r4, #20]
 80072c0:	b111      	cbz	r1, 80072c8 <_reclaim_reent+0x2c>
 80072c2:	4620      	mov	r0, r4
 80072c4:	f000 f874 	bl	80073b0 <_free_r>
 80072c8:	69e1      	ldr	r1, [r4, #28]
 80072ca:	b111      	cbz	r1, 80072d2 <_reclaim_reent+0x36>
 80072cc:	4620      	mov	r0, r4
 80072ce:	f000 f86f 	bl	80073b0 <_free_r>
 80072d2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80072d4:	b111      	cbz	r1, 80072dc <_reclaim_reent+0x40>
 80072d6:	4620      	mov	r0, r4
 80072d8:	f000 f86a 	bl	80073b0 <_free_r>
 80072dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80072de:	b111      	cbz	r1, 80072e6 <_reclaim_reent+0x4a>
 80072e0:	4620      	mov	r0, r4
 80072e2:	f000 f865 	bl	80073b0 <_free_r>
 80072e6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80072e8:	b111      	cbz	r1, 80072f0 <_reclaim_reent+0x54>
 80072ea:	4620      	mov	r0, r4
 80072ec:	f000 f860 	bl	80073b0 <_free_r>
 80072f0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80072f2:	b111      	cbz	r1, 80072fa <_reclaim_reent+0x5e>
 80072f4:	4620      	mov	r0, r4
 80072f6:	f000 f85b 	bl	80073b0 <_free_r>
 80072fa:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80072fc:	b111      	cbz	r1, 8007304 <_reclaim_reent+0x68>
 80072fe:	4620      	mov	r0, r4
 8007300:	f000 f856 	bl	80073b0 <_free_r>
 8007304:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8007306:	b111      	cbz	r1, 800730e <_reclaim_reent+0x72>
 8007308:	4620      	mov	r0, r4
 800730a:	f000 f851 	bl	80073b0 <_free_r>
 800730e:	6a23      	ldr	r3, [r4, #32]
 8007310:	b1b3      	cbz	r3, 8007340 <_reclaim_reent+0xa4>
 8007312:	4620      	mov	r0, r4
 8007314:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007318:	4718      	bx	r3
 800731a:	5949      	ldr	r1, [r1, r5]
 800731c:	b941      	cbnz	r1, 8007330 <_reclaim_reent+0x94>
 800731e:	3504      	adds	r5, #4
 8007320:	69e3      	ldr	r3, [r4, #28]
 8007322:	2d80      	cmp	r5, #128	; 0x80
 8007324:	68d9      	ldr	r1, [r3, #12]
 8007326:	d1f8      	bne.n	800731a <_reclaim_reent+0x7e>
 8007328:	4620      	mov	r0, r4
 800732a:	f000 f841 	bl	80073b0 <_free_r>
 800732e:	e7c0      	b.n	80072b2 <_reclaim_reent+0x16>
 8007330:	680e      	ldr	r6, [r1, #0]
 8007332:	4620      	mov	r0, r4
 8007334:	f000 f83c 	bl	80073b0 <_free_r>
 8007338:	4631      	mov	r1, r6
 800733a:	e7ef      	b.n	800731c <_reclaim_reent+0x80>
 800733c:	2500      	movs	r5, #0
 800733e:	e7ef      	b.n	8007320 <_reclaim_reent+0x84>
 8007340:	bd70      	pop	{r4, r5, r6, pc}
 8007342:	bf00      	nop
 8007344:	2000005c 	.word	0x2000005c

08007348 <__libc_init_array>:
 8007348:	b570      	push	{r4, r5, r6, lr}
 800734a:	4d0d      	ldr	r5, [pc, #52]	; (8007380 <__libc_init_array+0x38>)
 800734c:	4c0d      	ldr	r4, [pc, #52]	; (8007384 <__libc_init_array+0x3c>)
 800734e:	1b64      	subs	r4, r4, r5
 8007350:	10a4      	asrs	r4, r4, #2
 8007352:	2600      	movs	r6, #0
 8007354:	42a6      	cmp	r6, r4
 8007356:	d109      	bne.n	800736c <__libc_init_array+0x24>
 8007358:	4d0b      	ldr	r5, [pc, #44]	; (8007388 <__libc_init_array+0x40>)
 800735a:	4c0c      	ldr	r4, [pc, #48]	; (800738c <__libc_init_array+0x44>)
 800735c:	f000 f880 	bl	8007460 <_init>
 8007360:	1b64      	subs	r4, r4, r5
 8007362:	10a4      	asrs	r4, r4, #2
 8007364:	2600      	movs	r6, #0
 8007366:	42a6      	cmp	r6, r4
 8007368:	d105      	bne.n	8007376 <__libc_init_array+0x2e>
 800736a:	bd70      	pop	{r4, r5, r6, pc}
 800736c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007370:	4798      	blx	r3
 8007372:	3601      	adds	r6, #1
 8007374:	e7ee      	b.n	8007354 <__libc_init_array+0xc>
 8007376:	f855 3b04 	ldr.w	r3, [r5], #4
 800737a:	4798      	blx	r3
 800737c:	3601      	adds	r6, #1
 800737e:	e7f2      	b.n	8007366 <__libc_init_array+0x1e>
 8007380:	080076d0 	.word	0x080076d0
 8007384:	080076d0 	.word	0x080076d0
 8007388:	080076d0 	.word	0x080076d0
 800738c:	080076d4 	.word	0x080076d4

08007390 <__retarget_lock_acquire_recursive>:
 8007390:	4770      	bx	lr

08007392 <__retarget_lock_release_recursive>:
 8007392:	4770      	bx	lr

08007394 <memcpy>:
 8007394:	440a      	add	r2, r1
 8007396:	4291      	cmp	r1, r2
 8007398:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800739c:	d100      	bne.n	80073a0 <memcpy+0xc>
 800739e:	4770      	bx	lr
 80073a0:	b510      	push	{r4, lr}
 80073a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80073a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80073aa:	4291      	cmp	r1, r2
 80073ac:	d1f9      	bne.n	80073a2 <memcpy+0xe>
 80073ae:	bd10      	pop	{r4, pc}

080073b0 <_free_r>:
 80073b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80073b2:	2900      	cmp	r1, #0
 80073b4:	d044      	beq.n	8007440 <_free_r+0x90>
 80073b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80073ba:	9001      	str	r0, [sp, #4]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	f1a1 0404 	sub.w	r4, r1, #4
 80073c2:	bfb8      	it	lt
 80073c4:	18e4      	addlt	r4, r4, r3
 80073c6:	f000 f83f 	bl	8007448 <__malloc_lock>
 80073ca:	4a1e      	ldr	r2, [pc, #120]	; (8007444 <_free_r+0x94>)
 80073cc:	9801      	ldr	r0, [sp, #4]
 80073ce:	6813      	ldr	r3, [r2, #0]
 80073d0:	b933      	cbnz	r3, 80073e0 <_free_r+0x30>
 80073d2:	6063      	str	r3, [r4, #4]
 80073d4:	6014      	str	r4, [r2, #0]
 80073d6:	b003      	add	sp, #12
 80073d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80073dc:	f000 b83a 	b.w	8007454 <__malloc_unlock>
 80073e0:	42a3      	cmp	r3, r4
 80073e2:	d908      	bls.n	80073f6 <_free_r+0x46>
 80073e4:	6825      	ldr	r5, [r4, #0]
 80073e6:	1961      	adds	r1, r4, r5
 80073e8:	428b      	cmp	r3, r1
 80073ea:	bf01      	itttt	eq
 80073ec:	6819      	ldreq	r1, [r3, #0]
 80073ee:	685b      	ldreq	r3, [r3, #4]
 80073f0:	1949      	addeq	r1, r1, r5
 80073f2:	6021      	streq	r1, [r4, #0]
 80073f4:	e7ed      	b.n	80073d2 <_free_r+0x22>
 80073f6:	461a      	mov	r2, r3
 80073f8:	685b      	ldr	r3, [r3, #4]
 80073fa:	b10b      	cbz	r3, 8007400 <_free_r+0x50>
 80073fc:	42a3      	cmp	r3, r4
 80073fe:	d9fa      	bls.n	80073f6 <_free_r+0x46>
 8007400:	6811      	ldr	r1, [r2, #0]
 8007402:	1855      	adds	r5, r2, r1
 8007404:	42a5      	cmp	r5, r4
 8007406:	d10b      	bne.n	8007420 <_free_r+0x70>
 8007408:	6824      	ldr	r4, [r4, #0]
 800740a:	4421      	add	r1, r4
 800740c:	1854      	adds	r4, r2, r1
 800740e:	42a3      	cmp	r3, r4
 8007410:	6011      	str	r1, [r2, #0]
 8007412:	d1e0      	bne.n	80073d6 <_free_r+0x26>
 8007414:	681c      	ldr	r4, [r3, #0]
 8007416:	685b      	ldr	r3, [r3, #4]
 8007418:	6053      	str	r3, [r2, #4]
 800741a:	440c      	add	r4, r1
 800741c:	6014      	str	r4, [r2, #0]
 800741e:	e7da      	b.n	80073d6 <_free_r+0x26>
 8007420:	d902      	bls.n	8007428 <_free_r+0x78>
 8007422:	230c      	movs	r3, #12
 8007424:	6003      	str	r3, [r0, #0]
 8007426:	e7d6      	b.n	80073d6 <_free_r+0x26>
 8007428:	6825      	ldr	r5, [r4, #0]
 800742a:	1961      	adds	r1, r4, r5
 800742c:	428b      	cmp	r3, r1
 800742e:	bf04      	itt	eq
 8007430:	6819      	ldreq	r1, [r3, #0]
 8007432:	685b      	ldreq	r3, [r3, #4]
 8007434:	6063      	str	r3, [r4, #4]
 8007436:	bf04      	itt	eq
 8007438:	1949      	addeq	r1, r1, r5
 800743a:	6021      	streq	r1, [r4, #0]
 800743c:	6054      	str	r4, [r2, #4]
 800743e:	e7ca      	b.n	80073d6 <_free_r+0x26>
 8007440:	b003      	add	sp, #12
 8007442:	bd30      	pop	{r4, r5, pc}
 8007444:	20005854 	.word	0x20005854

08007448 <__malloc_lock>:
 8007448:	4801      	ldr	r0, [pc, #4]	; (8007450 <__malloc_lock+0x8>)
 800744a:	f7ff bfa1 	b.w	8007390 <__retarget_lock_acquire_recursive>
 800744e:	bf00      	nop
 8007450:	20005850 	.word	0x20005850

08007454 <__malloc_unlock>:
 8007454:	4801      	ldr	r0, [pc, #4]	; (800745c <__malloc_unlock+0x8>)
 8007456:	f7ff bf9c 	b.w	8007392 <__retarget_lock_release_recursive>
 800745a:	bf00      	nop
 800745c:	20005850 	.word	0x20005850

08007460 <_init>:
 8007460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007462:	bf00      	nop
 8007464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007466:	bc08      	pop	{r3}
 8007468:	469e      	mov	lr, r3
 800746a:	4770      	bx	lr

0800746c <_fini>:
 800746c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800746e:	bf00      	nop
 8007470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007472:	bc08      	pop	{r3}
 8007474:	469e      	mov	lr, r3
 8007476:	4770      	bx	lr
